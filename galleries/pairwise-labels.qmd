---
title: "Pairwise labels with 'ggpmisc'"
subtitle: "Contrasts, multiple comparisons and simple labels"
author: "Pedro J. Aphalo"
date: "2023-08-01"
date-modified: "2023-08-01"
keywords: [ggplot2 pkg, ggpp pkg, ggpmisc pkg, data labels, plot annotations, pairwise]
categories: [Plotting examples]
editor: 
  markdown: 
    wrap: 72
code-fold: true
format:
  html: 
    code-link: true
    code-tools: true
---

::: callout-warning
**This page is still a draft. The examples make use of future version 0.5.4 of package
'ggpp' which is under development and thus not yet available through CRAN. It
can be installed from the [git repository at
GitHub](https://github.com/aphalo/ggpp).**

Code examples will be expanded and the text will be revised as the
development of packages 'ggpp' and 'ggpmisc' advances in the next few weeks.
:::

::: callout-tip
In this page most code chunks are "folded" so as to decrease the clutter when
searching for examples. A few code chunks that are reused across several plots
are by default unfolded to make them more visible. Above each plot you will find
one or more "folded" code chuncks signalled by a small triangle followed by
"Code". Clicking on the triangle "unfolds" the code chunk making visible the R
code used to produce the plot.

The code in the chunks can be copied by clicking on the top right
corner, where an icon appears when the mouse cursor hovers over the code
listing.

The `</> Code` drop down menu to the right of the page title makes it possible
to unfold all code chunks and to view the Quarto source of the whole web page.

Names of functions and other R objects are linked to the corresponding on-line
help pages. The names of R extension packages are linked to their documentation
web sites when available.
:::

## Introduction

Here you will find examples of ggplots with labeled segments as used to highlight
pairwise comparisons among factor levels. The labelled segments have been
added to the plots with geometries defined in package [ggpp](https://docs.r4photobiology.info/ggpp/) and
statistics from package [ggpmisc](https://docs.r4photobiology.info/ggpmisc/) both available at CRAN.

::: callout-important
One needs to always check that annotations do not occlude anything
significant, such as observations in the base plot. This needs special
care when using annotations together with batch plotting. Either ensure
that the scale limits of the base plot are expanded to avoid overlap or
that the layer with the equations is the lowest one, i.e., added to the
plot first.
:::

## Data labels and plot annotations

Data labels add textual information directly related to individual data
points (shown as glyphs). Text position in this case is dependent on the
scales used to represent data points. Text is usually displaced so that
it does not occlude the glyph representing the data point and when the
link to the data point is unclear, this link is signalled with a line
segment or arrow. Data labels are distinct from annotations in that they
contribute directly to the representation of data on a plot or map.

Annotations differ from data labels, in that their position is decoupled
from their meaning. Insets can be thought as larger, but still
self-contained annotations. In most cases the reading of inset tables
and plots depends only weakly on the plot or map in which they are
included.

In the case of annotations and insets the designer of a data
visualization has the freedom to locate them anywhere, as long as they
do not occlude features used to describe data. I will use the term
annotation irrespective if the "labels" are textual or graphical.

The labelled segments used to highlight pairwise comparisons are a special
case as they behave as data labels along the axis onto which an explanatory
factor has been mapped, usually _x_, but as annotation along the axis onto
which a continuous numeric variable has been mapped, usually _y_.

## Significance of pairwise comparisons

Pairwise comparisons are used with grouped observations, i.e., when a factor
is mapped to the _x_ (or _y_) aesthetic. Usually observations are summarized
as mean and standard errors, either as points or columns, or using boxplots.

There are two approaches in common use to display significance of differences in
this type of plot: use of single letters so that columns or points representing groups that
are significantly different do not have any in common will those not
significantly different from each other share at least one letter. This approach
has a long tradition but is being replaced by annotated horizontal bars,
showing either _P_-values, asterics, or some other in a label. This second
approach is easier to read but can result in crowded figures.

Statistically, multiple comparisons are special in that they are not orthogonal
and thus _P_-values must be adjusted or computed using special procedures.
Uncorrected _t_-tests must be avoided. In case of a factor with more than
two levels, multiple comparisons should be applied only if the overall 
significance of the effect of the factor or its interactions are significant.

From version 0.5.4 package 'ggpp' includes geometries `geom_text_pairwise()`
and `geom_label_pairwise()`, that simplify the addition of labelled segments.

Load and attach the packages.

```{r, message=FALSE}
#| code-fold: false
library(ggpmisc)
```
Make a simple plot to label.

```{r}
my.cars <- mtcars
my.cars$cyl <- factor(my.cars$cyl)
my.cars$name <- rownames(my.cars)

p1 <- ggplot(my.cars, aes(cyl, mpg)) +
  geom_boxplot(width = 0.33)
p1
```

The first, and simplest example with labelled segments, uses labels to identify
the contrasts but, does not use estimates from tests of significance.

::: callout-warning
In 'ggplot2', when a factor is mapped to _x_ (or _y_) the values used internally
are the numerical representation of the levels in the factor, i.e., as `integer`
values starting from 1. Thus, the leftmost factor level on the _x_ axis
coresponds to `1`, the second factor level to `2`, and so on, irrespective of
the labels.
:::

We construct a data frame with the data for text labels.

```{r}
#| code-fold: false
labels.df <-
  data.frame(
    pair.label = c("4 vs. 6 cyl.", "4 vs. 8 cyl.", "6 vs. 8 cyl."),
    right.tip = c(2, 3, 3),
    left.tip = c(1, 1, 2),
    y.bar = c(35.5, 38, 33)
  )
```

```{r}
 p1 +
   geom_text_pairwise(data = labels.df,
                      aes(xmin = left.tip, 
                          xmax = right.tip,
                          y = y.bar,
                          label = pair.label)) +
  expand_limits(y = 40)
```

While I will use `geom_text_pairwise()` for most examples, I here use 
`geom_label_pairwise()`. Their differences are similar to those between
`geom_text()` and `geom_label()`. Other examples later in this page can
be easily changed to use `geom_label_pairwise()` instead of 
`geom_text_pairwise()`.

```{r}
 p1 +
  geom_label_pairwise(data = labels.df,
                      aes(xmin = left.tip, 
                          xmax = right.tip,
                          y = y.bar,
                          label = pair.label)) +
  expand_limits(y = 40) +
  theme_bw()
```

```{r}
 p1 +
  geom_label_pairwise(data = labels.df,
                      aes(xmin = left.tip, 
                          xmax = right.tip,
                          y = y.bar,
                          label = pair.label),
                      fill = "black",
                      colour = "white",
                      colour.target = "text",
                      segment.linewidth = 0.75) +
  expand_limits(y = 40)
```
### Pairwise _t_-test

To label the bars with _P_-values we can compute them before plotting and build
a suitable data frame.

We run the test and construct a data frame with the results, adding arbitrary
values for _y_ to avoid overlaps.

```{r}
#| code-fold: false
my.htest <- 
  pairwise.t.test(my.cars$mpg, my.cars$cyl, p.adjust.method = "holm")
my.htest

t.test.df <- data.frame(
  p.value = as.vector(my.htest$p.value),
  right.tip = c(2, 3, NA, 3),
  left.tip = c(1, 1, NA, 2),
  y.bar = c(35.5, 38, NA, 33)
)
```

```{r}
 p1 +
   geom_text_pairwise(data = t.test.df,
                      aes(xmin = left.tip, 
                          xmax = right.tip,
                          y = y.bar,
                          label = ifelse(p.value < 1e-3,
                                         "italic(P)~`<`~0.001",
                                         sprintf("italic(P)~`=`~%.3f", p.value))),
                      parse = TRUE,
                      na.rm = TRUE) +
  expand_limits(y = 40)
```

```{r}
 p1 +
   geom_text_pairwise(data = t.test.df,
                      aes(xmin = left.tip, 
                          xmax = right.tip,
                          y = y.bar,
                          label = ifelse(p.value < 1e-3,
                                         "italic(P)~`<`~0.001",
                                         sprintf("italic(P)~`=`~%.3f", p.value))),
                      arrow = grid::arrow(angle = 90,
                                          length = unit(1, "mm"),
                                          ends = "both"),
                      parse = TRUE,
                      na.rm = TRUE) +
  expand_limits(y = 40)
```

```{r}
 p1 +
   geom_text_pairwise(data = t.test.df,
                      aes(xmin = left.tip, 
                          xmax = right.tip,
                          y = y.bar,
                          colour = p.value < 0.002,
                          label = ifelse(p.value < 1e-3,
                                         "italic(P)~`<`~0.001",
                                         sprintf("italic(P)~`=`~%.3f", p.value))),
                      arrow = grid::arrow(angle = 90,
                                          length = unit(1, "mm"),
                                          ends = "both"),
                      parse = TRUE,
                      na.rm = TRUE) +
  scale_colour_manual(values = c("black", "red"), na.value = NA, guide = "none") +
  expand_limits(y = 40)
```

```{r}
 p1 +
   geom_text_pairwise(data = t.test.df,
                      aes(xmin = left.tip, 
                          xmax = right.tip,
                          y = y.bar,
                          colour = p.value < 0.002,
                          label = ifelse(p.value < 1e-3,
                                         "italic(P)~`<`~0.001",
                                         sprintf("italic(P)~`=`~%.3f", p.value))),
                       colour.target = "all",
                       arrow = grid::arrow(angle = 90,
                                          length = unit(1, "mm"),
                                          ends = "both"),
                      parse = TRUE,
                      na.rm = TRUE) +
  scale_colour_manual(values = c("black", "red"), na.value = NA, guide = "none") +
  expand_limits(y = 40)
```

### Other uses

Geometries `geom_text_pairwise()` and `geom_label_pairwise()` can be also used
when the variables mapped onto aesthetics _x_ and _y_ are both continuous
numeric variables. In this type of plot they can be used to highlight ranges.

I construct a different base plot for labelling.

```{r}
p2 <-
  ggplot(my.cars, aes(disp, mpg)) +
    geom_point()
p2
```

I also construct a new data frame with the data for labelling ranges. In this
case as _x_ is numeric, and we set the _x_ values for the segment ends using
user-data units (i.e., the values as shown in _x_ axis' tick marks).

```{r}
#| code-fold: false
my.ranges <-
  data.frame(A = c(50, 400),
             B = c(200, 500),
             bar.height = 0,
             text = c("small", "large"))
```

```{r}
p2 +
  geom_hline(yintercept = 0, colour = "grey") +
  geom_text_pairwise(data = my.ranges,
                     aes(xmin = A, xmax = B,
                     y = bar.height, label = text)) +
  expand_limits(y = 0) +
  theme_bw()
```


```{r}
p2 +
  geom_hline(yintercept = 0, colour = "grey", linewidth = 1) +
  geom_text_pairwise(data = my.ranges,
                     aes(xmin = A, xmax = B,
                     y = bar.height, label = text),
                     arrow = grid::arrow(ends = "both", length = unit(2, "mm"))) +
  expand_limits(y = 0) +
  theme_bw()
```
