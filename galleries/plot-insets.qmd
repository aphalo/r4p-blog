---
title: "ggplot insets with package 'ggpp'"
subtitle: "Plots, tables and graphical objects as ggplot insets"
author: "Pedro J. Aphalo"
date: today
keywords: [ggplot2, ggpp, R, plot insets, dataviz, data visualization]
categories: [ggpp pkg, data labels, plot annotations]
editor: 
  markdown: 
    wrap: 72
---

::: callout-tip
In this page code chunks are "folded" so as to decrease the clutter when 
searching for examples. Above each plot you will find a small triangle followed
by "Code". Clicking on the triangle "unfolds" the code chunk making visible
the R code used to produce the plot. Except for the loading of packages shown
in section **Preliminaries** code examples are in most cases self contained.
When they are not, this is indicated by a comment.

The code in the chunks can be copied by clicking on the top right corner, where
an icon appears when the mouse cursor hovers over it.
:::

## Data labels and plot annotations

Data labels and plot annotations differ in that data labels refer directly to
data described by individual graphical features, like points or curves, in a
plot. In contrast, annotations provide context to the plotted data but are
independent of any individual graphical features in a plot. An example of
data labels are text or icons used to identify or highlight individual
observations. An annotation can be as simple as text giving the count of the
number of observations depicted in a plot, a table with results from an 
statistical analysis of the data in a plot or even another plot showing data
that provide the context for reading the main or base figure.

## What are plot insets

The use of insets in plots was rather frequent when plots where drawn
using ink and pen by draughtsmen. With the advent of computer-drawn
plots they became less common. In many situations they are very useful.
In this gallery I give examples of plots with insets created using
packages 'ggplot2' and 'ggpp'. For simplicity, whenever possible I use
base R functions instead of contributed R packages, including those from
the 'tidyverse'.

Insets are not normally used for data exploration, they are in most
cases used in publications and reports, either to provide context or
save space.

::: callout-important
One needs to always check that insets do not occlude anything
significant, such as observations in the base plot. This makes insets
unsuitable for automation, unless the scale limits of the base plot are
expanded to ensure that no overlap is possible.
:::

## Preliminaries

The code used is shown above each plot and can be copied. We first load
the packages we will use.

When package 'ggpp' is loaded and attached, package 'ggplot2' is also
attached. The only function from 'ggplot2' that is redefined by 'ggpp'
is `annotate()`, which remains backwards compatible with 'ggplot2'.

```{r}
#| code-fold: false
library(ggpp)
library(dplyr)
```

## Inset plots within plots

Inset plots are most frequently annotations. They can be used to zoom in
to a portion of the data, to show a less important property of
observations, or more commonly for maps, to show a broader region to
provide recognizable context.

::: callout-note
A future separate gallery is planned for map insets. They can be added
similarly as those shown here, but projections and coordinate systems
add complexity.
:::

### Using `annotate()`

The first set of examples show how to use `annotate()` together with the
geoms from package 'ggpp' to add inset plots to single-panel ggplots.
The examples show different uses of insets. All examples use data sets
available in R or the packages loaded. In this examples we use
`annotate()` together with `geom_plot_npc()` or `geom_plot()`.

#### Zoom in

`geom_plot_npc()` obeys native plot coordinates instead of data
coordinates. NPC coordinates are relative to the plotting area and take
values in \[0..1\]. They make consistent positioning of annotations
easy. Only for this first example we show the use of both
`geom_plot_npc()` and `geom_plot()`. In both geoms the default for
`hjust` and `vjust` is `"inward"`.

```{r}
# zoom in region
zoom.region <- list(x = c(4.9, 6.2), y = c(13, 21))

# main plot
p.base <- ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +
  geom_point()

# inset zoomed-in plot
p.inset <- p.base + 
  coord_cartesian(xlim = zoom.region$x, ylim = zoom.region$y) +
  labs(x = NULL, y = NULL) +
  theme_bw(8) +
  scale_colour_discrete(guide = "none")

# whole plot using annotate() and NPC coordinates
p.combined <- p.base + 
  annotate(geom = "plot_npc", npcx = 0.95, npcy = 0.95, label = p.inset)

# highlight zoomed-in region
p.combined + 
  annotate(geom = "rect", 
           xmin = zoom.region$x[1], xmax = zoom.region$x[2], 
           ymin = zoom.region$y[1], ymax = zoom.region$y[2],
           linetype = "dotted", fill = NA, colour = "black")
```

`geom_plot()` obeys the usual `x` and `y` aesthetics expressed in data
coordinates. As shown here, while NPC coordinates are refered to the
plotting area set by other plot layers, using data cordinates, just as
for text labels, results in its expansion as needed to include the
inset's *x* and *x* coordinates.

```{r}
# CONTINUED FROM CODE CHUNK IMMEDIATELY ABOVE

# whole plot using annotate() and data coordinates
p.d.combined <- p.base + 
  annotate(geom = "plot", x = 7, y = 50, label = p.inset)

# highlight zoomed-in region
p.d.combined + 
  annotate(geom = "rect", 
           xmin = zoom.region$x[1], xmax = zoom.region$x[2], 
           ymin = zoom.region$y[1], ymax = zoom.region$y[2],
           linetype = "dotted", fill = NA, colour = "black")

```

#### Zoom out

```{r}
# zoom in region
zoom.region <- list(x = c(4.9, 6.2), y = c(13, 21))

# a plot with zoom area highlighted
p <- ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +
  geom_point() + 
  annotate(geom = "rect", 
           xmin = zoom.region$x[1], xmax = zoom.region$x[2], 
           ymin = zoom.region$y[1], ymax = zoom.region$y[2],
           linetype = "dotted", fill = NA, colour = "black")

# inset whole-plot 
p.inset <- p  +
  labs(x = NULL, y = NULL) +
  theme_bw(8) +
  scale_colour_discrete(guide = "none")

# main zoomed-in plot
p.base <- p + 
  coord_cartesian(xlim = zoom.region$x, ylim = zoom.region$y) +
  expand_limits(y = 24) 

# whole plot using annotate()
p.base + 
  annotate(geom = "plot_npc", npcx = 0.98, npcy = 0.98, label = p.inset) +
  scale_y_continuous(expand = expansion(mult = c(0.05, 0.20)))

```

#### Summary plot

```{r}
# column plot of summaries as inset
p.inset <- 
  ggplot(mpg, aes(factor(cyl), hwy, fill = factor(cyl))) +
  stat_summary(geom = "col", fun = mean, width = 2/3) +
  labs(x = "Number of cylinders", y = NULL, title = "Means") +
  scale_fill_discrete(guide = "none")

# scatter plot as main plot
p.base <- 
  ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +
  geom_point() +
  labs(x = "Engine displacement (l)", y = "Fuel use efficiency (MPG)",
       colour = "Engine cylinders\n(number)") +
  theme_bw()

# plot with inset plot using annotate()
p.base +
  annotate("plot_npc", npcx = 0.97, npcy = 0.98, label = p.inset + theme_bw(8))

```

#### Other data or variables

```{r}
# box plot as inset
p.inset <- 
  ggplot(mpg, aes(factor(cyl), hwy, fill = factor(cyl))) +
  stat_boxplot() +
  labs(x = "Engine cylinders (number)", y = "") +
  scale_fill_discrete(guide = "none")

# scatter plot as main plot
p.base <- 
  ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +
  geom_point() +
  labs(x = "Engine displacement (l)", y = "Fuel use efficiency (MPG)",
       colour = "Engine\ncylinders\n(number)") +
  theme_bw()

# plot with inset plot using annotate()
p.base +
  annotate("plot_npc", 
           npcx = 0.97, npcy = 0.98, 
           label = p.inset + theme_bw(9), 
           vp.width = 0.6, vp.height = 0.4) # relative size of inset
```

### Using `geom_plot()` and `geom_plot_npc()`

In the examples above we used `annotate()` as it is the easiest
approach. However, `annotate()` does not support adding different
annotations to different panels in a faceted plot. Very small plots can
sometimes function as data labels, specially in maps. In both cases we
need to use the geometries directly and pass a data frame as argument to
their `data` formal parameter.

When building `data` object containing the inset plots we need to add a
list as a column in a `data.frame`. This is possible as long as the
lengths match, but the `list` object needs to be protected with `I()`,
R's identity function.

```{r}
# faceted scatter plot as base plot
p.base <- 
  ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +
  geom_point() +
  labs(x = "Engine displacement (l)", y = "Fuel use efficiency (MPG)",
       colour = "Engine\ncylinders\n(number)") +
  facet_wrap(facets = vars(cyl), labeller = label_both) +
  theme_bw()

# ad hoc function for constructing box plots
make_inset <- 
  function(target.cyl) {
    ggplot(subset(mpg, cyl == target.cyl),
           aes(factor(cyl), hwy)) +
      stat_boxplot() +
      labs(x = "Engine cylinders\n(number)", y = "") +
      scale_fill_discrete(guide = "none") + 
      theme_bw(7)
  }

# list of box plots as insets
p.inset.list <- lapply(unique(mpg$cyl), make_inset)

# data frame to be used as data for plotting insets
inset.df <- data.frame(cyl = unique(mpg$cyl),
                       plots =  I(p.inset.list),
                       npcx = c(0.97, 0.97, 0.0, 0.97),
                       npcy = 0.5)

# plot with inset plots using geom_plot_npc()
p.base +
  geom_plot_npc(data = inset.df, 
                vp.height = 0.8,
                mapping = aes(npcx = npcx, npcy = npcy, label = plots))
```

When using tibbles instead of data frames, the call to `I()` can be
omitted.

```{r}
# CONTINUED FROM CODE CHUNK IMMEDIATELY ABOVE

# tibble to be used as data for plotting insets
inset.tb <- 
  tibble::tibble(cyl = unique(mpg$cyl),
                 plots =  p.inset.list,
                 npcx = c(0.97, 0.97, 0.0, 0.97),
                 npcy = 0.5)

# plot with inset plots using geom_plot_npc()
p.base +
  geom_plot_npc(data = inset.tb, 
                vp.height = 0.8,
                mapping = aes(npcx = npcx, npcy = npcy, label = plots))
```

### Alternatives

::: callout-tip
Inset plots used as annotations, but not as data labels, can be added to base
plots using the plot composition operators and function `inset_element()` from
package 'patchwork'.

If the desired composed plot format is a 'grid' `grob` then the individual plots
can be converted first into grobs with function `ggplotGrob()` and these grobs 
subsequently combined using functions from package 'grid'.
:::

## Inset tables within plots

Tables are less frequently used as insets than plots. As annotations,
they can be useful in two situations: 1) reporting results for the
statistical analysis of the plotted data, and 2) adding numerical
summaries about the data. Very small tables can be also useful as data
labels to highlight specific observations in a plot or data for
locations in a map.

### Using `annotate()`

The first set of examples show how to use `annotate()` together with the
geoms from package 'ggpp' to add inset tables to single-panel ggplots.
The examples show different uses of insets. All examples use data sets
available in R or package 'ggplot2'. In this examples we use
`annotate()` together with `geom_table_npc()` or `geom_table()`.

#### Summaries

A simple table of medians computed using base R's `aggregate()` added
using `annotate()` and `geom = "table_npc"`.

```{r}
# compute medians grouped by number of cylinders
df <- aggregate(cbind(hwy, cty) ~ cyl, data = mpg, FUN = median)

# create a plot with an inset table with medians
ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +
  annotate(geom = "table_npc", npcx = 0.95, npcy = 0.95, label = df) +
  geom_point() +
  theme_bw()
```

Here we use package 'dplyr' to compute the summaries, and we name the
variables directly with the desired column titles as strings to be
parsed into R expressions. We add the table as above but pass
`parse = TRUE` so that the column titles display as math expressions.

```{r}
# compute medians grouped by number of cylinders
mpg |> 
  group_by(cyl) |>
  summarize("bar(italic(x))" = round(mean(hwy), 1),
            "italic(s)^{2}" = round(var(hwy), 1),
            "italic(n)" = n()) -> tb

# create a plot with an inset table with medians
ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +
  annotate("table_npc", npcx = 0.95, npcy = 0.95, label = tb, 
           parse = TRUE) +
  geom_point() +
  theme_bw()
```

In this third example we use `stat_fmt_tb()` together with
`geom_table()` to substitute some of the column headers, select columns,
size or text and colours, and change the order of rows.

```{r}
tb <- mpg |>
  group_by(cyl) |>
  summarise(hwy = median(hwy), cty = median(cty))

data.tb <- data.frame(x = 7, y = 44, tb = I(list(tb)))

ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +
  stat_fmt_tb(data = data.tb, 
             aes(x, y, label = tb),
             table.theme = ttheme_gtlight,
             size = 4.5, colour = "darkblue",
             tb.vars = c(Cylinders = "cyl", MPG = "hwy"), # rename
             tb.rows = 4:1) + # change order
  labs(x = "Engine displacement (l)", y = "Fuel use efficiency (MPG)",
       colour = "Engine\ncylinders\n(number)") +
  geom_point() +
  theme_bw(15)
```

### Alternatives

::: callout-tip
Inset tables used as annotations, but not as data labels, can be added to base
plots using the plot composition operators and function `inset_element()` from
package 'patchwork' if the table available as a 'grid' `grob`.

If the desired composed plot format is a 'grid' `grob` then the plot can be
converted first into a grob with function `ggplotGrob()` and this grob
subsequently combined with a table grob defining a table using functions from
package 'grid'.
:::

## Inset 'grid' graphical objects within plots

Functions `geom_grob()` and `geom_grob_npc()` mimic the user interface of
`geom_text_s()` which is a superset of that of `geom_text()` from package
'ggplot2'. This makes them best suited for adding graphical data labels and 
annotations. As they accept 'grid' grobs, they can add both bit maps and
vector graphics within the same plot layer in a single call.

### Using `annotate()`

Using `annotate()` together with `geom_grob_npc()` we can easily add for example
a logo available as a bitmap file to a plot.

```{r}
logo.file.name <- 
  system.file("extdata", "logo-ggpp.png", 
              package = "ggpp", mustWork = TRUE)

ggpp.logo <- magick::image_read(logo.file.name)

ggplot(mpg, aes(displ, hwy, colour = cyl)) +
  geom_point() +
  annotate(geom = "grob_npc", npcx = 0.95, npcy = 0.9,
           label = grid::rasterGrob(ggpp.logo))
```


### Using `geom_table()` and `geom_table_npc()`

#### Bitmaps

We can use bitmaps or rasters as annotations and data labels. We need to
first convert them into graphical objects (`grob`) compatible with
package 'grid'. Package 'grid' is included in the R distribution and the
underlying plotting engine used by 'ggplot2'. In this example we read a
bitmap from a PNG file using package 'magick'. This is one out several
ways available in R to import raster data.

```{r}
# read a bitmap file, in this case included in 'ggpp'
Isoquercitin.file.name <- 
  system.file("extdata", "Isoquercitin.png", 
              package = "ggpp", mustWork = TRUE)

Isoquercitin <- magick::image_read(Isoquercitin.file.name)

Robinin.file.name <- 
  system.file("extdata", "Robinin.png", 
              package = "ggpp", mustWork = TRUE)

Robinin <- magick::image_read(Robinin.file.name)

# some fake concentration data together with grobs
flavonoids.df <- 
  data.frame(metabolite = c("Isoquercitin", "Robinin"),
             structure = I(list(grid::rasterGrob(image = Isoquercitin),
                                grid::rasterGrob(image = Robinin))),
             concentration = c(10, 8))

# make plot with data label
ggplot(flavonoids.df, 
       aes(metabolite, concentration, label = structure)) +
  geom_col(width = 0.2, fill = "grey95", colour = "black") +
  geom_grob(inherit.aes = TRUE,
            nudge_y = 2,
            segment.linewidth = 0,
            vp.height = 0.2, vp.width = 1) +
  expand_limits(y = 13.5) +
  labs(x = "Flavonoid", y = expression("Concentration "*(mg~g^{-1}))) +
  theme_bw()
```

::: callout-tip
Function `image_read()` supports several other bitmap formats in addition to
PNG. Version `r magick::magick_config()$version` of 'magick', used to render
this page supports the following formats and devices.

```{r}
names(magick::magick_config()[-(1:2)])
```

Although 'magick' is convenient to use, it is not the only way of importing or
creating `raster` objects in R. Ploting itself, however, remains unchanged.
:::

#### Vector graphics

Vector graphics can be defined directly using functions from package
'grid' or converted into grobs from SVG or PDF code.

::: callout-warning
Be aware that the PDF format supports both vector graphics and bitmaps. 
Conversion from vector graphics into bitmaps is usually relatively easy, while
the reverse is much more difficult.
:::

For the next example we follow the technical report [*SVG In, SVG Out*
by Paul
Murrell](https://www.stat.auckland.ac.nz/~paul/Reports/grImport/grimport-gridsvg-export/grimport-gridsvg-export.html)
to create a `grob` by reading an SVG file.

### Alternatives

::: callout-tip
Package 'ggplot2' defines `geom_raster()` which makes it possible to directly
add a `raster` as a plot layer.

Package 'ggimg' defines `geom_rect_img()` and `geom_point_img()`.

Inset grid grobs used as annotations, but not as data labels, can be added to
base plots using the plot composition operators and function `inset_element()`
from package 'patchwork'.

If the desired composed plot format is a 'grid' `grob` then the plot can be
converted first into a grob with function `ggplotGrob()` and this grob
subsequently combined with a separately created 'grid' grob using functions from
package 'grid'.
:::

