---
title: "R at its simplest"
subtitle: "R vs. calculator vs. Excel"
author: "Pedro J. Aphalo"
date: 2023-09-19
date-modified: 2023-10-14
categories: [R]
keywords: [introduction]
format:
  html:
    code-fold: false
    code-tools: true
abstract: 
  A very simple introduction to R, based on a comparison to calculators and worksheets.
draft: false
---

## R compared to a calculator

For the simplest computations there is little difference between a calculator and R (e.g., if one uses the number pad of the computer keyboard). Nowadays, advanced calculators show the entered text in full, like R does. One uses enter in R, instead of the equals key in a calculator.

```{r}
36 / 12 + 1
```

Of course, in a computer there are no keys for square root and similar, we type the name of the function instead. 

```{r}
sqrt(36)
```

In a calculator we use "memories" (e.g., M1, M2, etc. ) to store values, with keys frequently labeled "MSTO" and "MRCL" used to store and recal them. In R we use names or _variables_, that we can chose, and use `<name> <-` to store a value and the `<name>` to recall the stored value. I use `<name>` to signify any valid name.

```{r}
my_number <- 36
my_number
```

We have assigned `36` to `my_number` and we can now use `my_number` in computations.

```{r}
my_number / 12 + 1
sqrt(my_number)
```

Why is this useful? Because, we can describe the operations using names, instead of specific numbers or values. This makes it possible to describe the operation to be done, as an abstract rule that we can apply unchanged to different numbers, by assigning them to the name used in the code.

```{r}
my_number <- 24
my_number / 12 + 1
sqrt(my_number)
```

## R compared to Excel

In R one can store values in a `data.frame` that is somehow similar to a worksheet, in that each column is a variable and each row corresponds to an observation or measurement event.

```{r}
data.frame(ID = c(1, 2, 3, 4, 5), 
           height = c(170, 155, 145, 180, 167), 
           weight = c(70, 60, 55, 90, 85))
```

On the other hand, in R instructions for calculations and data are kept separate. The data frame can contain not only numbers, but also text and other values but not formulas. The calculations are entered separately, and a single "formula" can refer to whole vectors or columns.

We start by giving a name to the data frame, i.e., storing it in a variable.

```{r}
my.df <- data.frame(ID = c(1, 2, 3, 4, 5), 
                    height = c(1.70, 1.55, 1.45, 1.80, 1.67), # meters
                    weight = c(56, 60, 55, 90, 85)) # kg
print(my.df)
```

To compute the body mass index (BMI) and add it as a new column, we use "instructions" that make reference to the columns in the data frame.

```{r}
my.df$BMI <- my.df$weight / my.df$height^2 
print(my.df)
```

If `my.df` had 1000's or even 1000000's of rows, we would have only one copy, or a single _code statement_ instead of what in Excel would have been one copy of the formula in each row of the worksheet.

Data frames are always rectangular and subject to much more strict rules than worksheets (no empty spaces, no plots, etc.).

## Precedence rules

The normal arithmetic precedence rules apply to R expressions, and the order can be altered with parentheses following the normal rules as in arithmetic. While in mathematics it is common to use different brackets depending on the nesting depth $\{[( )]\}$ in R only parentheses `( )` are used to any depth of nesting. _The other brackets are reserved for other uses._

## Functions

Functions are named pieces or _chuncks_ of code, defined using named placeholders or _parameters_ to which we can pass values as _arguments_.

In an the examples above we _called_ function `sqrt()` with a _constant value_ `36` as argument and also with variable `my_number` as argument.

There are many different predefined functions in R, and as we will see later, we can also create our own functions.

## Help and documentation

Start by exploring.

```{r, eval=FALSE}
help(Arithmetic)
```

```{r, eval=FALSE}
help(sqrt)
```

```{r, eval=FALSE}
help(log)
```

```{r, eval=FALSE}
help(Trig)
```

## Time to play

Now it is time for your to play with numbers.



