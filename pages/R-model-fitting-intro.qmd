---
title: "Model fitting in R"
subtitle: "An introduction"
author: "Pedro J. Aphalo"
date: 2022-05-3
date-modified: 2023-05-30
categories: [R, model fitting]
keywords: [predicted values, residual values, parameter estimates, model formulas]
format:
  html:
    code-fold: true
    code-tools: true
---

## Introduction

Fitting a model to data consists in finding the parameter values that best
explain the data or observations. These parameter values are estimates of
those in a larger population of possible observations from which we have
drawn a sample or subset.



Model selection involves comparing models that differ in their structure, i.e., 
in the formula that relates parameters and data.

In general, there are many different aspects of a model fit that we may be
interested in. The most computationally intensive step is the fitting itself.
Thus R's approach is to save the results from fitting, or _fitted model_, and
separately query it for different derived numerical and graphical output as 
needed.

## Fitting a model

```{r, message = FALSE}
library(ggpmisc)
library(broom)

set.seed(19065)
# set.seed(4321) # change or comment out to get different psedorandom values
# generate artificial data
x <- 1:24
y <- (x + x^2 + x^3) + rnorm(length(x), mean = 0, sd = mean(x^3) / 2)
y <- y / max(y)
my.data <- data.frame(x, 
                      y, 
                      group = c("A", "B"), 
                      y2 = y * c(1, 2) + c(0, 0.2),
                      block = c("a", "a", "b", "b"),
                      wt = sqrt(x))
```

We normally save the fitted model object into a variable.

```{r}
fm1 <- lm(formula = y ~ poly(x, 3), data = my.data)
```

Then we query this object saved in variable `cars.lm` with different methods, 
for example with `summary()`.

```{r}
summary(fm1)
```

## Fitted values

The observations.

```{r}
ggplot(my.data, aes(x = x, y = y)) +
         geom_point()
```

The fitted values.

```{r}
ggplot(my.data, aes(x = x, y = y)) +
         geom_point() +
  stat_fit_fitted(formula = y ~ poly(x, 3), colour = "blue")
```

The prediction line.

```{r}
ggplot(my.data, aes(x = x, y = y)) +
         geom_point() +
  stat_poly_line(formula = y ~ poly(x, 3), se = FALSE)
```


The prediction line plus its 95% confidence band.

```{r}
ggplot(my.data, aes(x = x, y = y)) +
         geom_point() +
  stat_poly_line(formula = y ~ poly(x, 3), se = TRUE)
```

The prediction line plus its 95% confidence band with extrapolation.

```{r}
ggplot(my.data, aes(x = x, y = y)) +
         geom_point() +
  geom_vline(xintercept = range(my.data$x), size = 0.33) +
  stat_poly_line(formula = y ~ poly(x, 3), se = TRUE, fullrange = TRUE) +
  expand_limits(x = c(-10, 40)) # an arbitrary range
```

The residuals plotted as deviations from the prediction line.

```{r}
ggplot(my.data, aes(x = x, y = y)) +
         geom_point() +
  stat_poly_line(formula = y ~ poly(x, 3), se = FALSE) +
  stat_fit_deviations(formula = y ~ poly(x, 3), colour = "red", 
                      arrow = arrow(length = unit(0.33, "lines"), ends = "both"))
```


The residuals plotted as deviations from the fitted values.

```{r}
ggplot(my.data, aes(x = x, y = y)) +
         geom_point() +
  stat_fit_deviations(formula = y ~ poly(x, 3), 
                      colour = "red", 
                      arrow = arrow(length = unit(0.33, "lines"), ends = "both")) +
  stat_fit_fitted(formula = y ~ poly(x, 3), colour = "blue")
```

The residuals plotted on their own.

```{r}
ggplot(my.data, aes(x = x, y = y)) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  stat_fit_residuals(formula = y ~ poly(x, 3),
                     colour = "red")
```

## Model fitting flowcharts

```{mermaid}
%%| label: fig-barebones
%%| fig-cap: A minimalist diagram of model fitting in R.
%%{init: {"htmlLabels": true} }%%

flowchart LR
  A(<i>model formula</i>) --> B[model fit\nfunction] --> C(model fit\nobject) --> D1['diagnostics' plots]
  AA(<i>observations</i>) --> B
  C --> D2[query methods]
```


```{mermaid}
%%| label: fig-lm
%%| fig-cap: A diagram of linear-model (LM) fitting in R.
%%{init: {"htmlLabels": true} }%%

flowchart LR
  A1(<i>model formula</i>) --> B["<code>lm()</code>"] --> C(<code>lm</code> object) --> C1["<code>plot()</code>"]
  A2(<i>observations</i>) --> B
  A3(<i>weights</i>) -.-> B
  C --> C2["<code>summary()</code>"]
C --> C3["<code>anova()</code>"]
C --> C4["<code>residuals()</code>"]
C --> C5["<code>fitted()</code>"]
C --> C6["<code>AIC()</code>"]
C --> C7["<code>BIC()</code>"]
C --> C8["<code>coefficients()</code>"]
C --> C11["<code>formula()</code>"]
C --> C12["<code>weights()</code>"]
C --> C9["<code>confint()</code>"]
C --> C10["<code>predict()</code>"]
BB("<i>new data</i>") --> C10
```

```{mermaid}
%%| label: fig-glm
%%| fig-cap: A diagram of generalized-linear-model (GLM) fitting in R. Query methods as in @fig-lm.
%%{init: {"htmlLabels": true} }%%

flowchart LR
  A1(<i>model formula</i>) --> B["<code>glm()</code>"] --> C(<code>glm</code> object) --> C1[query methods]
  A2(<i>observations</i>) --> B
  A3(<i>weights</i>) -.-> B
  A4(<i>family</i> and <i>link</i>) --> B
```

```{mermaid}
%%| label: fig-nls
%%| fig-cap: A diagram of nonlinear least squares (NLS) model fitting by numerical approximation in R. Query methods similar to those in @fig-lm.
%%{init: {"htmlLabels": true} }%%

flowchart LR
  A1(<i>model formula</i>) --> B["<code>gls()</code>"] --> C(<code>nls</code> object) --> C1[query methods]
  A2(<i>observations</i>) --> B
  A3(<i>weights</i>) -.-> B
  A5(<i>starting values</i>) --> B
```

## Model selection flowchart

Model selection can be done manually by comparing models fitted individually or automatically using a stepwise approach.

```{mermaid}
%%| label: fig-lm-step
%%| fig-cap: A diagram of linear-model (LM) fitting with stepwise model selection in R.
%%{init: {"htmlLabels": true} }%%

flowchart TB
  A1(<i>model formula</i>) --> B["<code>lm()</code>"] --> C(<code>lm</code> object)
  A2(<i>observations</i>) --> B
  A3(<i>weights</i>) -.-> B
  C --> CI[query methods]
  C --> C1["<code>step()</code>"]
  subgraph "<strong>Model selection</strong>"
  C1 --> C3(<code>lm</code>  object)
  z1(most complex\n<i>model formula</i>) -.-> C1
  z2(simplest nested\n<i>model formula</i>) -.-> C1
  C3 --> CF[query methods]
  end
```
