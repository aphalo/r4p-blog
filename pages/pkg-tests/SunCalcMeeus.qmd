---
title: "SunCalcMeeus"
subtitle: "A 'new old' R package"
author: "Pedro J. Aphalo"
date: 2024-12-11
date-modified: 2024-12-12
categories: [R Package Update]
keywords: [SunCalcMeeus pkg]
format:
  html: 
    code-link: true
    code-tools: true
    code-fold: show
draft: true
---

R package 'SunCalcMeeus' (== 0.1.1) has been accepted on 2024-12-11, and is on its way to CRAN. This package collects functions related to the computation of the position of the sun and times, including day length and night length, from package 'photobiology'. It also includes function for computing empirical estimates of the relative air mass (AM) for different sun elevation angles.

The position of the sun is computed using Meeus well known algorithm, which is accurate over a broad range of dates both into the past and future. I have check accuracy back to year 1700 and forward to year xxxx. The algorithm is described as useful for dates between 1000 BC to 3000 AD, however accuracy of the implementation in 'SunCalcMeeus' could be affected by the limited precision of the computer representation of real numbers as double precision floating point numbers. A preliminary test is described below for more constrained range of dates.

::: callout-warning
Although for many uses, including biology, energy use and history research and applications, Meeus algorithm is considered very accurate, for use in astronomy, it is considered of rather low accuracy. One collections of libraries for astronomy, in FORTRAN and ANSI C versions, is provided by the International Astronomy Union under the name of Standards of Fundametal Astronomy [SOFA](http://www.iausofa.org/).
:::

Meeus mathematical algorithm is more computation intensive than other less accurate ones. However, the implementation is optimized for the computation with long vectors of time instants at a single geographic location.

```{r, echo=FALSE}
library(SunCalcMeeus)
library(lubridate)
library(microbenchmark)
library(suncalc)
library(ggplot2)
library(ggpp)
library(ggdensity)
```

We will test the performance with 10 000 time instants in a vector and nine geographic locations.

```{r}
times <- ymd_hms("2024-12-11 00:00:00") + minutes(1:1e4)
locations <- data.frame(lon = c(0, 0, 0, 90, 90, 90, -90, -90, -90),
                        lat = c(0, 30, 60, 0, 30, 60, 0, 30, 60))
range(times)
```

```{r}
microbenchmark(sun_angles(times, geocode = locations), 
               times = 20L)
```

Next we test the performance with 1 000 000 time instants in a vector and one geographic location.

```{r}
times <- ymd_hms("2024-12-11 00:00:00") + minutes(1:1e6)
range(times)
```
There is one problem, possibly a division by zero or a negative square root.

```{r}
sun_angles.df <- sun_angles(times)
sapply(sun_angles.df, anyNA)
which(is.na(sun_angles.df$azimuth))
sun_angles.df[which(is.na(sun_angles.df$azimuth)), ]
```


```{r, warning=FALSE}
microbenchmark(sun_angles(times), times = 5L)
```

```{r, warning=FALSE}
microbenchmark(getSunlightPosition(date = times, lat = 51.5, lon = 0),
               times = 20L)
```

`sun_angles()` takes between 2.5 and 3 times as much time to run than `getSunlightPosition()` but returns several additional estimates. For most uses they are both most likely fast enough.


Lets check every hour for 600 years starting from 1 January 1700.

```{r, warning=FALSE}
times <- ymd_hms("1700-01-01 00:00:00", tz = "UTC") + hours(1:5.2596e6)
range(times)
```

```{r, warning=FALSE}
meeus.df <- sun_angles(times)
head(meeus.df)
tail(meeus.df)
```

Now we use the 'suncalc' package to compute the same values.

```{r}
suncalc.df <- getSunlightPosition(date = times, lat = 51.5, lon = 0)
suncalc.df$elevation <- suncalc.df$altitude * 180 / pi # radians to degrees
suncalc.df$azimuth <- suncalc.df$azimuth * 180 / pi # radians to degrees
head(suncalc.df)
tail(suncalc.df)
```

We compute the differences in sun elevations, and their range. Over this extended period, the maximum and minimum differences are substantial. We plot a smooth spline on the absolute value of the differences, as from the range we already know that they maxima and minimum differences are of opposite signs. The sun elevation values from the two functions are closest during the first half of the 21st century. On the other hand we see that the fitted spline does not reach the extreme values by a large margin. What is going on?

```{r, message=FALSE}
differences <- suncalc.df$elevation - meeus.df$elevation
differences.range <- range(differences)
differences.range

ggplot(data.frame(times, differences), aes(times, abs(differences))) +
  stat_smooth(method = "gam") +
  stat_panel_counts() +
  labs(x = "Time", y = "Absolute difference in sun elevation (degrees)") +
  expand_limits(y = 0)
```

If we plot the 2D density distribution we get a very surprising pattern. So as
we move into the past we mainly have thre concentrations of differences:
positive, no difference or negatine, with fewer intermediate values. When we
move into the future we get four rays of concentrated difference values.

```{r}
ggplot(data.frame(times, differences), aes(times, differences)) +
  stat_hdr() +
  stat_panel_counts() +
  labs(x = "Time", y = "Difference in sun elevation (degrees)")
```

A difference in sun elevation of 3.5 degrees is too much for many applications. Which algorithm is more accurate?

```{r}
times <- ymd_hms("1700-01-01 00:00:00", tz = "UTC") + hours(0:364 * 24)
# times <- ymd_hms("1900-01-01 00:00:00", tz = "UTC") + hours(0:364 * 24)
length(times)
range(times)
```

I then checked the values from 'SunCalcMeeus' against the online data from the [Astronomical Applications Department of the U.S. Naval Observatory](https://aa.usno.navy.mil/data/index). Differences were in all cases less than 1 min, the resolution of the data from the U.S. Naval Observatory. This was true for years 1700 and 1900 and sunrise and sunset times.

```{r, eval=FALSE}
sunrise_time(times)
```

```{r, eval=FALSE}
sunset_time(times)
```

As one could expect, daylength from matching sunrise and sunset times, also agreed to within 1 min.

```{r, eval=FALSE}
dl_hs <- day_length(times, unit.out = "hours")
data.frame(date = times, 
           day_length = dl_hs,
           day_length_hms =
             paste(trunc(dl_hs), ":",
                   trunc((dl_hs - trunc(dl_hs)) * 60), ":",
                   trunc((dl_hs * 60 - trunc(dl_hs * 60)) * 60), sep = ""))
```


::: callout-note


[On-line documentation](https://docs.r4photobiology.info/SunCalcMeeus/).
[NEWS file](https://docs.r4photobiology.info/SunCalcMeeus/news/).

:::
