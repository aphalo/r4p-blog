{
  "hash": "8ad8b4d9ce313a17901142dac02a8e8b",
  "result": {
    "markdown": "---\ntitle: \"Volcano and quadrant plots with 'ggpmisc'\"\nsubtitle: \"Data labels, annotations and guides\" \nauthor: \"Pedro J. Aphalo\"\ndate: today\nkeywords: [ggplot2, ggpp, R, volcano plot, quadrant plot, dataviz, data visualization]\ncategories: [ggpp pkg, data labels, plot annotations]\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n## Introduction\n\nHere you will find examples of volcano plots and quadrant plots built\nwith packages 'ggplot2', 'ggpp' and 'ggpmisc'. All three packages are\navailable at CRAN. The documentation of [package\n'ggpp'](https://docs.r4photobiology.info/ggpp) and of [package\n'ggpmisc'](https://docs.r4photobiology.info/ggpmisc) is available\non-line.\n\n::: callout-tip\nIn this page code chunks are \"folded\" so as to decrease the clutter when\nsearching for examples. Above each plot you will find a small triangle\nfollowed by \"Code\". Clicking on the triangle \"unfolds\" the code chunk\nmaking visible the R code used to produce the plot. Except for the\nloading of packages shown in section **Preliminaries** code examples are\nin most cases self contained. When they are not, this is indicated by a\ncomment.\n\nThe code in the chunks can be copied by clicking on the top right\ncorner, where an icon appears when the mouse cursor hovers over the code\nlisting.\n:::\n\nFor simplicity, whenever possible I use base R functions instead of\ncontributed R packages. For those packages used only in specific\nexamples I use colon notation to indicate the 'package'.\n\n## Data labels and plot annotations\n\nData labels add textual information directly related to individual data\npoints (shown as glyphs). Text position in this case is dependent on the\nscales used to represent data points. Text is usually displaced so that\nit does not occlude the glyph representing the data point and when the\nlink to the data point is unclear, this link is signaled with a line\nsegment or arrow. Data labels are distinct from annotations in that they\ncontribute directly to the representation of data on a plot or map. The\ntypical case for volcano and quadrant plots is to highlight individual\npoints by labelling with an abbreviation of a gene name or metabolite\nname.\n\nAnnotations differ from data labels, in that their position is decoupled\nfrom their meaning. In the case of annotations the designer of a data\nvisualization has more freedom when deciding their location in an\nillustration, as long as they do not occlude features used to describe\ndata. In the case of volcano and quadrant plots, a typical use of\nannotations is to indicate the number of observations in each quadrant\nof the plot.\n\n## Scales and out-of-bounds observations\n\nVolcano and quadrant plots normally have symetrical positive and\nnegative limits on axes and use transformations for the scales.\n\n## Preliminaries\n\nThe code used is shown on-demand above each plot and can be copied. We\nfirst load the packages we will use.\n\nWhen package 'ggpmisc' is loaded and attached, packages 'ggpp' and\n'ggplot2' are also attached. The only function from 'ggplot2' that is\nredefined by 'ggpp' is `annotate()`, which remains backwards compatible\nwith 'ggplot2'.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(ggpmisc)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: ggpp\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: ggplot2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'ggpp'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:ggplot2':\n\n    annotate\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(ggrepel)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n:::\n\n\n## Quadrant plots\n\n### Simple examples using 'ggpp'\n\nQuadrant plots are scatterplots with the origin (0, 0) at the center of\nthe plotting region. In the first two examples we use artificial data\nand a geom and a stat from package 'ggpp'.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(4321)\n# generate artificial data\nx <- -99:100\ny <- x + rnorm(length(x), mean = 0, sd = abs(x))\nmy.data <- data.frame(x, \n                      y, \n                      group = c(\"A\", \"B\"))\n```\n:::\n\n\nA simple quadrant plot can add two lines to highlight the four quadrants\nand annotations with the number of observations per quadrant. We expand\nthe *y* axis limits to enusre that the count annotations do not overlap\nthe observations.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(my.data, aes(x, y)) +\n  geom_quadrant_lines(colour = \"red\") +\n  stat_quadrant_counts(colour = \"red\") +\n  geom_point() +\n  expand_limits(y = c(-260, 260))\n```\n\n::: {.cell-output-display}\n![](quadrant-volcano-plots_files/figure-html/unnamed-chunk-4-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\nWe create panels or facets for the groups, and the counts are computed\nseparately within each plot panel.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(my.data, aes(x, y, colour = group)) +\n  geom_quadrant_lines() +\n  stat_quadrant_counts(geom = \"label_npc\") +\n  geom_point() +\n  expand_limits(y = c(-260, 260)) +\n  facet_wrap(~group)\n```\n\n::: {.cell-output-display}\n![](quadrant-volcano-plots_files/figure-html/unnamed-chunk-5-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\n`stat_quadrant_counts()` ignores groups, it always shows the total\ncounts per qudrant.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(my.data, aes(x, y, colour = group)) +\n  geom_quadrant_lines() +\n  stat_quadrant_counts() +\n  geom_point() +\n  expand_limits(y = c(-260, 260)) \n```\n\n::: {.cell-output-display}\n![](quadrant-volcano-plots_files/figure-html/unnamed-chunk-6-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\nOccasionally we may want to pool the counts along *x* or *y*.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(my.data, aes(x, y)) +\n  geom_quadrant_lines(pool.along = \"x\") +\n  stat_quadrant_counts(pool.along = \"x\") +\n  geom_point() +\n  expand_limits(y = c(-260, 260)) \n```\n\n::: {.cell-output-display}\n![](quadrant-volcano-plots_files/figure-html/unnamed-chunk-7-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\nOccasionally we may want to relocate the center.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(my.data, aes(x, y)) +\n  geom_quadrant_lines(xintercept = 25, yintercept = -50) +\n  stat_quadrant_counts(xintercept = 25, yintercept = -50) +\n  geom_point() +\n  expand_limits(y = c(-260, 260))\n```\n\n::: {.cell-output-display}\n![](quadrant-volcano-plots_files/figure-html/unnamed-chunk-8-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\n### Realistic examples using 'ggpp' and 'ggpmisc'\n\nFor the examples we will use a subset of RNAseq data for Arabidopsis,\navailable in package 'ggpmisc'. We show here the first 10 rows.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhead(quadrant_example.df, n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         tag          gene outcome.x outcome.y     logFC.x     logFC.y genotype\n1  AT5G12290         AtMC9         0         0 -0.32268490  0.32887081      Ler\n2  AT5G47040        ATFRO2         0         0 -0.10679454 -0.18828653      Ler\n3  AT5G57560 14-3-3EPSILON         0         0  0.22324570  0.74447768      Ler\n4  AT5G24110       ATPTEN1         0         0 -0.72534874  0.06952586      Ler\n5  AT2G41290         RHF2A         0         0  0.44350493 -0.32347741      Ler\n6  AT4G36650          GAE5         0         0 -0.14102146  0.18697968      Ler\n7  AT5G06160        ATGPX7         0         0  0.02449413  0.11392945      Ler\n8  ATCG01130          ARI8         1         0  1.19966811 -0.27054729      Ler\n9  AT1G51690        ATGPX2         0         0 -0.26989074 -0.31378901      Ler\n10 AT3G57600          GCL2         0         0  0.11975213 -0.15760125      Ler\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  ggplot(subset(quadrant_example.df, \n                xy_outcomes2factor(outcome.x, outcome.y) != \"none\"),\n         aes(logFC.x, logFC.y, \n             colour = outcome2factor(outcome.x), \n             fill = outcome2factor(outcome.y))) +\n  geom_quadrant_lines(linetype = \"dotted\") +\n  stat_quadrant_counts(size = 3, colour = \"white\") +\n  geom_point(shape = \"circle filled\", size = 2) +\n  scale_x_logFC(name = \"Transcript abundance for x%unit\") +\n  scale_y_logFC(name = \"Transcript abundance for y%unit\") +\n  scale_colour_outcome() +\n  scale_fill_outcome() +\n  theme_dark()\n```\n\n::: {.cell-output-display}\n![](quadrant-volcano-plots_files/figure-html/unnamed-chunk-10-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\nTo plot in separate panels those observations that are significant along\nboth x and y axes, x axis, y axis, or none, with quadrants merged takes\nmore effort. We first define two helper functions to add counts and\nquadrant lines to each of the four panels.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# we define two functions that call stats with different arguments based on the quadrant\n\nall_quadrant_counts <- function(...) {\n  list(  \n    stat_quadrant_counts(data = . %>% filter(outcome.xy.fct == \"xy\"), ...),\n    stat_quadrant_counts(data = . %>% filter(outcome.xy.fct == \"x\"), pool.along = \"y\", ...),\n    stat_quadrant_counts(data = . %>% filter(outcome.xy.fct == \"y\"), pool.along = \"x\", ...),\n    stat_quadrant_counts(data = . %>% filter(outcome.xy.fct == \"none\"), quadrants = 0L, ...)\n  )\n}\n\nall_quadrant_lines <- function(...) { \n  list(\n    geom_hline(data =  data.frame(outcome.xy.fct = factor(c(\"xy\", \"x\", \"y\", \"none\"),\n                                                          levels = c(\"xy\", \"x\", \"y\", \"none\")),\n                                  yintercept = c(0, NA, 0, NA)),\n               aes(yintercept = yintercept),\n               na.rm = TRUE,\n               ...),\n    geom_vline(data =  data.frame(outcome.xy.fct = factor(c(\"xy\", \"x\", \"y\", \"none\"),\n                                                          levels = c(\"xy\", \"x\", \"y\", \"none\")),\n                                  xintercept = c(0, 0, NA, NA)),\n               aes(xintercept = xintercept),\n               na.rm = TRUE,\n               ...)\n  )\n}\n\n# we use them to plot four panels, each with a different subset of data\n# we first convert the outcomes from the statistical test into factors\n\nquadrant_example.df %>%\n  mutate(.,\n         outcome.x.fct = outcome2factor(outcome.x),\n         outcome.y.fct = outcome2factor(outcome.y),\n         outcome.xy.fct = xy_outcomes2factor(outcome.x, outcome.y)) %>%\n  ggplot(., aes(logFC.x, logFC.y, colour = outcome.x.fct, fill = outcome.y.fct)) +\n  geom_point(shape = 21) +\n  all_quadrant_lines(linetype = \"dotted\") +\n  all_quadrant_counts(size = 3, colour = \"white\") +\n  scale_x_logFC(name = \"Transcript abundance for x%unit\") +\n  scale_y_logFC(name = \"Transcript abundance for y%unit\") +\n  scale_colour_outcome() +\n  scale_fill_outcome() +\n  facet_wrap(~outcome.xy.fct) +\n  theme_dark()\n```\n\n::: {.cell-output-display}\n![](quadrant-volcano-plots_files/figure-html/unnamed-chunk-11-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\nAddition of data labels is best automated by using statistics from\n'ggpp' that filter labels based on the local density of observations,\ntogether with the repulsive geometries from 'ggrepel'.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(subset(quadrant_example.df, \n                xy_outcomes2factor(outcome.x, outcome.y) != \"none\"),\n         aes(logFC.x, logFC.y, \n             label = gene)) +\n  geom_quadrant_lines(linetype = \"dotted\") +\n  stat_dens2d_labels(geom = \"text_repel\", \n                     size = 2, \n                     position = position_nudge_centre(x = 0.1, \n                                                      y = 0.1, \n                                                      direction = \"radial\"),\n                     keep.fraction = 0.3,\n                     keep.number = 30,\n                     keep.these = c(\"AtMC9\", \"HY5\", \"HYH\"),\n                     min.segment.length = 0) +\n  geom_point(shape = \"circle open\", size = 2) +\n  stat_quadrant_counts(aes(label = after_stat(count.label))) +\n  scale_x_logFC(name = \"Transcript abundance for x%unit\") +\n  scale_y_logFC(name = \"Transcript abundance for y%unit\") +\n  scale_fill_outcome() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](quadrant-volcano-plots_files/figure-html/unnamed-chunk-12-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\n## Volcano plots\n\n### Simple examples using 'ggpp'\n\nWe use here a subset of RNAseq data from Arabidopsis. The predefined\nscales simplify the plotting by handling the tick mark labels and axis\nlabels, but also by setting the out of bounds parameters of the scales\nso that out-of-bounds observations are \"shrunk\" to the scale limit. All\nthis can be done also manually but is rather tedious. The scales have\nparameters that allow the defaults to be changed.\n\nIn this example, the counts are for the number of upregulated and\ndownrelated genes.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnrow(volcano_example.df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1218\n```\n:::\n\n```{.r .cell-code}\nhead(volcano_example.df, n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         tag     gene outcome       logFC     PValue genotype\n1  AT1G01040     ASU1       0 -0.15284466 0.35266997      Ler\n2  AT1G01290     ASG4       0 -0.30057068 0.05471732      Ler\n3  AT1G01560 ATSBT1.1       0 -0.57783350 0.06681310      Ler\n4  AT1G01790   AtSAM1       0 -0.04729662 0.74054263      Ler\n5  AT1G02130  AtTRM82       0 -0.14279891 0.29597519      Ler\n6  AT1G02560    PRP39       0  0.23320752 0.07487043      Ler\n7  AT1G02910     LIP2       0  0.12080975 0.39311887      Ler\n8  AT1G03190     KMS2       0  0.09426074 0.57671252      Ler\n9  AT1G03840    MTSF1       0 -0.62652441 0.13968485      Ler\n10 AT1G04100    MAC5A       0  0.28060062 0.26571213      Ler\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(volcano_example.df, \n       aes(logFC, PValue, colour = outcome2factor(outcome))) +\n  geom_point() +\n  scale_x_logFC(name = \"Transcript abundance%unit\") +\n  scale_y_Pvalue() +\n  scale_colour_outcome() +\n  stat_quadrant_counts(data = function(x) {subset(x, outcome != 0)})\n```\n\n::: {.cell-output-display}\n![](quadrant-volcano-plots_files/figure-html/unnamed-chunk-14-1.svg){fig-align='center' width=672}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(volcano_example.df, \n       aes(logFC, PValue, colour = outcome2factor(outcome, n.levels = 2))) +\n  geom_point() +\n  scale_x_logFC(name = \"Transcript abundance%unit\") +\n  scale_y_Pvalue() +\n  scale_colour_outcome(values = \"outcome:de\") +\n  stat_quadrant_counts(data = function(x) {subset(x, outcome != 0)}) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](quadrant-volcano-plots_files/figure-html/unnamed-chunk-15-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\nWe here label those genes in regions of the plot with low local density\nof observations.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(volcano_example.df, \n       aes(logFC, \n           PValue, colour = outcome2factor(outcome, n.levels = 2),\n           label = gene)) +\n  geom_point() +\n  stat_dens2d_labels(geom = \"text_repel\", \n                     size = 2,\n                     colour = \"black\",\n                     position = position_nudge_centre(x = 0.1, \n                                                      y = 0.1, \n                                                      direction = \"radial\"),\n                     keep.fraction = 0.03, # 3% of data points\n                     min.segment.length = 0) +\n  scale_x_logFC(name = \"Transcript abundance%unit\") +\n  scale_y_Pvalue() +\n  scale_colour_outcome(values = \"outcome:de\", de.colour = \"darkgreen\") +\n  stat_quadrant_counts(data = function(x) {subset(x, outcome != 0)},\n                       aes(label = after_stat(count.label))) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](quadrant-volcano-plots_files/figure-html/unnamed-chunk-16-1.svg){fig-align='center' width=672}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(volcano_example.df, \n       aes(logFC, \n           PValue, colour = outcome2factor(outcome),\n           label = gene)) +\n  geom_point() +\n  stat_dens2d_labels(geom = \"text_repel\", \n                     size = 2,\n                     colour = \"black\",\n                     position = position_nudge_centre(x = 0.1, \n                                                      y = 0.1, \n                                                      direction = \"radial\"),\n                     keep.fraction = 0.03, # 3% of data points\n                     min.segment.length = 0) +\n  scale_x_logFC(name = \"Transcript abundance%unit\") +\n  scale_y_Pvalue() +\n  scale_colour_outcome() +\n  stat_quadrant_counts(data = function(x) {subset(x, outcome != 0)},\n                       aes(label = after_stat(count.label))) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](quadrant-volcano-plots_files/figure-html/unnamed-chunk-17-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\nWe here label only genes listed by name in `keep.these`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(volcano_example.df, \n       aes(logFC, \n           PValue, colour = outcome2factor(outcome, n.levels = 2),\n           label = gene)) +\n  geom_point() +\n  stat_dens2d_labels(geom = \"text_s\", \n                     colour = \"red\",\n                     size = 2, \n                     position = position_nudge_centre(x = 0.9, \n                                                      y = 0.9, \n                                                      direction = \"radial\"),\n                     keep.fraction = 0, # 0% based on density\n                     keep.these = c(\"IAA30\", \"IAA18\"),\n                     min.segment.length = 0) +\n  scale_x_logFC(name = \"Transcript abundance%unit\") +\n  scale_y_Pvalue() +\n  scale_colour_outcome(values = \"outcome:de\", de.colour = \"black\") +\n  stat_quadrant_counts(data = function(x) {subset(x, outcome != 0)},\n                       aes(label = after_stat(count.label))) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](quadrant-volcano-plots_files/figure-html/unnamed-chunk-18-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\nWe here label only genes with names starting with \"IAA\" by passing an\nannonymous function to `keep.these`. It will be passed the variable\nmapped to the `label` aesthetic.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(volcano_example.df, \n       aes(logFC, \n           PValue, colour = outcome2factor(outcome, n.levels = 2),\n           label = gene)) +\n  geom_point() +\n  stat_dens2d_labels(geom = \"text_s\", \n                     colour = \"red\",\n                     size = 2, \n                     position = position_nudge_centre(x = 0.9, \n                                                      y = 0.9, \n                                                      direction = \"radial\"),\n                     keep.fraction = 0, # 0% based on density\n                     keep.these = function(x) {grepl(\"^IAA\", x)},\n                     min.segment.length = 0) +\n  scale_x_logFC(name = \"Transcript abundance%unit\") +\n  scale_y_Pvalue() +\n  scale_colour_outcome(values = \"outcome:de\", de.colour = \"black\") +\n  stat_quadrant_counts(data = function(x) {subset(x, outcome != 0)},\n                       aes(label = after_stat(count.label))) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](quadrant-volcano-plots_files/figure-html/unnamed-chunk-19-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\nWe here label only genes for which $P < 1 \\times 10^{-10}$. In this case\nwe pass in addition to the anonymous function to `keep.these` the name\nof the variable in data our functions expects as argument to\n`these.target`.\n\n::: callout-important\nThe names to pass to `these.target` are those of aesthetics rather than\nthose the columns in the user's data frame. In 'ggplot2' only variables\nmapped to aesthetics are visible to stats.\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(volcano_example.df, \n       aes(logFC, \n           PValue, colour = outcome2factor(outcome, n.levels = 2),\n           label = gene)) +\n  geom_point() +\n  stat_dens2d_labels(geom = \"text_repel\", \n                     colour = \"red\",\n                     size = 2, \n                     position = position_nudge_centre(x = 0.9, \n                                                      y = 0.9, \n                                                      direction = \"radial\"),\n                     keep.fraction = 0,\n                     these.target = \"y\",\n                     keep.these = function(x) {x > 10}, # -log10(PValue) in data\n                     min.segment.length = 0,\n                     max.overlaps = Inf) + # force all labels displayed\n  scale_x_logFC(name = \"Transcript abundance%unit\") +\n  scale_y_Pvalue() +\n  scale_colour_outcome(values = \"outcome:de\", de.colour = \"black\") +\n  stat_quadrant_counts(data = function(x) {subset(x, outcome != 0)},\n                       aes(label = after_stat(count.label))) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](quadrant-volcano-plots_files/figure-html/unnamed-chunk-20-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\nThe examples above use only one approach to the selection of genes to\nlabel, but they can be combined. Here we combine a selection based on\ndensity and on *P*-value.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(volcano_example.df, \n       aes(logFC, \n           PValue, colour = outcome2factor(outcome, n.levels = 2),\n           label = gene)) +\n  geom_point() +\n  stat_dens2d_labels(geom = \"text_repel\", \n                     size = 2, \n                     position = position_nudge_centre(x = 0.1, \n                                                      y = 0.1, \n                                                      direction = \"radial\"),\n                     keep.fraction = 0.03,\n                     these.target = \"y\",\n                     exclude.these = function(x) {x < 5}, # -log10(PValue) in data\n                     min.segment.length = 0) +\n  scale_x_logFC(name = \"Transcript abundance%unit\") +\n  scale_y_Pvalue() +\n  scale_colour_outcome(values = \"outcome:de\", de.colour = \"darkgreen\") +\n  stat_quadrant_counts(data = function(x) {subset(x, outcome != 0)},\n                       aes(label = after_stat(count.label)),\n                       colour = \"darkgreen\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](quadrant-volcano-plots_files/figure-html/unnamed-chunk-21-1.svg){fig-align='center' width=672}\n:::\n:::\n",
    "supporting": [
      "quadrant-volcano-plots_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}