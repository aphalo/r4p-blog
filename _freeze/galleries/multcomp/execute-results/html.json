{
  "hash": "82c5714b25b67ef17eb78807e9536036",
  "result": {
    "markdown": "---\ntitle: \"Multiple comparisons with 'ggpmisc'\"\nsubtitle: \"Letter labels and labelled bars\"\nauthor: \"Pedro J. Aphalo\"\ndate: \"2023-08-14\"\ndate-modified: \"2024-04-15\"\nkeywords: [ggplot2 pkg, ggpp pkg, ggpmisc pkg, data labels, plot annotations, pairwise]\ncategories: [Plotting examples]\nabstract: |\n  Examples of plots with pairwise labels and letter labels created with `stat_multcomp()` from R package 'ggpmisc'. Function `stat_multcomp()` computes and adds to ggplots the results from multiple comparison tests as labels. Multiple comparisons based on Tukey and Dunnet contrasts are demonstrated.\neditor: \n  markdown: \n    wrap: 72\ncode-fold: true\nformat:\n  html: \n    code-link: true\n    code-tools: true\ndraft: false\n---\n\n\n::: callout-warning\nThe examples in this page make use of R packages ['ggpmisc'](https://docs.r4photobiology.info/ggpmisc/) (>= 0.5.5.9000) and\n['ggpp'](https://docs.r4photobiology.info/ggpp/) (>= 0.5.5) not yet available through CRAN. In 'ggpmisc' 0.5.4 and 0.5.5\n`stat_multcomp()` was a preliminary implementation that will change in future\nversion 0.5.6. Versions before 0.5.4 lack the layer functions described in this\npage.\n\nPackages 'ggpp' and 'ggpmisc' extend the plotting commands from package \n['ggplot2'](https://ggplot2.tidyverse.org/).\n:::\n\n::: callout-tip\nIn this page most code chunks are \"folded\" so as to decrease the clutter when\nsearching for examples. A few code chunks that are reused across several plots\nare by default unfolded to make them more visible. Above each plot you will find\none or more \"folded\" code chunks signalled by a small triangle followed by\n\"Code\". Clicking on the triangle \"unfolds\" the code chunk making visible the R\ncode used to produce the plot.\n\nThe code in the chunks can be copied by clicking on the top right\ncorner, where an icon appears when the mouse cursor hovers over the code\nlisting.\n\nThe `</> Code` drop down menu to the right of the page title makes it possible\nto unfold all code chunks and to view the Quarto source of the whole web page.\n\nNames of functions and other R objects are linked to the corresponding on-line\nhelp pages. The names of R extension packages are linked to their documentation\nweb sites when available.\n:::\n\n# Plot annotations for multiple comparison tests\n\nData labels add textual information directly related to individual data\npoints (shown as glyphs), such as original observations or summaries such as \nmeans. The position of labels in this case is dependent on the\nscales used to represent data points. Text is usually displaced so that\nit does not occlude the glyph representing the data point and when the\nlink to the data point is unclear, this link is signalled with a line\nsegment or arrow. Data labels are distinct from annotations in that they\ncontribute directly to the representation of data on a plot or map.\n\nAnnotations differ from data labels, in that their position is decoupled\nfrom their meaning. Insets can be thought as larger, but still\nself-contained annotations. In most cases the reading of inset tables\nand plots depends only weakly on the plot or map in which they are\nincluded.\n\nIn the case of annotations and insets the designer of a data\nvisualization has the freedom to locate them anywhere, as long as they\ndo not occlude features used to describe data.\n\nThe letter labels and labelled segments used to highlight pairwise comparisons\nare a special case as they behave as data labels along the axis onto which an\nexplanatory factor has been mapped, usually _x_, but frequently as annotations along the\naxis onto which a continuous numeric variable has been mapped, usually _y_.\n\n# Multiple comparisons in ggplots\n\n::: callout-caution\nIn experimental designs with more than two groups or treatments, we face the\nproblem that testing every possible pair for significant difference, includes\na test of the smallest vs. the largest observed value. This means that the\nprobability of at least one pair being significant is no longer the one\ncomputed in a _t_-test or _LSD_ (least significant difference).\nWe need to distinguish the probability of\nmaking the wrong decision in an individual comparison (comparison-wise) from \nthat for the experiment as a whole (experiment-wise, the number of wrong\ndecisions per experiment).\n\nThere are different approaches, that can be grouped into methods that attempt control the experiment-wise probability of false positive outcomes to a given _P_-level, such as 0.05 (adjusted _P_-values), and those that attempt to control the false discovery rate (FDR), that can be thought of as the proportion of the positive outcomes that are false positives. There are variations in both approaches, varying in power and conservativeness.\n\nA correction needs to be applied to _P_-values or _LSD_. Different methods \nare available for this.\nMethods differ in their assumptions and difficulty of computation. \nTukey's _HSD_ (honestly significant difference) and the Bonferroni correction\nare well known approaches. Bonferroni's method is a \"quick and dirty\" \ncalculation but nowadays not recommended as it applies an unnecessarily strong\ncorrection. Dunnet contrasts test all treatments individually against a control condition. Tukey contrasts targets the case of testing all possible pairs. It\nis also possible to set-up contrasts of interest individually, or testing for\nother differences, such as basing them on the average of related treatments.\n\nIn general, one should test for significant differences only those contrasts\nselected _a priori_ as of interest. The fewer the pairs tested for significance,\nthe smaller a correction needs to be applied, thus increasing the power of\nthe test for the cases of interest. _Of course, for validity, which tests are\nof interest should be decided independently of the data._ **Avoid cherry picking!**\n\nMultiple comparisons are frequently applied as post-hoc tests (after a different\ntest of significance with a broader scope). As post-hoc tests, they are seen as a way of investigating the source of an overall significant difference, and multiple comparisons are applied only if the main effect of the factor is in itself significant and the additional contrasts skipped otherwise. In other cases multiple comparisons can be the primary statistical test addressing the research hypotheses. Both approaches are valid as long as the hypotheses have been set independently of the data being used in the test. I repeat: **what should be avoided is to cherry pick promising pairwise tests based on the data, and then correct the _P_-values taking into account only the cherry-picked pairs.**\n:::\n\nPackage [ggsignif](https://const-ae.github.io/ggsignif/) seems to be the most\npopular (only?) implementation of pairwise comparisons for ggplots. I have used\nthis package and it does a a good job for automating some simple tests, but it\nhas limitations. Recently I wished to have more flexible formatting of labels\nusing _plotmath expressions_ as well as the ability to adjust _P_-values using\nmultiple comparison statistical procedures. Presenting adjusted _P_-values is of\ncrucial importance and in my view should be the default behaviour. There is an\nissue at GitHub and questions in StackOverflow wishing this to be supported.\n\nPackage [ggsignif](https://const-ae.github.io/ggsignif/), although maintained, is no longer under active development.\nThe authors suggest creating pull requests for new features. I studied the code\nand it seems to me that the coupling between the statistic and geometry is\nunnecessarily tight and would make it difficult to create a pull request that\nfulfils the needs stated above. \n\nIn particular, the _manual_ mode of `stat_signif()` seems like an\nafterthought modification to the statistic, and does not follow the expectations\nof the grammar of graphics that statistics do computations and geometries create\na graphical representation. So, I decided to implement from scratch enhanced\nfunctionality in packages [ggpp](https://docs.r4photobiology.info/ggpp/) and [ggpmisc](https://docs.r4photobiology.info/ggpmisc/) to complement that in package\n[ggsignif](https://const-ae.github.io/ggsignif/).\n\nPackage [ggpp](https://docs.r4photobiology.info/ggpp/) mainly defines geometries and scales that can be useful for the\ndevelopment of other packages. Package [ggpmisc](https://docs.r4photobiology.info/ggpmisc/) implements mostly statistics\nand also imports and re-exports package [ggpp](https://docs.r4photobiology.info/ggpp/). \n\nPackage [ggsignif](https://const-ae.github.io/ggsignif/), defines `geom_signif()` and `stat_signif()`, implementing\npairwise _t_-tests and other pairwise tests. In this statistic, tests are done individually, not as\nmultiple comparisons. In some cases this is o.k., but in most cases it is the wrong\napproach to testing contrasts that are not orthogonal. R package 'multcomp' is\nwell established and implements flexibly several different methods,\nincluding modern ones, to adjust _P_-values from multiple comparisons.\n\n# Package 'ggpp' (>= 0.5.4)\n\nI added two new geometries,`geom_text_pairwise()` and `geom_label_pairwise()` to package [ggpp](https://docs.r4photobiology.info/ggpp/). \nWriting the code of `geom_text_pairwise()` and `geom_label_pairwise()` was easy, using the existing code of `geom_text_s()` and\n`geom_label_s()` as a base. The user interface is, thus, consistent with that of\nother related layer functions in package [ggpp](https://docs.r4photobiology.info/ggpp/). These geometries are fully\nfunctional on their own and by default make use of `ggplot2::stat_identity()`.\nExamples of plots with R code making use of them are available in page \n[Pairwise labels with 'ggpp'](https://www.r4photobiology.info/galleries/pairwise-labels.html).\n\nThese geometries are convenience layer functions when used on their own as the same plots can be created by adding separately the segment and text or label layers to a plot. However, they become a necessity, when designing a\nstatistic.\n\n\n::: callout-caution\nFunctions `geom_text_pairwise()` and `geom_label_pairwise()` are still under development and have some limitations. An important one is that the segment of bar labels created with `geom_label_pairwise()` extends under the label box, thus making the use of `alpha` transparency impossible. In addition, the behaviour of the `linewidth` aesthetic with `geom_label_pairwise()` can be surprising.\n\n_Some features of the user interface of `geom_text_pairwise()` and `geom_label_pairwise()` may change in future versions of the package._\n:::\n\n# Package 'ggpmisc' (>= 0.5.4)\n\nI have added to package [ggpmisc](https://docs.r4photobiology.info/ggpmisc/) (>= 0.5.4) a new statistic, `stat_multcomp()`,\nthat makes some of the features from function `glht()` from package [multcomp](http://multcomp.r-forge.r-project.org/)\neasy to use to add a plot layer highlighting the outcome of these tests. In 'ggpmisc' (>= 0.5.6) additional features are supported.\n\nLayer function `stat_multcomp()` first fits a model (a linear model by default) followed by a multiple comparisons test with a user-controlled adjustment to the _P_-values. By default `\"Tukey\"` contrasts are computed but `\"Dunnet\"` contrasts are also supported. The implementation makes use of function `glht()` from package [multcomp](http://multcomp.r-forge.r-project.org/) making available all the methods it supports for the adjustment of _P_-values for multiple comparisons. Currently, `stat_multcomp()` only implements pairwise contrasts, as in this case there are well established approaches to plot annotations. By passing a numeric matrix as argument arbitrary sets of _pairwise_ contrasts can be specified. Contrasts that involve more than two levels of a factor are not yet supported.\n\nThe returned data contains both numeric and ready formatted character strings. The returned value and default geometry depend on the type of label, that can be\neither bars (connecting segments) labelled with _P_-values or other parameters, or letters. With bars, plots get crowded easily, and are supported for factors with two to five levels if using \"Tukey\" contrasts. In contrast, encoding pairwise difference from \"Tukey\" contrasts as letters is possible with factors with two or more levels. _Letter encoding is not implemented for \"Dunnet\" contrasts as such encoding is unsuitable in this case._\n\nAs other layer functions in R package [ggpmisc](https://docs.r4photobiology.info/ggpmisc/) , `stat_multcomp()` attempts to be flexible, both in the statistical methods used to test multiple comparisons and in the way the outcomes can be shown in plots. As this is a safe (= conservative) approach, the adjustment of _P_-values is enabled by default.\n\nEven if flexible, `stat_multcomp()` does not cater for all uses of multiple comparisons, and it is to be expected that in some cases multiple comparison tests will be applied before plotting, and the outcomes shown in plots using geometries rather than statistics. Examples of such use of geometries `geom_text_pairwise()` and `geom_label_pairwise()` are available in the page [Pairwise labels with 'ggpp'](pairwise-labels.qmd).\n\n::: callout-caution\nFunction `stat_multcomp()` is still under development and has some limitations. Currently, only \"Tukey\" and \"Dunnet\" contrasts \nare supported and the order of letters in letter labels is fixed. This statistic has been tested only with `method = \"lm\"`, `method = \"aov\"` and `method = \"rlm\"`although several other model fit functions can be expected also to work.\n\n_Some features of the user interface of `stat_multcomp()` may change in future versions of the package._\n:::\n\n# Alternatives\n\nR package ['ggsignif'](https://const-ae.github.io/ggsignif/index.html) implements a similar graphical approach to annotating pairwise significance tests. However, it uses a different user interface, that deviates from my own expectations based on the Grammar of Graphics. Another difference is that it does not easily support methods specific to multiple comparisons or adjsuted _p_-values. The layer function `geom_signif()` can be made to work with dodged columns and boxplots, while the layer functions from packages 'ggpp' and 'ggpmisc' currently do not support this use case.\n\n# Plot examples with code\n\nPackage [ggpmisc](https://docs.r4photobiology.info/ggpmisc/) imports and \nre-exports all definitions from [ggpp](https://docs.r4photobiology.info/ggpp/)\nas well as from [ggplot2](https://ggplot2.tidyverse.org/), so it is enough to attach explicitly package [ggpmisc](https://docs.r4photobiology.info/ggpmisc/) . All three packages are available through CRAN.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(ggpmisc)\ntheme_set(theme_bw())\n```\n:::\n\n\n## Using default labels\n\nTukey's method for all pairwise contrasts using _honestly significant differences_.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(factor(cyl), cty)) +\n  stat_summary(fun.data = mean_cl_normal, colour = \"red\") +\n  stat_multcomp(label.y = 12, \n                size = 2.75, \n                vstep = 0.05) +\n  expand_limits(y = 0)\n```\n\n::: {.cell-output-display}\n![](multcomp_files/figure-html/unnamed-chunk-2-1.svg)\n:::\n:::\n\n\nUsing Holm's method to adjust _P_-values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(factor(cyl), cty)) +\n  stat_summary(fun.data = mean_cl_normal, colour = \"red\") +\n  stat_multcomp(p.adjust.method = \"holm\",\n                label.y = 12, \n                size = 2.75, \n                vstep = 0.05) +\n  expand_limits(y = 0)\n```\n\n::: {.cell-output-display}\n![](multcomp_files/figure-html/unnamed-chunk-3-1.svg)\n:::\n:::\n\nDunnet's method for comparison of each treatment against a control, assumed to be the first level of the factor.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(factor(cyl), cty)) +\n  stat_summary(fun = mean, geom = \"col\", width = 0.5) +\n  stat_summary(fun.data = mean_cl_normal, colour = \"red\") +\n  stat_multcomp(label.y = 25, \n                size = 2.75,\n                contrasts = \"Dunnet\")\n```\n\n::: {.cell-output-display}\n![](multcomp_files/figure-html/unnamed-chunk-4-1.svg)\n:::\n:::\n\n\nA staircase of pairwise contrasts with _P_-values adjusted using Holm's method.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(factor(cyl), cty)) +\n  stat_summary(fun = mean, geom = \"col\", width = 0.5) +\n  stat_summary(fun.data = mean_cl_normal, colour = \"red\") +\n  stat_multcomp(label.y = c(18, 23, 24),\n                size = 2.75,\n                contrasts = rbind(c(0, 0, -1, 1),\n                                  c(0, -1, 1, 0),\n                                  c(-1, 1, 0, 0)))\n```\n\n::: {.cell-output-display}\n![](multcomp_files/figure-html/unnamed-chunk-5-1.svg)\n:::\n:::\n\nTukey's pairwise contrasts using defaults except for the position of the lowermost bar.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(factor(cyl), cty)) +\n  stat_summary(fun = mean, geom = \"col\", width = 0.5) +\n  stat_summary(fun.data = mean_cl_normal, colour = \"red\") +\n  stat_multcomp(size = 2.5, label.y = 25)\n```\n\n::: {.cell-output-display}\n![](multcomp_files/figure-html/unnamed-chunk-6-1.svg)\n:::\n:::\n\n\nTukey's pairwise contrasts using defaults and shown with letters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(factor(cyl), cty)) +\n  stat_summary(fun = mean, geom = \"col\", width = 0.5) +\n  stat_summary(fun.data = mean_cl_normal, colour = \"red\") +\n  stat_multcomp(label.y = -1, \n                label.type = \"letters\")\n```\n\n::: {.cell-output-display}\n![](multcomp_files/figure-html/unnamed-chunk-7-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(factor(cyl), cty)) +\n  stat_summary(fun = mean, geom = \"col\", width = 0.5) +\n  stat_summary(fun.data = mean_cl_normal, colour = \"red\") +\n  stat_multcomp(colour = \"white\", \n                label.type = \"letters\",\n                adj.method.tag = 0)\n```\n\n::: {.cell-output-display}\n![](multcomp_files/figure-html/unnamed-chunk-8-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(factor(cyl), cty)) +\n  stat_multcomp(size = 2.75) +\n  stat_boxplot(width = 1/3)\n```\n\n::: {.cell-output-display}\n![](multcomp_files/figure-html/unnamed-chunk-9-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(factor(cyl), cty)) +\n  stat_multcomp(size = 2.85,\n                label.y = 11,\n                geom = \"text_pairwise\",\n                vstep = 0.07,\n                p.digits = 2,\n                contrasts = \"Dunnet\") +\n  stat_boxplot(width = 1/3) +\n  expand_limits(y = 0)\n```\n\n::: {.cell-output-display}\n![](multcomp_files/figure-html/unnamed-chunk-10-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(factor(cyl), cty)) +\n  stat_multcomp(label.type = \"letters\",\n                geom = \"label\",\n                size = 2.75) +\n  stat_boxplot(width = 1/3)\n```\n\n::: {.cell-output-display}\n![](multcomp_files/figure-html/unnamed-chunk-11-1.svg)\n:::\n:::\n\n\nNumeric _P_-values shown for Dunnet contrasts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(factor(cyl), cty)) +\n  stat_summary(fun = mean, geom = \"col\", width = 0.5) +\n  stat_summary(fun.data = mean_cl_normal, colour = \"red\") +\n  stat_multcomp(aes(x = stage(start = factor(cyl), \n                              after_stat = x.right.tip)),\n                geom = \"text\",\n                label.y = -1, \n                vstep = 0,\n                size = 3,\n                contrasts = \"Dunnet\")\n```\n\n::: {.cell-output-display}\n![](multcomp_files/figure-html/unnamed-chunk-12-1.svg)\n:::\n:::\n\n\n## Using pre-built labels other than default\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(factor(cyl), cty)) +\n  stat_multcomp(use_label(c(\"delta\", \"P\")),\n                size = 2.75,\n                label.y = 11,\n                vstep = 0.08,\n                p.digits = 2,\n                contrasts = \"Dunnet\") +\n  stat_boxplot(width = 1/3) +\n  expand_limits(y = 0)\n```\n\n::: {.cell-output-display}\n![](multcomp_files/figure-html/unnamed-chunk-13-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(factor(cyl), cty)) +\n  stat_multcomp(use_label(c(\"t\", \"P\")),\n                          size = 2.75,\n                label.y = 11,\n                vstep = 0.08,\n                contrasts = \"Dunnet\") +\n  stat_boxplot(width = 1/3) +\n  expand_limits(y = 0)\n```\n\n::: {.cell-output-display}\n![](multcomp_files/figure-html/unnamed-chunk-14-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(factor(cyl), cty)) +\n  stat_summary(fun = mean, geom = \"col\", width = 0.5) +\n  stat_summary(fun.data = mean_cl_normal, colour = \"red\") +\n  stat_multcomp(aes(x = stage(start = factor(cyl), after_stat = x.right.tip),\n                    label = after_stat(stars.label)),\n                geom = \"text\",\n                label.y = -1, \n                vstep = 0,\n                contrasts = \"Dunnet\")\n```\n\n::: {.cell-output-display}\n![](multcomp_files/figure-html/unnamed-chunk-15-1.svg)\n:::\n:::\n\n\n## Using other aesthetics than the default\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(factor(cyl), cty)) +\n  stat_multcomp(aes(colour = after_stat(p.value) < 0.05),\n                size = 2.75,\n                label.y = 11,\n                vstep = 0.08,\n                p.digits = 2,\n                contrasts = \"Dunnet\") +\n  stat_boxplot(width = 1/3) +\n  scale_colour_manual(values = c(\"grey50\", \"blue\")) +\n  expand_limits(y = 0)\n```\n\n::: {.cell-output-display}\n![](multcomp_files/figure-html/unnamed-chunk-16-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(factor(cyl), cty)) +\n  stat_multcomp(aes(fill = after_stat(p.value) < 0.05),\n                size = 2.75,\n                label.y = 11,\n                vstep = 0.08,\n                p.digits = 2,\n                contrasts = \"Dunnet\") +\n  stat_boxplot(width = 1/3) +\n  scale_fill_manual(values = c(\"grey90\", \"lightblue\")) +\n  expand_limits(y = 0)\n```\n\n::: {.cell-output-display}\n![](multcomp_files/figure-html/unnamed-chunk-17-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(factor(cyl), cty)) +\n  stat_multcomp(aes(colour = factor(after_stat(letters.label))),\n                label.type = \"letters\",\n                size = 4) +\n  stat_boxplot(width = 1/3) +\n  expand_limits(y = 0)\n```\n\n::: {.cell-output-display}\n![](multcomp_files/figure-html/unnamed-chunk-18-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(factor(cyl), cty)) +\n  stat_multcomp(aes(colour = factor(after_stat(letters.label))),\n                label.type = \"letters\",\n                geom = \"point\",\n                size = 3,\n                adj.method.tag = 0) +\n  stat_boxplot(width = 1/3) +\n  expand_limits(y = 0)\n```\n\n::: {.cell-output-display}\n![](multcomp_files/figure-html/unnamed-chunk-19-1.svg)\n:::\n:::\n\n\n::: callout-tip\nAdditional examples are available in the documentation of function `stat_multcomp()` and in the [vignette of package 'ggpmisc'](https://docs.r4photobiology.info/ggpmisc/articles/model-based-annotations.html#stat_multcomp).\n:::\n",
    "supporting": [
      "multcomp_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}