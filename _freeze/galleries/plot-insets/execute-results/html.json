{
  "hash": "3cc26d1cb031b7728b7f073a607a9111",
  "result": {
    "markdown": "---\ntitle: \"ggplot insets with package 'ggpp'\"\nsubtitle: \"Plots, tables and graphical objects as ggplot insets\"\nauthor: \"Pedro J. Aphalo\"\ndate: today\nkeywords: [ggplot2, ggpp, R, plot insets, dataviz, data visualization]\ncategories: [ggpp pkg, data labels, plot annotations]\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n::: callout-tip\nIn this page code chunks are \"folded\" so as to decrease the clutter when \nsearching for examples. Above each plot you will find a small triangle followed\nby \"Code\". Clicking on the triangle \"unfolds\" the code chunk making visible\nthe R code used to produce the plot. Except for the loading of packages shown\nin section **Preliminaries** code examples are in most cases self contained.\nWhen they are not, this is indicated by a comment.\n\nThe code in the chunks can be copied by clicking on the top right corner, where\nan icon appears when the mouse cursor hovers over it.\n:::\n\n## Data labels and plot annotations\n\nData labels and plot annotations differ in that data labels refer directly to\ndata described by individual graphical features, like points or curves, in a\nplot. In contrast, annotations provide context to the plotted data but are\nindependent of any individual graphical features in a plot. An example of\ndata labels are text or icons used to identify or highlight individual\nobservations. An annotation can be as simple as text giving the count of the\nnumber of observations depicted in a plot, a table with results from an \nstatistical analysis of the data in a plot or even another plot showing data\nthat provide the context for reading the main or base figure.\n\n## What are plot insets\n\nThe use of insets in plots was rather frequent when plots where drawn\nusing ink and pen by draughtsmen. With the advent of computer-drawn\nplots they became less common. In many situations they are very useful.\nIn this gallery I give examples of plots with insets created using\npackages 'ggplot2' and 'ggpp'. For simplicity, whenever possible I use\nbase R functions instead of contributed R packages, including those from\nthe 'tidyverse'.\n\nInsets are not normally used for data exploration, they are in most\ncases used in publications and reports, either to provide context or\nsave space.\n\n::: callout-important\nOne needs to always check that insets do not occlude anything\nsignificant, such as observations in the base plot. This makes insets\nunsuitable for automation, unless the scale limits of the base plot are\nexpanded to ensure that no overlap is possible.\n:::\n\n## Preliminaries\n\nThe code used is shown above each plot and can be copied. We first load\nthe packages we will use.\n\nWhen package 'ggpp' is loaded and attached, package 'ggplot2' is also\nattached. The only function from 'ggplot2' that is redefined by 'ggpp'\nis `annotate()`, which remains backwards compatible with 'ggplot2'.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(ggpp)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: ggplot2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'ggpp'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:ggplot2':\n\n    annotate\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n:::\n\n\n## Inset plots within plots\n\nInset plots are most frequently annotations. They can be used to zoom in\nto a portion of the data, to show a less important property of\nobservations, or more commonly for maps, to show a broader region to\nprovide recognizable context.\n\n::: callout-note\nA future separate gallery is planned for map insets. They can be added\nsimilarly as those shown here, but projections and coordinate systems\nadd complexity.\n:::\n\n### Using `annotate()`\n\nThe first set of examples show how to use `annotate()` together with the\ngeoms from package 'ggpp' to add inset plots to single-panel ggplots.\nThe examples show different uses of insets. All examples use data sets\navailable in R or the packages loaded. In this examples we use\n`annotate()` together with `geom_plot_npc()` or `geom_plot()`.\n\n#### Zoom in\n\n`geom_plot_npc()` obeys native plot coordinates instead of data\ncoordinates. NPC coordinates are relative to the plotting area and take\nvalues in \\[0..1\\]. They make consistent positioning of annotations\neasy. Only for this first example we show the use of both\n`geom_plot_npc()` and `geom_plot()`. In both geoms the default for\n`hjust` and `vjust` is `\"inward\"`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# zoom in region\nzoom.region <- list(x = c(4.9, 6.2), y = c(13, 21))\n\n# main plot\np.base <- ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +\n  geom_point()\n\n# inset zoomed-in plot\np.inset <- p.base + \n  coord_cartesian(xlim = zoom.region$x, ylim = zoom.region$y) +\n  labs(x = NULL, y = NULL) +\n  theme_bw(8) +\n  scale_colour_discrete(guide = \"none\")\n\n# whole plot using annotate() and NPC coordinates\np.combined <- p.base + \n  annotate(geom = \"plot_npc\", npcx = 0.95, npcy = 0.95, label = p.inset)\n\n# highlight zoomed-in region\np.combined + \n  annotate(geom = \"rect\", \n           xmin = zoom.region$x[1], xmax = zoom.region$x[2], \n           ymin = zoom.region$y[1], ymax = zoom.region$y[2],\n           linetype = \"dotted\", fill = NA, colour = \"black\")\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n`geom_plot()` obeys the usual `x` and `y` aesthetics expressed in data\ncoordinates. As shown here, while NPC coordinates are refered to the\nplotting area set by other plot layers, using data cordinates, just as\nfor text labels, results in its expansion as needed to include the\ninset's *x* and *x* coordinates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# CONTINUED FROM CODE CHUNK IMMEDIATELY ABOVE\n\n# whole plot using annotate() and data coordinates\np.d.combined <- p.base + \n  annotate(geom = \"plot\", x = 7, y = 50, label = p.inset)\n\n# highlight zoomed-in region\np.d.combined + \n  annotate(geom = \"rect\", \n           xmin = zoom.region$x[1], xmax = zoom.region$x[2], \n           ymin = zoom.region$y[1], ymax = zoom.region$y[2],\n           linetype = \"dotted\", fill = NA, colour = \"black\")\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n#### Zoom out\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# zoom in region\nzoom.region <- list(x = c(4.9, 6.2), y = c(13, 21))\n\n# a plot with zoom area highlighted\np <- ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +\n  geom_point() + \n  annotate(geom = \"rect\", \n           xmin = zoom.region$x[1], xmax = zoom.region$x[2], \n           ymin = zoom.region$y[1], ymax = zoom.region$y[2],\n           linetype = \"dotted\", fill = NA, colour = \"black\")\n\n# inset whole-plot \np.inset <- p  +\n  labs(x = NULL, y = NULL) +\n  theme_bw(8) +\n  scale_colour_discrete(guide = \"none\")\n\n# main zoomed-in plot\np.base <- p + \n  coord_cartesian(xlim = zoom.region$x, ylim = zoom.region$y) +\n  expand_limits(y = 24) \n\n# whole plot using annotate()\np.base + \n  annotate(geom = \"plot_npc\", npcx = 0.98, npcy = 0.98, label = p.inset) +\n  scale_y_continuous(expand = expansion(mult = c(0.05, 0.20)))\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n#### Summary plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# column plot of summaries as inset\np.inset <- \n  ggplot(mpg, aes(factor(cyl), hwy, fill = factor(cyl))) +\n  stat_summary(geom = \"col\", fun = mean, width = 2/3) +\n  labs(x = \"Number of cylinders\", y = NULL, title = \"Means\") +\n  scale_fill_discrete(guide = \"none\")\n\n# scatter plot as main plot\np.base <- \n  ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +\n  geom_point() +\n  labs(x = \"Engine displacement (l)\", y = \"Fuel use efficiency (MPG)\",\n       colour = \"Engine cylinders\\n(number)\") +\n  theme_bw()\n\n# plot with inset plot using annotate()\np.base +\n  annotate(\"plot_npc\", npcx = 0.97, npcy = 0.98, label = p.inset + theme_bw(8))\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n#### Other data or variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# box plot as inset\np.inset <- \n  ggplot(mpg, aes(factor(cyl), hwy, fill = factor(cyl))) +\n  stat_boxplot() +\n  labs(x = \"Engine cylinders (number)\", y = \"\") +\n  scale_fill_discrete(guide = \"none\")\n\n# scatter plot as main plot\np.base <- \n  ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +\n  geom_point() +\n  labs(x = \"Engine displacement (l)\", y = \"Fuel use efficiency (MPG)\",\n       colour = \"Engine\\ncylinders\\n(number)\") +\n  theme_bw()\n\n# plot with inset plot using annotate()\np.base +\n  annotate(\"plot_npc\", \n           npcx = 0.97, npcy = 0.98, \n           label = p.inset + theme_bw(9), \n           vp.width = 0.6, vp.height = 0.4) # relative size of inset\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n### Using `geom_plot()` and `geom_plot_npc()`\n\nIn the examples above we used `annotate()` as it is the easiest\napproach. However, `annotate()` does not support adding different\nannotations to different panels in a faceted plot. Very small plots can\nsometimes function as data labels, specially in maps. In both cases we\nneed to use the geometries directly and pass a data frame as argument to\ntheir `data` formal parameter.\n\nWhen building `data` object containing the inset plots we need to add a\nlist as a column in a `data.frame`. This is possible as long as the\nlengths match, but the `list` object needs to be protected with `I()`,\nR's identity function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# faceted scatter plot as base plot\np.base <- \n  ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +\n  geom_point() +\n  labs(x = \"Engine displacement (l)\", y = \"Fuel use efficiency (MPG)\",\n       colour = \"Engine\\ncylinders\\n(number)\") +\n  facet_wrap(facets = vars(cyl), labeller = label_both) +\n  theme_bw()\n\n# ad hoc function for constructing box plots\nmake_inset <- \n  function(target.cyl) {\n    ggplot(subset(mpg, cyl == target.cyl),\n           aes(factor(cyl), hwy)) +\n      stat_boxplot() +\n      labs(x = \"Engine cylinders\\n(number)\", y = \"\") +\n      scale_fill_discrete(guide = \"none\") + \n      theme_bw(7)\n  }\n\n# list of box plots as insets\np.inset.list <- lapply(unique(mpg$cyl), make_inset)\n\n# data frame to be used as data for plotting insets\ninset.df <- data.frame(cyl = unique(mpg$cyl),\n                       plots =  I(p.inset.list),\n                       npcx = c(0.97, 0.97, 0.0, 0.97),\n                       npcy = 0.5)\n\n# plot with inset plots using geom_plot_npc()\np.base +\n  geom_plot_npc(data = inset.df, \n                vp.height = 0.8,\n                mapping = aes(npcx = npcx, npcy = npcy, label = plots))\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nWhen using tibbles instead of data frames, the call to `I()` can be\nomitted.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# CONTINUED FROM CODE CHUNK IMMEDIATELY ABOVE\n\n# tibble to be used as data for plotting insets\ninset.tb <- \n  tibble::tibble(cyl = unique(mpg$cyl),\n                 plots =  p.inset.list,\n                 npcx = c(0.97, 0.97, 0.0, 0.97),\n                 npcy = 0.5)\n\n# plot with inset plots using geom_plot_npc()\np.base +\n  geom_plot_npc(data = inset.tb, \n                vp.height = 0.8,\n                mapping = aes(npcx = npcx, npcy = npcy, label = plots))\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n### Alternatives\n\n::: callout-tip\nInset plots used as annotations, but not as data labels, can be added to base\nplots using the plot composition operators and function `inset_element()` from\npackage 'patchwork'.\n\nIf the desired composed plot format is a 'grid' `grob` then the individual plots\ncan be converted first into grobs with function `ggplotGrob()` and these grobs \nsubsequently combined using functions from package 'grid'.\n:::\n\n## Inset tables within plots\n\nTables are less frequently used as insets than plots. As annotations,\nthey can be useful in two situations: 1) reporting results for the\nstatistical analysis of the plotted data, and 2) adding numerical\nsummaries about the data. Very small tables can be also useful as data\nlabels to highlight specific observations in a plot or data for\nlocations in a map.\n\n### Using `annotate()`\n\nThe first set of examples show how to use `annotate()` together with the\ngeoms from package 'ggpp' to add inset tables to single-panel ggplots.\nThe examples show different uses of insets. All examples use data sets\navailable in R or package 'ggplot2'. In this examples we use\n`annotate()` together with `geom_table_npc()` or `geom_table()`.\n\n#### Summaries\n\nA simple table of medians computed using base R's `aggregate()` added\nusing `annotate()` and `geom = \"table_npc\"`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# compute medians grouped by number of cylinders\ndf <- aggregate(cbind(hwy, cty) ~ cyl, data = mpg, FUN = median)\n\n# create a plot with an inset table with medians\nggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +\n  annotate(geom = \"table_npc\", npcx = 0.95, npcy = 0.95, label = df) +\n  geom_point() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nHere we use package 'dplyr' to compute the summaries, and we name the\nvariables directly with the desired column titles as strings to be\nparsed into R expressions. We add the table as above but pass\n`parse = TRUE` so that the column titles display as math expressions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# compute medians grouped by number of cylinders\nmpg |> \n  group_by(cyl) |>\n  summarize(\"bar(italic(x))\" = round(mean(hwy), 1),\n            \"italic(s)^{2}\" = round(var(hwy), 1),\n            \"italic(n)\" = n()) -> tb\n\n# create a plot with an inset table with medians\nggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +\n  annotate(\"table_npc\", npcx = 0.95, npcy = 0.95, label = tb, \n           parse = TRUE) +\n  geom_point() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nIn this third example we use `stat_fmt_tb()` together with\n`geom_table()` to substitute some of the column headers, select columns,\nsize or text and colours, and change the order of rows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntb <- mpg |>\n  group_by(cyl) |>\n  summarise(hwy = median(hwy), cty = median(cty))\n\ndata.tb <- data.frame(x = 7, y = 44, tb = I(list(tb)))\n\nggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +\n  stat_fmt_tb(data = data.tb, \n             aes(x, y, label = tb),\n             table.theme = ttheme_gtlight,\n             size = 4.5, colour = \"darkblue\",\n             tb.vars = c(Cylinders = \"cyl\", MPG = \"hwy\"), # rename\n             tb.rows = 4:1) + # change order\n  labs(x = \"Engine displacement (l)\", y = \"Fuel use efficiency (MPG)\",\n       colour = \"Engine\\ncylinders\\n(number)\") +\n  geom_point() +\n  theme_bw(15)\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n### Alternatives\n\n::: callout-tip\nInset tables used as annotations, but not as data labels, can be added to base\nplots using the plot composition operators and function `inset_element()` from\npackage 'patchwork' if the table available as a 'grid' `grob`.\n\nIf the desired composed plot format is a 'grid' `grob` then the plot can be\nconverted first into a grob with function `ggplotGrob()` and this grob\nsubsequently combined with a table grob defining a table using functions from\npackage 'grid'.\n:::\n\n## Inset 'grid' graphical objects within plots\n\nFunctions `geom_grob()` and `geom_grob_npc()` mimic the user interface of\n`geom_text_s()` which is a superset of that of `geom_text()` from package\n'ggplot2'. This makes them best suited for adding graphical data labels and \nannotations. As they accept 'grid' grobs, they can add both bit maps and\nvector graphics within the same plot layer in a single call.\n\n### Using `annotate()`\n\nUsing `annotate()` together with `geom_grob_npc()` we can easily add for example\na logo available as a bitmap file to a plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogo.file.name <- \n  system.file(\"extdata\", \"logo-ggpp.png\", \n              package = \"ggpp\", mustWork = TRUE)\n\nggpp.logo <- magick::image_read(logo.file.name)\n\nggplot(mpg, aes(displ, hwy, colour = cyl)) +\n  geom_point() +\n  annotate(geom = \"grob_npc\", npcx = 0.95, npcy = 0.9,\n           label = grid::rasterGrob(ggpp.logo))\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n### Using `geom_table()` and `geom_table_npc()`\n\n#### Bitmaps\n\nWe can use bitmaps or rasters as annotations and data labels. We need to\nfirst convert them into graphical objects (`grob`) compatible with\npackage 'grid'. Package 'grid' is included in the R distribution and the\nunderlying plotting engine used by 'ggplot2'. In this example we read a\nbitmap from a PNG file using package 'magick'. This is one out several\nways available in R to import raster data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read a bitmap file, in this case included in 'ggpp'\nIsoquercitin.file.name <- \n  system.file(\"extdata\", \"Isoquercitin.png\", \n              package = \"ggpp\", mustWork = TRUE)\n\nIsoquercitin <- magick::image_read(Isoquercitin.file.name)\n\nRobinin.file.name <- \n  system.file(\"extdata\", \"Robinin.png\", \n              package = \"ggpp\", mustWork = TRUE)\n\nRobinin <- magick::image_read(Robinin.file.name)\n\n# some fake concentration data together with grobs\nflavonoids.df <- \n  data.frame(metabolite = c(\"Isoquercitin\", \"Robinin\"),\n             structure = I(list(grid::rasterGrob(image = Isoquercitin),\n                                grid::rasterGrob(image = Robinin))),\n             concentration = c(10, 8))\n\n# make plot with data label\nggplot(flavonoids.df, \n       aes(metabolite, concentration, label = structure)) +\n  geom_col(width = 0.2, fill = \"grey95\", colour = \"black\") +\n  geom_grob(inherit.aes = TRUE,\n            nudge_y = 2,\n            segment.linewidth = 0,\n            vp.height = 0.2, vp.width = 1) +\n  expand_limits(y = 13.5) +\n  labs(x = \"Flavonoid\", y = expression(\"Concentration \"*(mg~g^{-1}))) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n::: callout-tip\nFunction `image_read()` supports several other bitmap formats in addition to\nPNG. Version 6.9.12.3 of 'magick', used to render\nthis page supports the following formats and devices.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(magick::magick_config()[-(1:2)])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"cairo\"              \"fontconfig\"         \"freetype\"          \n [4] \"fftw\"               \"ghostscript\"        \"heic\"              \n [7] \"jpeg\"               \"lcms\"               \"libopenjp2\"        \n[10] \"lzma\"               \"pangocairo\"         \"pango\"             \n[13] \"png\"                \"raw\"                \"rsvg\"              \n[16] \"tiff\"               \"webp\"               \"wmf\"               \n[19] \"x11\"                \"xml\"                \"zero-configuration\"\n[22] \"threads\"           \n```\n:::\n:::\n\n\nAlthough 'magick' is convenient to use, it is not the only way of importing or\ncreating `raster` objects in R. Ploting itself, however, remains unchanged.\n:::\n\n#### Vector graphics\n\nVector graphics can be defined directly using functions from package\n'grid' or converted into grobs from SVG or PDF code.\n\n::: callout-warning\nBe aware that the PDF format supports both vector graphics and bitmaps. \nConversion from vector graphics into bitmaps is usually relatively easy, while\nthe reverse is much more difficult.\n:::\n\nFor the next example we follow the technical report [*SVG In, SVG Out*\nby Paul\nMurrell](https://www.stat.auckland.ac.nz/~paul/Reports/grImport/grimport-gridsvg-export/grimport-gridsvg-export.html)\nto create a `grob` by reading an SVG file.\n\n### Alternatives\n\n::: callout-tip\nPackage 'ggplot2' defines `geom_raster()` which makes it possible to directly\nadd a `raster` as a plot layer.\n\nPackage 'ggimg' defines `geom_rect_img()` and `geom_point_img()`.\n\nInset grid grobs used as annotations, but not as data labels, can be added to\nbase plots using the plot composition operators and function `inset_element()`\nfrom package 'patchwork'.\n\nIf the desired composed plot format is a 'grid' `grob` then the plot can be\nconverted first into a grob with function `ggplotGrob()` and this grob\nsubsequently combined with a separately created 'grid' grob using functions from\npackage 'grid'.\n:::\n\n",
    "supporting": [
      "plot-insets_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}