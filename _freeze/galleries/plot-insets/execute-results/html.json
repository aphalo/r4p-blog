{
  "hash": "bdff974dde1a26e648114fe9cc026551",
  "result": {
    "markdown": "---\ntitle: \"ggplot insets with package 'ggpp'\"\nsubtitle: \"Plots, tables and graphical objects as ggplot insets\"\nauthor: \"Pedro J. Aphalo\"\ndate: \"2023-02-23\"\ndate-modified: \"2023-02-23\"\nkeywords: [ggplot2 pkg, ggpp pkg, data labels, plot annotations, plot insets]\ncategories: [Plotting examples]\nabstract: |\n  Example R code for plots based on package [ggplot2](https://ggplot2.tidyverse.org/) using geometries defined in package [ggpp](https://docs.r4photobiology.info/ggpp) to add insets. These geometries from package [ggpp](https://docs.r4photobiology.info/ggpp) implement addition of plot layers with plots, tables or other graphical objects as insets to a base plot, through extension of the Grammar of Graphics. \neditor: \n  markdown: \n    wrap: 72\nformat:\n  html: \n    code-link: true\n    code-tools: true\n---\n\n\n::: callout-tip\nIn this page code chunks are \"folded\" so as to decrease the clutter when\nsearching for examples. Above each plot you will find a small triangle\nfollowed by \"Code\". Clicking on the triangle \"unfolds\" the code chunk\nmaking visible the R code used to produce the plot. Except for the\nloading of packages shown in section **Preliminaries** code examples are\nin most cases self contained. When they are not, this is indicated by a\ncomment.\n\nFor simplicity, when possible I use base R functions instead of\ncontributed R packages. For those packages used only in specific\nexamples I use colon notation to indicate the 'package'.\n\nAll \"words\" defined in base R or in extension packages are linked to the\ncorresponding HTML-rendered help pages.\n\nThe code in the chunks can be copied by clicking on the top right\ncorner, where an icon appears when the mouse cursor hovers over the code\nlisting.\n:::\n\n::: callout-important\nOne needs to always check that insets do not occlude anything\nsignificant, such as observations in the base plot. This makes insets\nunsuitable for automation, unless the scale limits of the base plot are\nexpanded to ensure that no overlap is possible. Alternatively if the\ndata layers are plotted on top the inset layer any overlap can be easily\ndetected.\n:::\n\n## Data labels, plot annotations and insets\n\nData labels add textual information directly related to individual data\npoints (shown as glyphs). Text position in this case is dependent on the\nscales used to represent data points. Text is usually displaced so that\nit does not occlude the glyph representing the data point and when the\nlink to the data point is unclear, this link is signaled with a line\nsegment or arrow. Data labels are distinct from annotations in that they\ncontribute directly to the representation of data on a plot or map.\n\nAnnotations differ from data labels, in that their position is decoupled\nfrom their meaning. Insets can be thought as larger, but still\nself-contained annotations. In most cases the reading of inset tables\nand plots depends only weakly on the plot or map in which they are\nincluded.\n\nIn the case of annotations and insets the designer of a data\nvisualization has the freedom to locate them anywhere, as long as they\ndo not occlude features used to describe data. I will use the term\nannotation irrespective if the \"labels\" are textual or graphical. Insets\nare similar to annotations, but the term inset is used when an\nannotation's graphical or textual element is complex and occupies more\nspace within the plotting area. Insets can be moved from within the main\nplotting area to being adjacent to it, e.g., as a smaller panel, without\nany loss of meaning.\n\n## Uses of insets\n\nThe use of insets in plots was more frequent when plots where drawn\nusing ink and pen by draftsmen. With the advent of computer-drawn plots\nthey became less common. In many situations they are very useful but not\nwell supported by plotting software.\n\n::: callout-note\nInsets are very frequently used in detailed maps. A future separate\ngallery is planned for map insets. They can be added similarly as those\nshown here, but projections and coordinate systems add complexity.\n:::\n\nInsets are not normally used for data exploration, they are in most\ncases used in publications and reports, either to provide context or\nsave space. If well designed they can enhance communication of\ninformation.\n\n## Preliminaries\n\nThe code used is shown on-demand above each plot and can be copied. We\nfirst load the packages we will use.\n\nWhen package 'ggpp' is loaded and attached, package 'ggplot2' is also\nattached. The only function from 'ggplot2' that is redefined by 'ggpp'\nis `annotate()`, which remains backwards compatible with 'ggplot2'.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(ggpp)\nlibrary(dplyr)\n```\n:::\n\n\n## Inset plots within plots\n\nInset plots are most frequently annotations. They can be used to zoom in\nto a portion of the data, to show a less important property of\nobservations, or more commonly for maps, to show a broader region to\nprovide recognizable context.\n\n### Using `annotate()`\n\nThe first set of examples show how to use `annotate()` together with the\ngeoms from package 'ggpp' to add inset plots to single-panel ggplots.\nThe examples show different uses of insets. All examples use data sets\navailable in R or the packages loaded. In this examples we use\n`annotate()` together with `geom_plot_npc()` or `geom_plot()`.\n\n#### Zoom in\n\n`geom_plot_npc()` obeys normalized plot coordinates (NPC) instead of\ndata coordinates. NPC coordinates are relative to the plotting area and\ntake values in \\[0..1\\]. They make consistent positioning of annotations\neasy. Only for this first example we show the use of both\n`geom_plot_npc()` and `geom_plot()`. In both geoms the default for\n`hjust` and `vjust` is `\"inward\"`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# zoom in region\nzoom.region <- list(x = c(4.9, 6.2), y = c(13, 21))\n\n# main plot\np.base <- ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +\n  geom_point(alpha = 0.3, size = 3) # transparency to make overlaps visible\n\n# inset zoomed-in plot\np.inset <- p.base + \n  coord_cartesian(xlim = zoom.region$x, ylim = zoom.region$y) +\n  labs(x = NULL, y = NULL) +\n  theme_bw(8) +\n  scale_colour_discrete(guide = \"none\")\n\n# whole plot using annotate() and NPC coordinates\np.combined <- p.base + \n  annotate(geom = \"plot_npc\", npcx = 0.95, npcy = 0.95, label = p.inset)\n\n# highlight zoomed-in region\np.combined + \n  annotate(geom = \"rect\", \n           xmin = zoom.region$x[1], xmax = zoom.region$x[2], \n           ymin = zoom.region$y[1], ymax = zoom.region$y[2],\n           linetype = \"dotted\", fill = NA, colour = \"black\")\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-3-1.svg){fig-align='center'}\n:::\n:::\n\n\n`geom_plot()` obeys the usual `x` and `y` aesthetics expressed in data\ncoordinates. As shown here, while NPC coordinates are refered to the\nplotting area set by other plot layers, using data cordinates, just as\nfor text labels, results in its expansion (scale limits are modified) as\nneeded to include the inset's *x* and *x* coordinates.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# CONTINUED FROM CODE CHUNK IMMEDIATELY ABOVE\n\n# whole plot using annotate() and data coordinates\np.d.combined <- p.base + \n  annotate(geom = \"plot\", x = 7, y = 50, label = p.inset)\n\n# highlight zoomed-in region\np.d.combined + \n  annotate(geom = \"rect\", \n           xmin = zoom.region$x[1], xmax = zoom.region$x[2], \n           ymin = zoom.region$y[1], ymax = zoom.region$y[2],\n           linetype = \"dotted\", fill = NA, colour = \"black\")\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-4-1.svg){fig-align='center'}\n:::\n:::\n\n\n#### Zoom out\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# zoom in region\nzoom.region <- list(x = c(4.9, 6.2), y = c(13, 21))\n\n# a plot with zoom area highlighted\np <- ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +\n  annotate(geom = \"rect\", \n           xmin = zoom.region$x[1], xmax = zoom.region$x[2], \n           ymin = zoom.region$y[1], ymax = zoom.region$y[2],\n           linetype = \"dotted\", fill = NA, colour = \"black\")\n\n# inset whole-plot \np.inset <- p  +\n  geom_point(alpha = 0.3) + \n  labs(x = NULL, y = NULL) +\n  theme_bw(8) +\n  scale_colour_discrete(guide = \"none\")\n\n# main zoomed-in plot\np.base <- p + \n  coord_cartesian(xlim = zoom.region$x, ylim = zoom.region$y) +\n  expand_limits(y = 24) \n\n# whole plot using annotate()\np.base +\n  geom_point(alpha = 0.5, size = 3) +\n  annotate(geom = \"plot_npc\", npcx = 0.98, npcy = 0.98, label = p.inset) +\n  scale_y_continuous(expand = expansion(mult = c(0.05, 0.20)))\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-5-1.svg){fig-align='center'}\n:::\n:::\n\n\n#### Summary plot\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# column plot of summaries as inset\np.inset <- \n  ggplot(mpg, aes(factor(cyl), hwy, fill = factor(cyl))) +\n  stat_summary(geom = \"col\", fun = mean, width = 2/3) +\n  labs(x = \"Number of cylinders\", y = NULL, title = \"Means\") +\n  scale_fill_discrete(guide = \"none\")\n\n# scatter plot as main plot\np.base <- \n  ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +\n  geom_point(alpha = 0.3, size = 3) +\n  labs(x = \"Engine displacement (l)\", y = \"Fuel use efficiency (MPG)\",\n       colour = \"Engine cylinders\\n(number)\") +\n  theme_bw()\n\n# plot with inset plot using annotate()\np.base +\n  annotate(\"plot_npc\", npcx = 0.97, npcy = 0.98, label = p.inset + theme_bw(8))\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-6-1.svg){fig-align='center'}\n:::\n:::\n\n\n#### Other data or variables\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# box plot as inset\np.inset <- \n  ggplot(mpg, aes(factor(cyl), hwy, fill = factor(cyl))) +\n  stat_boxplot() +\n  labs(x = \"Engine cylinders (number)\", y = \"\") +\n  scale_fill_discrete(guide = \"none\")\n\n# scatter plot as main plot\np.base <- \n  ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +\n  geom_point(alpha = 0.3, size = 3) +\n  labs(x = \"Engine displacement (l)\", y = \"Fuel use efficiency (MPG)\",\n       colour = \"Engine\\ncylinders\\n(number)\") +\n  theme_bw()\n\n# plot with inset plot using annotate()\np.base +\n  annotate(\"plot_npc\", \n           npcx = 0.97, npcy = 0.98, \n           label = p.inset + theme_bw(9), \n           vp.width = 0.6, vp.height = 0.4) # relative size of inset\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-7-1.svg){fig-align='center'}\n:::\n:::\n\n\n### Using `geom_plot()` and `geom_plot_npc()`\n\nIn the examples above we used `annotate()` as it is the easiest\napproach. However, `annotate()` does not support adding different\nannotations to different panels in a faceted plot. Very small plots can\nsometimes function as data labels, specially in maps. In both cases we\nneed to use the geometries directly and pass a data frame as argument to\ntheir `data` formal parameter.\n\nWhen building `data` object containing the inset plots we need to add a\nlist as a column in a `data.frame`. This is possible as long as the\nlengths match, but the `list` object needs to be protected with `I()`,\nR's identity function.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# faceted scatter plot as base plot\np.base <- \n  ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +\n  geom_point(alpha = 0.3, size = 2) +\n  labs(x = \"Engine displacement (l)\", y = \"Fuel use efficiency (MPG)\",\n       colour = \"Engine\\ncylinders\\n(number)\") +\n  facet_wrap(facets = vars(cyl), labeller = label_both) +\n  theme_bw()\n\n# ad hoc function for constructing box plots\nmake_inset <- \n  function(target.cyl) {\n    ggplot(subset(mpg, cyl == target.cyl),\n           aes(factor(cyl), hwy)) +\n      stat_boxplot() +\n      labs(x = \"Engine cylinders\\n(number)\", y = \"\") +\n      scale_fill_discrete(guide = \"none\") + \n      theme_bw(7)\n  }\n\n# list of box plots as insets\np.inset.list <- lapply(unique(mpg$cyl), make_inset)\n\n# data frame to be used as data for plotting insets\ninset.df <- data.frame(cyl = unique(mpg$cyl),\n                       plots =  I(p.inset.list),\n                       npcx = c(0.97, 0.97, 0.0, 0.97),\n                       npcy = 0.5)\n\n# plot with inset plots using geom_plot_npc()\np.base +\n  geom_plot_npc(data = inset.df, \n                vp.height = 0.8,\n                mapping = aes(npcx = npcx, npcy = npcy, label = plots))\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-8-1.svg){fig-align='center'}\n:::\n:::\n\n\nWhen using tibbles instead of data frames, the call to `I()` can be\nomitted.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# CONTINUED FROM CODE CHUNK IMMEDIATELY ABOVE\n\n# tibble to be used as data for plotting insets\ninset.tb <- \n  tibble::tibble(cyl = unique(mpg$cyl),\n                 plots =  p.inset.list,\n                 npcx = c(0.97, 0.97, 0.0, 0.97),\n                 npcy = 0.5)\n\n# plot with inset plots using geom_plot_npc()\np.base +\n  geom_plot_npc(data = inset.tb, \n                vp.height = 0.8,\n                mapping = aes(npcx = npcx, npcy = npcy, label = plots))\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-9-1.svg){fig-align='center'}\n:::\n:::\n\n\n### Alternatives\n\n::: callout-tip\nInset plots used as annotations, but not as data labels, can be added to\nbase plots using the plot composition operators and function\n`inset_element()` from package 'patchwork'.\n\nIf the desired composed plot format is a 'grid' `grob` then the\nindividual plots can be converted first into grobs with function\n`ggplotGrob()` and these grobs subsequently combined using functions\nfrom package 'grid'.\n:::\n\n## Inset tables within plots\n\nTables are less frequently used as insets than plots. As annotations,\nthey can be useful in two situations: 1) reporting results for the\nstatistical analysis of the plotted data, and 2) adding numerical\nsummaries about the data. Very small tables can be also useful as data\nlabels to highlight specific observations in a plot or data for\nlocations in a map.\n\n### Using `annotate()`\n\nThe first set of examples show how to use `annotate()` together with the\ngeoms from package 'ggpp' to add inset tables to single-panel ggplots.\nThe examples show different uses of insets. All examples use data sets\navailable in R or package 'ggplot2'. In this examples we use\n`annotate()` together with `geom_table_npc()` or `geom_table()`.\n\n#### Summaries\n\nA simple table of medians computed using base R's `aggregate()` added\nusing `annotate()` and `geom = \"table_npc\"`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# compute medians grouped by number of cylinders\ndf <- aggregate(cbind(hwy, cty) ~ cyl, data = mpg, FUN = median)\n\n# create a plot with an inset table with medians\nggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +\n  annotate(geom = \"table_npc\", npcx = 0.95, npcy = 0.95, label = df) +\n  geom_point(alpha = 0.3, size = 3) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-10-1.svg){fig-align='center'}\n:::\n:::\n\n\nHere we use package 'dplyr' to compute the summaries, and we name the\nvariables directly with the desired column titles as strings to be\nparsed into R expressions. We add the table as above but pass\n`parse = TRUE` so that the column titles display as math expressions.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# compute means and variances grouped by number of cylinders as a data frame\nmpg |> \n  group_by(cyl) |>\n  summarize(\"bar(italic(x))\" = round(mean(hwy), 1),\n            \"italic(s)^{2}\" = round(var(hwy), 1),\n            \"italic(n)\" = n()) -> tb\n\n# create a plot with an inset table with medians\nggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +\n  annotate(\"table_npc\", npcx = 0.95, npcy = 0.95, label = tb, \n           parse = TRUE) +\n  geom_point(alpha = 0.3, size = 3) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-11-1.svg){fig-align='center'}\n:::\n:::\n\n\nIn this third example we use `stat_fmt_tb()` together with\n`geom_table()` to substitute some of the column headers, select columns,\nsize or text and colours, and change the order of rows.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# compute medians grouped by number of cylinders\ntb <- mpg |>\n  group_by(cyl) |>\n  summarise(hwy = median(hwy), cty = median(cty))\n\n# create a data frame with a single row\ndata.tb <- data.frame(x = 7, y = 44, tb = I(list(tb)))\n\n# create plot using `stat_fmt_tb()` to modify the data frame\nggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +\n  stat_fmt_tb(data = data.tb, \n             aes(x, y, label = tb),\n             table.theme = ttheme_gtlight,\n             size = 4.5, colour = \"darkblue\",\n             tb.vars = c(Cylinders = \"cyl\", MPG = \"hwy\"), # rename\n             tb.rows = 4:1) + # change order\n  labs(x = \"Engine displacement (l)\", y = \"Fuel use efficiency (MPG)\",\n       colour = \"Engine\\ncylinders\\n(number)\") +\n  geom_point(alpha = 0.3, size = 3) +\n  theme_bw(15)\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-12-1.svg){fig-align='center'}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# compute means and variances grouped by number of cylinders as a tibble\nmpg |> \n  group_by(cyl) |>\n  summarize(\"bar(italic(x))[hwy]\" = round(mean(hwy), 1),\n            \"{italic(s)^{2}}[hwy]\" = round(var(hwy), 2),\n            \"bar(italic(x))[displ]\" = round(mean(displ), 2),\n            \"{italic(s)^{2}}[displ]\" = round(var(displ), 3),\n            \"italic(n)\" = n()) -> tb\n\n# split the tibble into a list of one-row data frames\nsplit.ls <- split(as.data.frame(tb), f = tb$cyl)\n\n# assemble a data frame to use as data\nsplit.df <- \n  data.frame(cyl = names(split.ls), \n             dfs = I(split.ls), \n             npcx = \"left\",\n             npcy = \"bottom\")\n\n# create a plot with an inset table with medians\nggplot(mpg, aes(displ, hwy)) +\n  geom_table_npc(data = split.df, \n                 aes(npcx = npcx, npcy = npcy, label = dfs),\n                 size = 2.5, # size of text in tables\n                 parse = TRUE) +\n  geom_point(alpha = 0.3, size = 2) +\n  facet_wrap(facets = vars(cyl), scales = \"free\") +\n  scale_y_continuous(expand = expansion(mult = c(0.05, 0.15)),\n                     limits = c(0, NA)) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-13-1.svg){fig-align='center'}\n:::\n:::\n\n\n### Alternatives\n\n::: callout-tip\nInset tables used as annotations, but not as data labels, can be added\nto base plots using the plot composition operators and function\n`inset_element()` from package 'patchwork' if the table is available as\na 'grid' `grob`.\n\nIf the desired composed plot format is a 'grid' `grob` then the plot can\nbe converted first into a grob with function `ggplotGrob()` and this\ngrob subsequently combined with a table grob defining a table using\nfunctions from package 'grid'.\n:::\n\n## Inset 'grid' graphical objects within plots\n\nFunctions `geom_grob()` and `geom_grob_npc()` mimic the user interface\nof `geom_text_s()` which is a superset of that of `geom_text()` from\npackage 'ggplot2'. This makes them best suited for adding graphical data\nlabels and annotations. As they accept 'grid' grobs, they can add both\nbit maps and vector graphics within the same plot layer in a single\ncall. As both bitmaps and vector graphics can be converted into 'grid'\ngrobs, both are supported, can even coexist in the same plot layer.\nPackage 'grid' is included in the R distribution and the underlying\nplotting engine used by 'ggplot2'.\n\n::: callout-warning\nBe aware that the PDF format supports both vector graphics and bitmaps.\nConversion from vector graphics into bitmaps is usually relatively easy,\nwhile the reverse is much more difficult.\n:::\n\n### Using `annotate()`\n\nBitmaps in various file formats are very common, and include\nphotographs. Using `annotate()` together with `geom_grob_npc()` we can\neasily add for example a logo available as a bitmap file to a plot. In\nthis example we read one bitmap from a PNG file using package 'magick'.\nThis is one out several ways available in R to import raster data.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# find the path to a PNG bitmap file included in 'ggpp'\nlogo.file.path <- \n  system.file(\"extdata\", \"logo-ggpp.png\", \n              package = \"ggpp\", mustWork = TRUE)\n\n# read the file\nggpp.bm.logo <- magick::image_read(logo.file.path)\n\n# create the plot converting the raster into a grob\nggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +\n  annotate(geom = \"grob_npc\", npcx = 0.95, npcy = 0.9,\n           label = grid::rasterGrob(ggpp.bm.logo)) +\n  geom_point(alpha = 0.3, size = 3)\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-14-1.svg){fig-align='center'}\n:::\n:::\n\n\nVector graphics can be defined directly using functions from package\n'grid' or converted into grobs from SVG or PDF code. Base R plots and\nggplots can be also rendered into grobs.\n\nFor the next example we follow the technical report [*SVG In, SVG Out*\nby Paul\nMurrell](https://www.stat.auckland.ac.nz/~paul/Reports/grImport/grimport-gridsvg-export/grimport-gridsvg-export.html)\nto create a `grob` by reading an SVG file of the same logo as in the\nprevious example.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(gridSVG)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'gridSVG'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:grDevices':\n\n    dev.off\n```\n:::\n\n```{.r .cell-code}\n# find the path to a SVG vector graphics file included in 'ggpp'\nlogo.svg.name <- \n  system.file(\"extdata\", \"logo-ggpp.svg\", \n              package = \"ggpp\", mustWork = TRUE)\n\n# convert the SVG into a Cairo driver specific SVG implementation\nrsvg::rsvg_svg(logo.svg.name, \"logo-cairo.svg\")\n\n# read the file created above by the Cairo driver into a picture object \nggpp.vg.logo <- grImport2::readPicture(\"logo-cairo.svg\")\n\n# create the plot converting the picture into a grob\nggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +\n  annotate(geom = \"grob_npc\", npcx = 0.95, npcy = 0.9,\n           label = grImport2::pictureGrob(ggpp.vg.logo, ext=\"gridSVG\"),\n           vp.height = 0.22) +\n  geom_point(alpha = 0.3, size = 3)\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-15-1.svg){fig-align='center'}\n:::\n:::\n\n\n::: callout-tip\nUsing vector graphics for insets is most advantageous when the final\nformat into which the plot is rendered is also in a vector graphic\nformat like SVG, PS or PDF.\n:::\n\n### Using `geom_grob()` and `geom_grob_npc()`\n\nAs shown above, we can use bitmaps or rasters as well as vector graphics\nas annotations. In the next example they function as data labels for a\ncolumn plot with the bitmaps describing the molecular structure. We need\nto first convert them into graphical objects (`grob`) compatible with\npackage 'grid'. In this example we read two bitmaps from PNG files using\npackage 'magick'. This is one out several ways available in R to import\nraster data.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# read two bitmap files, in this case included in 'ggpp'\nIsoquercitin.file.path <- \n  system.file(\"extdata\", \"Isoquercitin.png\", \n              package = \"ggpp\", mustWork = TRUE)\n\nIsoquercitin <- magick::image_read(Isoquercitin.file.path)\n\nRobinin.file.path <- \n  system.file(\"extdata\", \"Robinin.png\", \n              package = \"ggpp\", mustWork = TRUE)\n\nRobinin <- magick::image_read(Robinin.file.path)\n\n# some fake concentration data together with grobs\nflavonoids.df <- \n  data.frame(metabolite = c(\"Isoquercitin\", \"Robinin\"),\n             structure = I(list(grid::rasterGrob(image = Isoquercitin),\n                                grid::rasterGrob(image = Robinin))),\n             concentration = c(10, 8))\n\n# make plot with data label\nggplot(flavonoids.df, \n       aes(metabolite, concentration, label = structure)) +\n  geom_col(width = 0.2, fill = \"grey95\", colour = \"black\") +\n  geom_grob(inherit.aes = TRUE,\n            nudge_y = 2,\n            segment.linewidth = 0,\n            vp.height = 0.2, vp.width = 1) +\n  expand_limits(y = 13.5) +\n  labs(x = \"Flavonoid\", y = expression(\"Concentration \"*(mg~g^{-1}))) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-16-1.svg){fig-align='center'}\n:::\n:::\n\n\n::: callout-tip\nFunction `image_read()` supports several other bitmap formats in\naddition to PNG. Version 6.9.12.3 of\n'magick', used to render this page supports the following formats and\ndevices.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnames(magick::magick_config()[-(1:2)])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"cairo\"              \"fontconfig\"         \"freetype\"          \n [4] \"fftw\"               \"ghostscript\"        \"heic\"              \n [7] \"jpeg\"               \"lcms\"               \"libopenjp2\"        \n[10] \"lzma\"               \"pangocairo\"         \"pango\"             \n[13] \"png\"                \"raw\"                \"rsvg\"              \n[16] \"tiff\"               \"webp\"               \"wmf\"               \n[19] \"x11\"                \"xml\"                \"zero-configuration\"\n[22] \"threads\"           \n```\n:::\n:::\n\n\nAlthough 'magick' is convenient to use, it is not the only way of\nimporting or creating `raster` objects in R. Ploting itself, however,\nremains unchanged.\n:::\n\nOf course, we can also use functions from package 'grid' to create grobs\nfrom scratch, both simple and as lists or trees of grobs defining\ncomplex shapes. He we combine some simple grobs with the PNG and SVG\nversions of the logo of package 'ggpp' read in the examples above.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# the raster and picture versions of the logo are reused from above\n\n# we create a data frame with six different grobs, the coordinates and\n# viewport width and height.\ngrobs.tb <- \n  data.frame(x = c(0, 10, 20, 40, 0, 50), y = c(4, 5, 7, 9, 12, 12),\n             width = c(0.05, 0.05, 0.01, 1, 0.2, 0.23),\n             height =  c(0.05, 0.05, 0.01, 0.3, 0.3, 0.325),\n             grob = I(list(grid::circleGrob(gp = grid::gpar(col=\"darkred\", \n                                                            fill=\"pink\", \n                                                            lwd = 2)), \n                           grid::rectGrob(gp = grid::gpar(lwd = 3)), \n                           grid::textGrob(\"I am a Grob\", gp = grid::gpar(fontsize = 16)),\n                           grid::textGrob(\"abc\", \n                                          gp = grid::gpar(fontface = \"italic\",\n                                                          color = \"red\",\n                                                          fontfamily = \"serif\")),\n                           grid::rasterGrob(ggpp.bm.logo),\n                           grImport2::pictureGrob(ggpp.vg.logo, ext=\"gridSVG\")\n             )\n             )\n  )\n\n# we create a single-layer ggplot with all the grobs\nggplot() +\n  geom_grob(data = grobs.tb, \n            aes(x, y, label = grob, vp.width = width, vp.height = height),\n            hjust = \"inward\", vjust = \"inward\") +\n  scale_y_continuous(expand = expansion(mult = 0.3, add = 0)) +\n  scale_x_continuous(expand = expansion(mult = 0.2, add = 0)) +\n  theme_bw(12)\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-18-1.svg){fig-align='center'}\n:::\n:::\n\n\nThe font used to create the bitmap of the logo in Adobe Illustrator was\nnot available in R, and substituted for the vector graphics version. The\nlines in the logo are also rendered slightly different as well as the\ncolour of the text.\n\n### Chemical structures from PubChem\n\nThe [PubChem site](https://pubchem.ncbi.nlm.nih.gov/) provides data and\nstructural information for many substances. The images can be republished\nby following the citation and copying instructions at the site.\n\nFor this example I downloaded one example of 2D and one example of 3D \nstructures, and use `theme_void()` for the ggplot with no other geom.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# we read a manually downloaded PNG bitmap\nQrg_2D <- magick::image_read(\"quercetin_3-O-rhamnoside-7-O-glucoside_500.png\")\nQrg_3D <- magick::image_read(\"quercetin_3-O-rhamnoside-7-O-glucoside_1100×300_3D_Conformer.png\")\n\n# some fake concentration data together with grobs\nflavonoids2.df <- \n  data.frame(representation = c(\"2D structure\", \"3D structure\"),\n             structure = I(list(grid::rasterGrob(image = Qrg_2D),\n                                grid::rasterGrob(image = Qrg_3D))))\n\n# make plot with data label\nggplot(flavonoids2.df, \n       aes(x = representation, label = structure)) +\n  geom_grob(inherit.aes = TRUE, y = 0,\n            vp.height = 0.75, vp.width = 0.75) +\n  labs(x = \"Representation\") +\n  expand_limits(y = c(-1, 1)) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](plot-insets_files/figure-html/unnamed-chunk-19-1.svg){fig-align='center'}\n:::\n:::\n\n\nKim, S., Chen, J., Cheng, T., Gindulyte, A., He, J., He, S., Li, Q., Shoemaker, B. A., Thiessen, P. A., Yu, B., Zaslavsky, L., Zhang, J., & Bolton, E. E. (2023). PubChem 2023 update. _Nucleic Acids Res._, 51(D1), D1373–D1380. [10.1093/nar/gkac956](https://doi.org/10.1093/nar/gkac956)\n\n### Alternatives\n\n::: callout-tip\nPackage 'ggplot2' defines `geom_raster()` which makes it possible to\ndirectly add a `raster` as a plot layer.\n\nPackage 'ggimg' defines `geom_rect_img()` that mimics `geom_rect()` but\nfills the rectangles with raster images, and `geom_point_img()` that\nmimics `geom_point()` but uses raster images instead of the usual shapes\nas graphical elements. Especially the second of these geoms can be used\nto create pictorial representations of data.\n\nInset grid grobs used as annotations, but not as data labels, can be\nadded to base plots using the plot composition operators and function\n`inset_element()` from package 'patchwork'.\n\nAdding a _grob_, _grob list_ or _grob tree_ as a plot layer is made easy by\nfunctions `grid_group()` and `grid_panel()` from package 'gggrid'. These two\nfunctions are neither geometries nor statistics, directly adding graphical\nobjects to those generated from data by layer functions working according to the\ngrammar of graphics.\n\nIf the desired composed plot format is a 'grid' `grob` then the ggplot\ncan be converted first into a grob with function `ggplotGrob()` and this\ngrob subsequently combined with a separately created 'grid' grob using\nfunctions from package 'grid'.\n\nGrobs can be vector graphics or contain bitmaps.\n:::\n",
    "supporting": [
      "plot-insets_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}