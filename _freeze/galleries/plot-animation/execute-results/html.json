{
  "hash": "19fbb3f9c05e3685fdedff00a8901f40",
  "result": {
    "markdown": "---\ntitle: \"Fitted-model labels with 'ggpmisc' and 'gganimate'\"\nsubtitle: \"Animated ggplots with model equations, _R_<sup>2</sup>, _F_, _P_, etc.\"\nauthor: \"Pedro J. Aphalo\"\ndate: \"2023-06-24\"\ndate-modified: \"2023-06-24\"\nkeywords: [ggplot2 pkg, ggpp pkg, ggpmisc pkg, gganimate pkg, plot annotations, model equations]\ncategories: [Plotting examples]\neditor: \n  markdown: \n    wrap: 72\nformat:\n  html: \n    code-link: true\n    code-tools: true\n---\n\n\n::: callout-warning\nAnimations are possible with 'ggpmisc' (>= 0.5.3). In earlier versions the\nstatistics that generate labels of model equations and various parameters were\nincompatible with package 'gganimate'.\n\nPackage 'gganimate' is widely compatible with ggplot2 and extensions, however,\nbefore version 0.5.3, 'ggpmisc' assumed that ggplot2's variable `group` was\nalways `integer`. However, 'gganimate' changes it into `character` to add indexing\ninformation about scenes and transitions. A different approach to decoding the\noriginal groups' indices is now used when needed to ensure compatibility.\n:::\n\n## Introduction\n\nHere you will find examples of _animated_ ggplots using\ngeometries defined in package 'ggpp' and statistics from package 'ggpmisc' both\navailable at CRAN. The documentation of [package\n'ggpp'](https://docs.r4photobiology.info/ggpp) and of [package\n'ggpmisc'](https://docs.r4photobiology.info/ggpmisc) is available on-line.\n\n::: callout-tip\nIn this page code chunks are \"folded\" so as to decrease the clutter when\nsearching for examples. Above each plot you will find a small triangle\nfollowed by \"Code\". Clicking on the triangle \"unfolds\" the code chunk\nmaking visible the R code used to produce the plot. Except for the\nloading of packages shown in section **Preliminaries** code examples are\nin most cases self contained. When they are not, this is indicated by a\ncomment.\n\nAll \"words\" defined in base R or in extension packages are linked to the\ncorresponding HTML-rendered help pages.\n\nThe code in the chunks can be copied by clicking on the top right\ncorner, where an icon appears when the mouse cursor hovers over the code\nlisting.\n:::\n\nFor simplicity, whenever possible I use base R functions instead of\ncontributed R packages. For those packages used only in specific\nexamples I use colon notation to indicate the 'package'.\n\n::: callout-important\nOne needs to always check that annotations do not occlude anything\nsignificant, such as observations in the base plot. This needs special\ncare when using annotations together with batch plotting. Either ensure\nthat the scale limits of the base plot are expanded to avoid overlap or\nthat the layer with the equations is the lowest one, i.e., added to the\nplot first.\n:::\n\n## Annotations showing parameters estimates\n\nFitted model equations and other related estimates can be useful in\nplots as they ensure that graphical representation as a curve and\nnumerical values for parameters that cannot be read from the curve\nitself are displayed as text on the same plot.\n\nSee page [ggplot fitted-model equations with 'ggpmisc'](plot-equations.qmd) for\nexplanations about the annotations. Here I focus on how to animate similar\nplots to those described earlier in this other page. Although the examples\ninclude annoations the animation code is applicable many other plots built\nwith 'ggplot2' together with many other extension packages.\n\n::: callout-note\nWhen adding annotations one should be aware that they add clutter to a\nplot, and clutter can make it difficult to see the patterns of interest\nin the data represented as points or curves.\n\nSo, as usual, less is more, include those annotations that are relevant\nto the message conveyed by a plot and nothing more.\n\nAnimations that gradually add layers to a plot can help solve this problem.\nOne can first show observations then overplot the prediction from a fitted\nmodel and finally show annotations with numeriacal values.\n:::\n\n## Preliminaries\n\nThe code used is shown on-demand above each plot and can be copied. We\nfirst load the packages we will use.\n\nWhen package 'ggpmisc' is loaded and attached, packages 'ggpp' and\n'ggplot2' are also attached. The only function from 'ggplot2' that is\nredefined by 'ggpp' is `annotate()`, which remains backwards compatible\nwith 'ggplot2'.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(ggpmisc)\nlibrary(ggrepel)\nlibrary(dplyr)\nlibrary(gganimate)\ntheme_set(theme_bw(16))\n```\n:::\n\n\n## Linear correlation\n\nI first generate some artificial data to use in the plotting examples.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(94321)\nx <- (1:100) / 10\nyA <- x + rnorm(length(x), sd = 2)\nyB <- x + rnorm(length(x), sd = 8)\nmy.data <- data.frame(x = rep(x, 2),\n                      y = c(yA, yB),\n                      group = rep(c(\"A\", \"B\"), rep(length(x), 2L)))\n```\n:::\n\n\nThe examples in this section make use of `stat_correlation()` from package\n'ggpmisc'. Please, see its [help page](https://docs.r4photobiology.info/ggpmisc/reference/stat_correlation.html)\nfor details.\n\nPearson correlation shown but Kendall and Spearman methods are also implemented. \n\nUsing `group` aesthetic we create two discrete scenes.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np <- \n  ggplot(my.data, \n       aes(x, y, group = group)) +\n  geom_point() +\n  stat_correlation(vstep = 0, \n                   mapping = use_label(c(\"R\", \"P\", \"n\")),\n                   label.x = \"right\",\n                   label.y = \"bottom\") +  \n  transition_states(group,\n                    transition_length = 1,\n                    state_length = 3) + \n  enter_fade() +\n  exit_fade()\n\nanimate(p, \n        fps=8, \n        renderer = gifski_renderer(loop = TRUE), \n        dev = 'png',\n        width = 8, height = 5, units = \"in\", res = 96, pointsize = 16)\n```\n\n::: {.cell-output-display}\n![](plot-animation_files/figure-html/unnamed-chunk-4-1.gif){fig-align='center'}\n:::\n:::\n\n\nConfidence interval for R. Using `colour` aesthetic we create two discrete scenes based on variable `group`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np <-\n  ggplot(my.data, aes(x, y, colour = group)) +\n  geom_point() +\n  stat_correlation(mapping = use_label(c(\"R\", \"R.confint\")),\n                   r.conf.level = 0.99,\n                   vstep = 0) +  \n  scale_color_viridis_d(option = \"A\", begin = 0.33, end = 0.67) +\n  expand_limits(y = 30) +\n  transition_states(group,\n                    transition_length = 1,\n                    state_length = 3) + \n  enter_fade() +\n  exit_fade()\n\nanimate(p, \n        fps=8, \n        renderer = gifski_renderer(loop = TRUE), \n        dev = 'png',\n        width = 8, height = 5, units = \"in\", res = 96, pointsize = 16)\n```\n\n::: {.cell-output-display}\n![](plot-animation_files/figure-html/unnamed-chunk-5-1.gif){fig-align='center'}\n:::\n:::\n\n\nHighlighting based on estimates. In this example the colour depends on the estimated value for *R*, but it is possible\nto use other estimates like *P*-value to decide the colour used to display the *R* estimate. Here we first show the observations followed by the correlation estimate as a label. Transitions are based on layers rather than grouping.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np <-\n  ggplot(my.data, aes(x, y)) +\n  geom_point() +\n  stat_correlation(mapping = \n                     aes(color = ifelse(after_stat(cor) > 0.5,\n                                        \"red\", \"black\"))) +\n  scale_color_identity() +\n  facet_wrap(~group)  +\n  transition_layers(transition_length = 1,\n                    layer_length = 3)\n\nanimate(p, \n        fps=8, end_pause = 10,\n        renderer = gifski_renderer(loop = TRUE), \n        dev = 'png',\n        width = 8, height = 5, units = \"in\", res = 96, pointsize = 16)\n```\n\n::: {.cell-output-display}\n![](plot-animation_files/figure-html/unnamed-chunk-6-1.gif){fig-align='center'}\n:::\n:::\n\n\n## Polynomials\n\nPolynomials are linear models, but many other linear models exist. The most\ncommon case is linear regression. Polynomials are very frequently used, and in the\ncase of linear regression the role of parameters can be easily recognized.\n\nThe examples in this section make use of `stat_poly_line()` and `stat_poly_eq()`\nfrom package 'ggpmisc'. Please, see the [help page for `stat_poly_line()`](https://docs.r4photobiology.info/ggpmisc/reference/stat_poly_line.html)\nand the [help page for `stat_poly_eq()`](https://docs.r4photobiology.info/ggpmisc/reference/stat_poly_eq.html) for details.\n\nI generate different artificial data to use in the polynomial regression examples.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(4321)\n# generate artificial data\nx <- 1:100\ny <- (x + x^2 + x^3) + rnorm(length(x), mean = 0, sd = mean(x^3) / 4)\ny <- y / max(y)\nmy.data <- data.frame(x, \n                      y, \n                      group = c(\"A\", \"B\"), \n                      y2 = y * c(1, 2) + c(0, 0.2),\n                      block = c(\"a\", \"a\", \"b\", \"b\"),\n                      wt = sqrt(x))\n```\n:::\n\n\nFitted model equation, is available for polynomials with no missing terms. Here I add different labels in different plot layers and animate the plot over layers. (In this example, the model is fitted four times to the same data.)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nformula <- y ~ poly(x, 3, raw = TRUE)\np <-\n  ggplot(my.data, aes(x, y)) +\n  geom_point() +\n  stat_poly_line(formula = formula) +\n  stat_poly_eq(mapping = use_label(\"eq\"), formula = formula, label.y = 0.95) +\n  stat_poly_eq(mapping = use_label(c(\"F\", \"P\")), formula = formula, label.y = 0.87) +\n  stat_poly_eq(mapping = use_label(\"R2\"), formula = formula, label.y = 0.80) +\n  transition_layers(transition_length = 3,\n                    layer_length = 5)\n\nanimate(p, \n        fps=8, end_pause = 20,\n        renderer = gifski_renderer(loop = TRUE), \n        dev = 'png',\n        width = 8, height = 5, units = \"in\", res = 96, pointsize = 16)\n```\n\n::: {.cell-output-display}\n![](plot-animation_files/figure-html/unnamed-chunk-8-1.gif){fig-align='center'}\n:::\n:::\n\n\nA similar plot but animated by group, which can be a good way of highlighting differences between groups of observations.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nformula <- y ~ poly(x, 3, raw = TRUE)\n\np <-\n  ggplot(my.data, aes(x, y2, group = group)) +\n  geom_point() +\n  stat_poly_line(formula = formula) +\n  stat_poly_eq(aes(label = after_stat(eq.label)), \n               formula = formula, \n               vstep = 0) +\n   transition_states(group,\n                    transition_length = 1,\n                    state_length = 3) + \n  enter_fade() +\n  exit_fade()\n\nanimate(p, \n        fps=8, \n        renderer = gifski_renderer(loop = TRUE), \n        dev = 'png',\n        width = 8, height = 5, units = \"in\", res = 96, pointsize = 16) \n```\n\n::: {.cell-output-display}\n![](plot-animation_files/figure-html/unnamed-chunk-9-1.gif){fig-align='center'}\n:::\n:::\n\n\nUsing colours to indicate the groups to which equations correspond is not always\npossible or if possible not the best design. Here I use labels to the left of\neach equation and build the plot one group at a time.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nformula <- y ~ poly(x, 3, raw = TRUE)\n\np <-\n  ggplot(my.data, aes(x, y2, linetype = group, grp.label = group)) +\n  geom_point() +\n  stat_poly_line(formula = formula, color = \"black\") +\n  stat_poly_eq(aes(label = after_stat(paste(\"bold(\", grp.label, \"*':')~~~\", \n                                      eq.label, sep = \"\"))),\n               formula = formula) +\n   transition_states(group,\n                    transition_length = 3,\n                    state_length = 3) + \n  enter_fade() +\n  exit_fade() +\n  shadow_mark()\n\nanimate(p, \n        fps=8, end_pause = 16,\n        renderer = gifski_renderer(loop = TRUE), \n        dev = 'png',\n        width = 8, height = 5, units = \"in\", res = 96, pointsize = 16) \n```\n\n::: {.cell-output-display}\n![](plot-animation_files/figure-html/unnamed-chunk-10-1.gif){fig-align='center'}\n:::\n:::\n\n\nFacets are also supported.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nformula <- y ~ poly(x, 3, raw = TRUE)\n\np <-\n  ggplot(my.data, aes(x, y2, group = group)) +\n  geom_point() +\n  stat_poly_line(formula = formula) +\n  stat_poly_eq(aes(label = after_stat(eq.label)),\n               formula = formula) +\n  facet_wrap(facets = vars(group), scales = \"free_y\", ncol = 1) +\n   transition_states(group,\n                    transition_length = 8,\n                    state_length = 8) + \n  shadow_mark(alpha = 0.2, past = TRUE, future = TRUE)\n\nanimate(p, \n        fps=8,\n        renderer = gifski_renderer(loop = TRUE), \n        dev = 'png',\n        width = 8, height = 5, units = \"in\", res = 96, pointsize = 16) \n```\n\n::: {.cell-output-display}\n![](plot-animation_files/figure-html/unnamed-chunk-11-1.gif){fig-align='center'}\n:::\n:::\n\n\nIn the stats defined in 'ggpmsic' the fit method function can modify the\nmodel passed as argument because the one used to build the equation is\nretrieved from the fitted model object when possible. In this example, a\nlinear regression is fitted if the slope is significant, but if not the\nmean is reported instead, both graphically and numerically. Here it is\nanimated over plot layers. The animation takes place in parallel in all\nthe panels in the plot.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# user defined fit method removes the slope if \n# the slope is not significant\npoly_or_mean <- function(formula, data, ...) {\n   fm <- lm(formula = formula, data = data, ...)\n   if (anova(fm)[[\"Pr(>F)\"]][1] > 0.1) {\n      lm(formula = y ~ 1, data = data, ...)\n   } else {\n      fm\n   }\n}\n\n# we create a plot as usual, but with our method\np <-\n  ggplot(mpg, aes(displ, hwy)) +\n  geom_point() +\n  stat_poly_line(method = \"poly_or_mean\") +\n  stat_poly_eq(method = poly_or_mean,\n               aes(label = after_stat(eq.label)),\n               label.x = \"right\") +\n  theme(legend.position = \"bottom\") +\n  facet_wrap(~class, ncol = 2) +\n  transition_layers(transition_length = 3,\n                    layer_length = 5)\n\nanimate(p, \n        fps=8, end_pause = 20,\n        renderer = gifski_renderer(loop = TRUE), \n        dev = 'png',\n        width = 8, height = 10, units = \"in\", res = 96, pointsize = 16)\n```\n\n::: {.cell-output-display}\n![](plot-animation_files/figure-html/unnamed-chunk-12-1.gif){fig-align='center'}\n:::\n:::\n\n\nFaceting works also with free *x* and/or *y* scales in panels when the\nposition of labels is set by a character string. Animation as above remains\npossible.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nformula <- y ~ poly(x, 3, raw = TRUE)\n\np <-\n  ggplot(my.data, aes(x, y2, fill = block)) +\n  geom_point(shape = 21, size = 3) +\n  stat_poly_line(aes(colour = block), formula = formula) +\n  stat_poly_eq(use_label(\"R2\"), size = 3,\n               geom = \"label_npc\", alpha = 0.33,\n               formula = formula,\n               label.x = \"right\", label.y = \"bottom\",\n               rr.digits = 3) +\n  stat_poly_eq(use_label(c(\"F\", \"P\")),\n               size = 3,\n               geom = \"label_npc\", alpha = 0.33, \n               formula = formula) +\n  facet_wrap(~group, scales = \"free_y\") +\n  theme(legend.position = \"top\") +\n  transition_layers(transition_length = 3,\n                    layer_length = 5)\n\nanimate(p, \n        fps=8, end_pause = 20,\n        renderer = gifski_renderer(loop = TRUE), \n        dev = 'png',\n        width = 8, height = 5, units = \"in\", res = 96, pointsize = 16)\n```\n\n::: {.cell-output-display}\n![](plot-animation_files/figure-html/unnamed-chunk-13-1.gif){fig-align='center'}\n:::\n:::\n\nThe same plot with multiple panels can be animated over groups, in this case\nusing variable `block` to display one of two block at a time, using fading\nto make it easier to assess the differences.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nformula <- y ~ poly(x, 3, raw = TRUE)\n\np <-\n  ggplot(my.data, aes(x, y2, fill = block)) +\n  geom_point(shape = 21, size = 3) +\n  stat_poly_line(aes(colour = block), formula = formula) +\n  stat_poly_eq(use_label(\"R2\"), size = 3,\n               geom = \"label_npc\", alpha = 0.33,\n               formula = formula,\n               label.x = \"right\", label.y = \"bottom\",\n               rr.digits = 3,\n               vstep = 0) +\n  stat_poly_eq(use_label(c(\"F\", \"P\")),\n               size = 3,\n               geom = \"label_npc\", alpha = 0.33, \n               formula = formula,\n               vstep = 0) +\n  facet_wrap(~group, scales = \"free_y\") +\n  theme(legend.position = \"top\") +\n  transition_states(block,\n                    transition_length = 8,\n                    state_length = 8) +\n  enter_fade() +\n  exit_fade()\n  \nanimate(p, \n        fps=8, end_pause = 20,\n        renderer = gifski_renderer(loop = TRUE), \n        dev = 'png',\n        width = 8, height = 5, units = \"in\", res = 96, pointsize = 16)\n```\n\n::: {.cell-output-display}\n![](plot-animation_files/figure-html/unnamed-chunk-14-1.gif){fig-align='center'}\n:::\n:::\n\n\n## Major axis regression\n\nIf *x* and *y* are both subject to random errors, and none is clearly\nthe cause of the other, we should use major axis regression instead of\nlinear regression.\n\nThe examples in this section make use of `stat_ma_line()` and `stat_ma_eq()`\nfrom package 'ggpmisc'. Please, see the [help page for\n`stat_ma_line()`](https://docs.r4photobiology.info/ggpmisc/reference/stat_ma_line.html)\nand the [help page for\n`stat_poly_eq()`](https://docs.r4photobiology.info/ggpmisc/reference/stat_ma_eq.html)\nfor details.\n\nAnother set of artificial data with rather high random variation on both _x_ and _y_.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(94321)\na <- (1:100) / 10\nx <- a + rnorm(length(x), sd = 1)\ny <- a + rnorm(length(x), sd = 2)\nmy_linear.data <- data.frame(x = x, y = y)\n```\n:::\n\n\nFor this data set the most useful animations are over layers.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np <-\n  ggplot(my_linear.data, aes(x, y)) +\n  geom_point() +\n  stat_ma_line() +\n  stat_ma_eq(mapping = use_label(c(\"R2\", \"eq\"))) +\n  transition_layers(transition_length = 3,\n                    layer_length = 5)\n\nanimate(p, \n        fps=8, end_pause = 20,\n        renderer = gifski_renderer(loop = TRUE), \n        dev = 'png',\n        width = 8, height = 5, units = \"in\", res = 96, pointsize = 16)\n```\n\n::: {.cell-output-display}\n![](plot-animation_files/figure-html/unnamed-chunk-16-1.gif){fig-align='center'}\n:::\n:::\n\n\n## Quantile regression\n\nQuantile regression is frequently used is some disciplines like\nEconomics but less frequently in other fields. It is robust and can be\nrather easily interpreted based on its similarity to the well known box\nplots.\n\nThe examples in this section make use of `stat_quant_line()`,\n`stat_quant_band()` and `stat_quant_eq()` from package 'ggpmisc'. Please, see\nthe [help page for\n`stat_quant_line()`](https://docs.r4photobiology.info/ggpmisc/reference/stat_quant_line.html),\n[help page for\n`stat_quant_band()`](https://docs.r4photobiology.info/ggpmisc/reference/stat_quant_band.html)\nand the [help page for\n`stat_quant_eq()`](https://docs.r4photobiology.info/ggpmisc/reference/stat_quant_eq.html)\nfor details.\n\n::: callout-caution\nQuantile regression fits are done by numerical approximation, and\nfrequently generate warnings for non-unique solutions or similar\nproblems. Their importance needs to be assessed by users. In the\nexamples below they seem mostly unimportant given the large number of\nobservations and have been silenced in the output.\n:::\n\nA median regression with a band limited by the upper and lower quartile\nregressions.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# the default for formula is y ~ x\np <-\n  ggplot(my_linear.data, aes(x, y)) +\n  geom_point() +\n  stat_quant_band() +\n  stat_quant_eq(quantiles = 0.5) +\n  transition_layers(transition_length = 3,\n                    layer_length = 5)\n\nanimate(p, \n        fps=8, end_pause = 20,\n        renderer = gifski_renderer(loop = TRUE), \n        dev = 'png',\n        width = 8, height = 5, units = \"in\", res = 96, pointsize = 16)\n```\n\n::: {.cell-output-display}\n![](plot-animation_files/figure-html/unnamed-chunk-17-1.gif){fig-align='center'}\n:::\n:::\n\n\nMedian regression through the origin.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# model with intercept = 0\nformula <- y ~ x + 0\n\np <-\n  ggplot(my_linear.data, aes(x, y)) +\n  geom_point() +\n  stat_quant_band(formula = formula) +\n  stat_quant_eq(formula = formula, quantiles = 0.5) +\n  transition_layers(transition_length = 3,\n                    layer_length = 5)\n\nanimate(p, \n        fps=8, end_pause = 20,\n        renderer = gifski_renderer(loop = TRUE), \n        dev = 'png',\n        width = 8, height = 5, units = \"in\", res = 96, pointsize = 16)\n```\n\n::: {.cell-output-display}\n![](plot-animation_files/figure-html/unnamed-chunk-18-1.gif){fig-align='center'}\n:::\n:::\n\n\nQuantile regressions of _y_ on _x_ and _x_ on _y_.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# the default for formula is y ~ x\np <-\n  ggplot(my_linear.data, aes(x, y)) +\n  geom_point() +\n  stat_quant_band(color = \"blue\") +\n  stat_quant_eq(quantiles = 0.5, color = \"blue\") +\n  stat_quant_band(color = \"red\", \n                 orientation = \"y\") +\n  stat_quant_eq(quantiles = 0.5, color = \"red\", \n               orientation = \"y\", label.y = 0.9) +\n  transition_layers(transition_length = 3,\n                    layer_length = 5)\n\nanimate(p, \n        fps=8, end_pause = 20,\n        renderer = gifski_renderer(loop = TRUE), \n        dev = 'png',\n        width = 8, height = 5, units = \"in\", res = 96, pointsize = 16)\n```\n\n::: {.cell-output-display}\n![](plot-animation_files/figure-html/unnamed-chunk-19-1.gif){fig-align='center'}\n:::\n:::\n\n\nTwo quantiles are by default plotted as lines,\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np <-\n  ggplot(my.data, aes(x, y)) +\n  geom_point() +\n  stat_quant_line(formula = y ~ poly(x, 2), quantiles = c(0.05, 0.95)) +\n  stat_quant_eq(formula = y ~ poly(x, 2), quantiles = c(0.05, 0.95)) +\n  transition_layers(transition_length = 3,\n                    layer_length = 5)\n\nanimate(p, \n        fps=8, end_pause = 20,\n        renderer = gifski_renderer(loop = TRUE), \n        dev = 'png',\n        width = 8, height = 5, units = \"in\", res = 96, pointsize = 16)\n```\n\n::: {.cell-output-display}\n![](plot-animation_files/figure-html/unnamed-chunk-20-1.gif){fig-align='center'}\n:::\n:::\n\n\nEquations labelled by quantile.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np <-\n  ggplot(my.data, aes(x, y)) +\n  geom_point() +\n  stat_quant_band(formula = y ~ poly(x, 2), \n                  color = \"black\", fill = \"grey60\") +\n  stat_quant_eq(aes(label = paste(after_stat(grp.label), \"*\\\": \\\"*\",\n                                  after_stat(eq.label), sep = \"\")),\n                formula = y ~ poly(x, 2)) +\n  theme_classic()  +\n  transition_layers(transition_length = 3,\n                    layer_length = 5)\n\nanimate(p, \n        fps=8, end_pause = 20,\n        renderer = gifski_renderer(loop = TRUE), \n        dev = 'png',\n        width = 8, height = 5, units = \"in\", res = 96, pointsize = 16)\n```\n\n::: {.cell-output-display}\n![](plot-animation_files/figure-html/unnamed-chunk-21-1.gif){fig-align='center'}\n:::\n:::\n\n\nEquations labelled by group and quantile, animated over groups, based on variable `group`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np <-\n  ggplot(my.data, aes(x, y, group = group, linetype = group, \n                    shape = group, grp.label = group)) +\n  geom_point() +\n  stat_quant_line(formula = y ~ poly(x, 2), \n                  quantiles = c(0.1, 0.9), \n                  color = \"black\") +\n  stat_quant_eq(aes(label = paste(after_stat(grp.label), \"*\\\": \\\"*\",\n                                  after_stat(eq.label), sep = \"\")),\n                formula = y ~ poly(x, 2), \n                quantiles = c(0.1, 0.9)) +\n  theme_classic() +\n  transition_states(group,\n                    transition_length = 0, # transition of lines fails\n                    state_length = 8)\n\nanimate(p, \n        fps=0.1,\n        nframes = 2,\n        renderer = gifski_renderer(loop = TRUE), \n        dev = 'png',\n        width = 8, height = 5, units = \"in\", res = 96, pointsize = 16)\n```\n\n::: {.cell-output-display}\n![](plot-animation_files/figure-html/unnamed-chunk-22-1.gif){fig-align='center'}\n:::\n:::\n\n\n## Non-linear models\n\nThe examples in previous sections were based on ready assembled labels. Here\nwe show examples of how to generate labels for equations and other parameter\nestimates with an approach applicable to many different types of models.\n\nThe examples in this section make use of `stat_fit_tidy()` from package\n'ggpmisc'. Please, see its [help page](https://docs.r4photobiology.info/ggpmisc/reference/stat_fit_tidy.html)\nfor details. Package 'broom' must be installed before runing the examples below.\n\nWe use as example a fit of the Michaelis-Menthen equation of reaction kinetics,\na function that is non-linear in its parameters. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\n# We use methods from package 'broom'\nlibrary(broom)\n```\n:::\n\n\nAnimation works as ín the examples in previous sections, here over layers.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmicmen.formula <- y ~ SSmicmen(x, Vm, K) \n\np <-\n  ggplot(Puromycin, aes(conc, rate, colour = state)) +\n  geom_point() +\n  geom_smooth(method = \"nls\", \n              formula = micmen.formula,\n              se = FALSE) +\n  stat_fit_tidy(method = \"nls\", \n                method.args = list(formula = micmen.formula),\n                label.x = \"right\",\n                label.y = \"bottom\",\n                aes(label = paste(\"V[m]~`=`~\", signif(after_stat(Vm_estimate), digits = 3),\n                                  \"%+-%\", signif(after_stat(Vm_se), digits = 2),\n                                  \"~~~~K~`=`~\", signif(after_stat(K_estimate), digits = 3),\n                                  \"%+-%\", signif(after_stat(K_se), digits = 2),\n                                  sep = \"\")),\n                parse = TRUE)  +\n  transition_layers(transition_length = 3,\n                    layer_length = 5)\n\nanimate(p, \n        fps=8, end_pause = 20,\n        renderer = gifski_renderer(loop = TRUE), \n        dev = 'png',\n        width = 8, height = 5, units = \"in\", res = 96, pointsize = 16)\n```\n\n::: {.cell-output-display}\n![](plot-animation_files/figure-html/unnamed-chunk-24-1.gif){fig-align='center'}\n:::\n:::\n\nThe animation is in this variation of the plot over groups based on variable `state`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmicmen.formula <- y ~ SSmicmen(x, Vm, K) \n\np <-\n  ggplot(Puromycin, aes(conc, rate, colour = state)) +\n  geom_point() +\n  geom_smooth(method = \"nls\", \n              formula = micmen.formula,\n              se = FALSE) +\n  stat_fit_tidy(method = \"nls\", \n                method.args = list(formula = micmen.formula),\n                label.x = \"center\",\n                label.y = \"bottom\",\n                vstep = 0, hstep = -0.3,\n                aes(label = paste(\"V~`=`~frac(\", signif(after_stat(Vm_estimate), digits = 2), \"~C,\",\n                                  signif(after_stat(K_estimate), digits = 2), \"+C)\",\n                                  sep = \"\")),\n                parse = TRUE) +\n  labs(x = \"C\", y = \"V\")  +\n  transition_states(state,\n                    transition_length = 0, # transition of lines fails\n                    state_length = 8)\n\nanimate(p, \n        fps=0.125,\n        nframes = 2,\n        renderer = gifski_renderer(loop = TRUE), \n        dev = 'png',\n        width = 8, height = 5, units = \"in\", res = 96, pointsize = 16)\n```\n\n::: {.cell-output-display}\n![](plot-animation_files/figure-html/unnamed-chunk-25-1.gif){fig-align='center'}\n:::\n:::\n\n### Alternatives\n\n::: callout-tip\nIn all cases it is possible to do the model fitting before creating the plot,\nassembling labels in one's own R code and passing them to `ggplot()` as data.\nThe possibilities are nearly unlimited but implementing them, depending on one's\nown familiarity with R and 'ggplot2' can become time consuming. I have in part\nwritten 'ggpp' and 'ggpmisc' to avoid as a user having to remind myself of how\nto write such code repeatedly. My hope is that others will also save time and\neffort by using the packages I have developed.\n:::\n",
    "supporting": [
      "plot-animation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}