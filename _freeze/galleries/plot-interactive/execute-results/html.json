{
  "hash": "d50ecc1590444b244fe86ae295b2572a",
  "result": {
    "markdown": "---\ntitle: \"Fitted-model labels with 'ggpmisc' and 'plotly'\"\nsubtitle: \"Interactive ggplots with model equations, _R_<sup>2</sup>, _F_, _P_, etc.\"\nauthor: \"Pedro J. Aphalo\"\ndate: \"2023-06-25\"\nkeywords: [ggplot2 pkg, ggpp pkg, ggpmisc pkg, plotly pkg, plot annotations, model equations]\ncategories: [Plotting examples]\neditor: \n  markdown: \n    wrap: 72\nformat:\n  html: \n    code-link: true\n    code-tools: true\n---\n\n\n::: callout-warning\nThis page is a preliminary draft as I haven't been able to get the output of 'plotly' included by Quarto in the HTML output.\n\nIt is possible to combine 'ggpmisc' and 'plotly' in the same plot but only by using the most basic formatting of the equation. I give for the time being a single example.\n:::\n\n## Introduction\n\nHere you will find examples of *animated* ggplots using geometries\ndefined in package 'ggpp' and statistics from package 'ggpmisc' both\navailable at CRAN. The documentation of [package\n'ggpp'](https://docs.r4photobiology.info/ggpp) and of [package\n'ggpmisc'](https://docs.r4photobiology.info/ggpmisc) is available\non-line.\n\n::: callout-tip\nIn this page code chunks are \"folded\" so as to decrease the clutter when\nsearching for examples. Above each plot you will find a small triangle\nfollowed by \"Code\". Clicking on the triangle \"unfolds\" the code chunk\nmaking visible the R code used to produce the plot. Except for the\nloading of packages shown in section **Preliminaries** code examples are\nin most cases self contained. When they are not, this is indicated by a\ncomment.\n\nAll \"words\" defined in base R or in extension packages are linked to the\ncorresponding HTML-rendered help pages.\n\nThe code in the chunks can be copied by clicking on the top right\ncorner, where an icon appears when the mouse cursor hovers over the code\nlisting.\n:::\n\nFor simplicity, whenever possible I use base R functions instead of\ncontributed R packages. For those packages used only in specific\nexamples I use colon notation to indicate the 'package'.\n\n::: callout-important\nOne needs to always check that annotations do not occlude anything\nsignificant, such as observations in the base plot. This needs special\ncare when using annotations together with batch plotting. Either ensure\nthat the scale limits of the base plot are expanded to avoid overlap or\nthat the layer with the equations is the lowest one, i.e., added to the\nplot first.\n:::\n\n## Preliminaries\n\nThe code used is shown on-demand above each plot and can be copied. We\nfirst load the packages we will use.\n\nWhen package 'ggpmisc' is loaded and attached, packages 'ggpp' and\n'ggplot2' are also attached. The only function from 'ggplot2' that is\nredefined by 'ggpp' is `annotate()`, which remains backwards compatible\nwith 'ggplot2'.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(ggplot2)\nlibrary(ggpmisc)\nlibrary(plotly)\ntheme_set(theme_bw())\n```\n:::\n\n\n## Using 'plotly'\n\nPlotly can convert a regular ggplot into an interactive plot that can be\nembedded in HTML output. The advantage is that one uses the usual layer\nfunctions, but control of output is rather limited. It is implemented as\na parsing engine that recognizes only some 'ggplot2' layer functions. As\ncan be seen in the example below this approach makes rendering math\ndifficult as expressions or text labels marked to be parsed into\nexpressions are displayed as unparsed text.\n\nSeveral of the statistics from 'ggpmisc' can still be used but the\nformating is not as nice as when using R graphic devices.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf <- data.frame(x = c(1:100))\ndf$y <- 2 + 3 * df$x + rnorm(100, sd = 40)\n```\n:::\n\n\nEven though this example works without problems at the R console, I have\nnot been able to get it to work within the Quarto file. So below the\ncode I include a non-interactive PNG of the 'plotly' interactive plot.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmy.formula <- y ~ x\np <- ggplot(data = df, aes(x = x, y = y)) +\n  geom_smooth(method = \"lm\", se=FALSE, color=\"black\", formula = my.formula) +\n  stat_poly_eq(geom = \"text\",\n               output.type = \"text\",\n               formula = my.formula,\n               mapping = use_label(c(\"eq\", \"R2\"), sep = \",  \"),\n               label.x = 20) +\n  geom_point()\n\nggplotly(p)\n```\n:::\n\n\n![Static export from the interactive plot](plotly-export.png)\n\n### Alternatives\n\n::: callout-tip\nI have not yet tested 'ggigraph' together with 'ggpmisc', but I plan to, as it seems to allow finer grained control of the interaction. On the other hand, it could be incompatible.\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}