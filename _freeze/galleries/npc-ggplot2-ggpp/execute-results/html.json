{
  "hash": "d8c7a07bef97c38ebf72d29b4e4682bf",
  "result": {
    "markdown": "---\ntitle: \"NPC with 'ggplot2' and 'ggpp'\"\nsubtitle: \"Contrasts, multiple comparisons and simple labels\"\nauthor: \"Pedro J. Aphalo\"\ndate: \"2024-04-22\"\ndate-modified: \"2024-04-22\"\nkeywords: [ggplot2 pkg, ggpp pkg, data labels, plot annotations]\ncategories: [Plotting examples]\neditor: \n  markdown: \n    wrap: 72\ncode-fold: true\nformat:\n  html: \n    code-link: true\n    code-tools: true\ndraft: true\nabstract: |\n  Example R code for plots annotations using NPC () values for the x and/or y aesthetics. The examples demonstrate how to do what used to be possible only with 'ggpp' with 'ggplot2' >=3.5.0, posibly still with a little help from 'ggpp'.\n---\n\n\n::: callout-warning\n**Version 3.5.0 of package ['ggplot2'](https://ggplot2.tidyverse.org/) and _future_ version 0.5.7 of package ['ggpp'](https://docs.r4photobiology.info/ggpp/) are required.**\n\nVersion 0.5.7 of package 'ggpp' will be the first to include `as_npc()`, `as_npcx()` and `as_npcy()`\nused in some examples in this page.\n:::\n\n::: callout-tip\nIn this page most code chunks are \"folded\" so as to decrease the clutter when\nsearching for examples. A few code chunks that are reused across several plots\nare by default unfolded to make them more visible. Above each plot you will find\none or more \"folded\" code chuncks signalled by a small triangle followed by\n\"Code\". Clicking on the triangle \"unfolds\" the code chunk making visible the R\ncode used to produce the plot.\n\nThe code in the chunks can be copied by clicking on the top right\ncorner, where an icon appears when the mouse cursor hovers over the code\nlisting.\n\nThe `</> Code` drop down menu to the right of the page title makes it possible\nto unfold all code chunks and to view the Quarto source of the whole web page.\n\nNames of functions and other R objects are linked to the corresponding on-line\nhelp pages. The names of R extension packages are linked to their documentation\nweb sites when available.\n:::\n\n# Introduction\n\nNPC or \"Normalised Parent Coordinates\" are the default coordinate system used\nby package 'grid'. Package 'grid' is part of R and is the basis on which\n'ggplot2' is built. It provides the low level functions that do the actual\ndrawing of the plots.\n\nNormalised Parent Coordinates are relative to a viewport, and vary between zero\nand one. The plotting area of a ggplot is a 'grid' viewport. We use NPC values\nwhen we want to skip any mapping or scaling and directly specify a position\non the plotting area, irrespective of whatever else is plotted in it.\n\nThere are two approaches to achieve this, skipping all scaling and mapping\nstages within 'ggplot2' code, which is possible since version 3.5.0, or\nwhat 'ggpp' used to do without accessing 'ggplot2' code, to compute the values\nin data units corresponding to an NPC value and pass those to 'ggplot2'.\n\nObviously, the approach used by 'ggplot2' is simpler and more elegant. Still,\nthis code requires the use of numeric values while 'ggpp' supports named\npositions. (Beware that this new approach still has limitations and rough edges.)\n\nIn 'ggpp' 0.5.7 I added simple functions that make it possible to\nuse named positions with any geometry relying on the new approach implemented\nin  'ggplot2' 3.5.0.\n\nPackage [ggpp](https://docs.r4photobiology.info/ggpp) imports and \nreexports all definitions from [ggplot2](https://ggplot2.tidyverse.org/).\n\n::: callout-important\nOne needs to always check that annotations do not occlude anything\nsignificant, such as observations in the base plot. This needs special\ncare when using annotations together with batch plotting. Either ensure\nthat the scale limits of the base plot are expanded to avoid overlap or\nthat the layer with the equations is the lowest one, i.e., added to the\nplot first.\n:::\n\n# Data labels and plot annotations\n\nData labels add textual information directly related to individual data\npoints (shown as glyphs). Text position in this case is dependent on the\nscales used to represent data points. Text is usually displaced so that\nit does not occlude the glyph representing the data point and when the\nlink to the data point is unclear, this link is signalled with a line\nsegment or arrow. Data labels are distinct from annotations in that they\ncontribute directly to the representation of data on a plot or map.\n\nAnnotations differ from data labels, in that their position is decoupled\nfrom their meaning. Insets can be thought as larger, but still\nself-contained annotations. In most cases the reading of inset tables\nand plots depends only weakly on the plot or map in which they are\nincluded.\n\nIn the case of annotations and insets the designer of a data\nvisualization has the freedom to locate them anywhere, as long as they\ndo not occlude features used to describe data. I will use the term\nannotation irrespective if the \"labels\" are textual or graphical.\n\nThe labelled segments used to highlight pairwise comparisons are a special\ncase as they behave as data labels along the axis onto which an explanatory\nfactor has been mapped, usually _x_, but as annotation along the axis onto\nwhich a continuous numeric variable has been mapped, usually _y_.\n\n# Load the packages\n\nLoad and attach the packages.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(ggplot2)\nlibrary(ggpp)\nlibrary(gginnards) # for debugging\n```\n:::\n\n\n# Code examples\n## Using 'ggpp'\n\nMake a simple plot to label.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy.cars <- mtcars\nmy.cars$cyl <- factor(my.cars$cyl)\n\np1 <- ggplot(my.cars, aes(cyl, mpg)) +\n  geom_boxplot(width = 0.33)\np1\n```\n\n::: {.cell-output-display}\n![](npc-ggplot2-ggpp_files/figure-html/unnamed-chunk-2-1.svg)\n:::\n:::\n\n\nWe add an annotation in the top right corner as has been possible for some time with package 'ggpp'.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 +\n  annotate(geom = \"text_npc\", \n           npcy = \"top\", npcx = \"right\", \n           label = \"a\", size = 6, color = \"red\")\n```\n\n::: {.cell-output-display}\n![](npc-ggplot2-ggpp_files/figure-html/unnamed-chunk-3-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np1 +\n  geom_text_npc(npcy = \"top\", npcx = \"right\", label = \"a\", size = 6, color = \"red\")\n```\n\n::: {.cell-output-display}\n![](npc-ggplot2-ggpp_files/figure-html/unnamed-chunk-4-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np1 +\n  geom_text_npc(npcy = \"top\", npcx = \"right\", label = \"a\", size = 6, color = \"red\") +\n  facet_wrap(facets = vars(vs))\n```\n\n::: {.cell-output-display}\n![](npc-ggplot2-ggpp_files/figure-html/unnamed-chunk-5-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntags.df <- data.frame(labs = c(\"a\", \"b\"), \n                      vs = c(0, 1))\np1 +\n  geom_text_npc(data = tags.df,\n                mapping = aes(label = labs), \n                npcy = \"top\", npcx = \"right\",\n                size = 6, color = \"red\") +\n  facet_wrap(facets = vars(vs))\n```\n\n::: {.cell-output-display}\n![](npc-ggplot2-ggpp_files/figure-html/unnamed-chunk-6-1.svg)\n:::\n:::\n\n\n## Using 'ggpplot2'\n\nThe approach in 'ggplot2' is based on \"protecting\" the value with `I()` the\nidentity function that sets the class to `\"AsIs\"`, which is later detected by\n'ggplot2' code.\n\nFunctions `as_npcx()` and `as_npcy()` map words into numerical values and pass\nthe values to `I()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas_npcy(\"top\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.95\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(as_npcy(\"top\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"AsIs\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nas_npcx(\"right\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.95\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(as_npcx(\"right\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"AsIs\"\n```\n\n\n:::\n:::\n\n\nThe examples only partly work in 'ggplot2' 3.5.0.9000, as it seems that there is\nno support for factors mapped to _x_ or _y_. Here I was able to use an `\"AsIs\"`\nonly for the `y` aesthetic, while for _x_ NPC is not supported.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 +\n  annotate(geom = \"text\",\n           y = as_npcy(\"top\"), x = 3.5, \n           label = \"a\", size = 6, color = \"red\")\n```\n\n::: {.cell-output-display}\n![](npc-ggplot2-ggpp_files/figure-html/unnamed-chunk-9-1.svg)\n:::\n:::\n\nThis case does not yet work with 'ggplot2'.\n \n\n::: {.cell}\n\n```{.r .cell-code}\np1 +\n  geom_text(y = as_npc(\"top\"), x = 3.5, label = \"a\", size = 6, color = \"red\")\n```\n\n::: {.cell-output-display}\n![](npc-ggplot2-ggpp_files/figure-html/unnamed-chunk-10-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np1 +\n  geom_text(y = as_npc(\"top\"), x = 3.4, label = \"a\", size = 6, color = \"red\") +\n  facet_wrap(facets = vars(vs))\n```\n\n::: {.cell-output-display}\n![](npc-ggplot2-ggpp_files/figure-html/unnamed-chunk-11-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntags.df <- data.frame(labs = c(\"a\", \"b\"), \n                      vs = c(0, 1))\np1 +\n  geom_text(data = tags.df,\n            mapping = aes(label = labs), \n            y = as_npc(\"top\"), x = 3.4,\n            size = 6, color = \"red\") +\n  facet_wrap(facets = vars(vs))\n```\n\n::: {.cell-output-display}\n![](npc-ggplot2-ggpp_files/figure-html/unnamed-chunk-12-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntags.df <- data.frame(labs = c(\"a\", \"b\"), \n                      vs = c(0, 1))\np1 +\n  geom_text(data = tags.df,\n            mapping = aes(label = labs), \n            y = as_npc(\"top\"), x = 3.4,\n            size = 6, color = \"red\") +\n  facet_wrap(facets = vars(vs))\n```\n\n::: {.cell-output-display}\n![](npc-ggplot2-ggpp_files/figure-html/unnamed-chunk-13-1.svg)\n:::\n:::\n",
    "supporting": [
      "npc-ggplot2-ggpp_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}