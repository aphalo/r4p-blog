{
  "hash": "5a2879c726ec80678b22b9609b89168f",
  "result": {
    "markdown": "---\ntitle: \"Pairwise labels with 'ggpmisc'\"\nsubtitle: \"Contrasts, multiple comparisons and simple labels\"\nauthor: \"Pedro J. Aphalo\"\ndate: \"2023-08-01\"\ndate-modified: \"2023-08-01\"\nkeywords: [ggplot2 pkg, ggpp pkg, ggpmisc pkg, data labels, plot annotations, pairwise]\ncategories: [Plotting examples]\neditor: \n  markdown: \n    wrap: 72\ncode-fold: true\nformat:\n  html: \n    code-link: true\n    code-tools: true\n---\n\n\n::: callout-warning\n**This page is still a draft. The examples make use of future version 0.5.4 of package\n'ggpp' which is under development and thus not yet available through CRAN. It\ncan be installed from the [git repository at\nGitHub](https://github.com/aphalo/ggpp).**\n\nCode examples will be expanded and the text will be revised as the\ndevelopment of packages 'ggpp' and 'ggpmisc' advances in the next few weeks.\n:::\n\n::: callout-tip\nIn this page most code chunks are \"folded\" so as to decrease the clutter when\nsearching for examples. A few code chunks that are reused across several plots\nare by default unfolded to make them more visible. Above each plot you will find\none or more \"folded\" code chuncks signalled by a small triangle followed by\n\"Code\". Clicking on the triangle \"unfolds\" the code chunk making visible the R\ncode used to produce the plot.\n\nThe code in the chunks can be copied by clicking on the top right\ncorner, where an icon appears when the mouse cursor hovers over the code\nlisting.\n\nThe `</> Code` drop down menu to the right of the page title makes it possible\nto unfold all code chunks and to view the Quarto source of the whole web page.\n\nNames of functions and other R objects are linked to the corresponding on-line\nhelp pages. The names of R extension packages are linked to their documentation\nweb sites when available.\n:::\n\n## Introduction\n\nHere you will find examples of ggplots with labeled segments as used to highlight\npairwise comparisons among factor levels. The labelled segments have been\nadded to the plots with geometries defined in package [ggpp](https://docs.r4photobiology.info/ggpp/) and\nstatistics from package [ggpmisc](https://docs.r4photobiology.info/ggpmisc/) both available at CRAN.\n\n::: callout-important\nOne needs to always check that annotations do not occlude anything\nsignificant, such as observations in the base plot. This needs special\ncare when using annotations together with batch plotting. Either ensure\nthat the scale limits of the base plot are expanded to avoid overlap or\nthat the layer with the equations is the lowest one, i.e., added to the\nplot first.\n:::\n\n## Data labels and plot annotations\n\nData labels add textual information directly related to individual data\npoints (shown as glyphs). Text position in this case is dependent on the\nscales used to represent data points. Text is usually displaced so that\nit does not occlude the glyph representing the data point and when the\nlink to the data point is unclear, this link is signalled with a line\nsegment or arrow. Data labels are distinct from annotations in that they\ncontribute directly to the representation of data on a plot or map.\n\nAnnotations differ from data labels, in that their position is decoupled\nfrom their meaning. Insets can be thought as larger, but still\nself-contained annotations. In most cases the reading of inset tables\nand plots depends only weakly on the plot or map in which they are\nincluded.\n\nIn the case of annotations and insets the designer of a data\nvisualization has the freedom to locate them anywhere, as long as they\ndo not occlude features used to describe data. I will use the term\nannotation irrespective if the \"labels\" are textual or graphical.\n\nThe labelled segments used to highlight pairwise comparisons are a special\ncase as they behave as data labels along the axis onto which an explanatory\nfactor has been mapped, usually _x_, but as annotation along the axis onto\nwhich a continuous numeric variable has been mapped, usually _y_.\n\n## Significance of pairwise comparisons\n\nPairwise comparisons are used with grouped observations, i.e., when a factor\nis mapped to the _x_ (or _y_) aesthetic. Usually observations are summarized\nas mean and standard errors, either as points or columns, or using boxplots.\n\nThere are two approaches in common use to display significance of differences in\nthis type of plot: use of single letters so that columns or points representing groups that\nare significantly different do not have any in common will those not\nsignificantly different from each other share at least one letter. This approach\nhas a long tradition but is being replaced by annotated horizontal bars,\nshowing either _P_-values, asterics, or some other in a label. This second\napproach is easier to read but can result in crowded figures.\n\nStatistically, multiple comparisons are special in that they are not orthogonal\nand thus _P_-values must be adjusted or computed using special procedures.\nUncorrected _t_-tests must be avoided. In case of a factor with more than\ntwo levels, multiple comparisons should be applied only if the overall \nsignificance of the effect of the factor or its interactions are significant.\n\nFrom version 0.5.4 package 'ggpp' includes geometries `geom_text_pairwise()`\nand `geom_label_pairwise()`, that simplify the addition of labelled segments.\n\nLoad and attach the packages.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(ggpmisc)\n```\n:::\n\nMake a simple plot to label.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy.cars <- mtcars\nmy.cars$cyl <- factor(my.cars$cyl)\nmy.cars$name <- rownames(my.cars)\n\np1 <- ggplot(my.cars, aes(cyl, mpg)) +\n  geom_boxplot(width = 0.33)\np1\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-2-1.svg)\n:::\n:::\n\n\nThe first, and simplest example with labelled segments, uses labels to identify\nthe contrasts but, does not use estimates from tests of significance.\n\n::: callout-warning\nIn 'ggplot2', when a factor is mapped to _x_ (or _y_) the values used internally\nare the numerical representation of the levels in the factor, i.e., as `integer`\nvalues starting from 1. Thus, the leftmost factor level on the _x_ axis\ncoresponds to `1`, the second factor level to `2`, and so on, irrespective of\nthe labels.\n:::\n\nWe construct a data frame with the data for text labels.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlabels.df <-\n  data.frame(\n    pair.label = c(\"4 vs. 6 cyl.\", \"4 vs. 8 cyl.\", \"6 vs. 8 cyl.\"),\n    right.tip = c(2, 3, 3),\n    left.tip = c(1, 1, 2),\n    y.bar = c(35.5, 38, 33)\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n p1 +\n   geom_text_pairwise(data = labels.df,\n                      aes(xmin = left.tip, \n                          xmax = right.tip,\n                          y = y.bar,\n                          label = pair.label)) +\n  expand_limits(y = 40)\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-4-1.svg)\n:::\n:::\n\n\nWhile I will use `geom_text_pairwise()` for most examples, I here use \n`geom_label_pairwise()`. Their differences are similar to those between\n`geom_text()` and `geom_label()`. Other examples later in this page can\nbe easily changed to use `geom_label_pairwise()` instead of \n`geom_text_pairwise()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n p1 +\n  geom_label_pairwise(data = labels.df,\n                      aes(xmin = left.tip, \n                          xmax = right.tip,\n                          y = y.bar,\n                          label = pair.label)) +\n  expand_limits(y = 40) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-5-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n p1 +\n  geom_label_pairwise(data = labels.df,\n                      aes(xmin = left.tip, \n                          xmax = right.tip,\n                          y = y.bar,\n                          label = pair.label),\n                      fill = \"black\",\n                      colour = \"white\",\n                      colour.target = \"text\",\n                      segment.linewidth = 0.75) +\n  expand_limits(y = 40)\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-6-1.svg)\n:::\n:::\n\n### Pairwise _t_-test\n\nTo label the bars with _P_-values we can compute them before plotting and build\na suitable data frame.\n\nWe run the test and construct a data frame with the results, adding arbitrary\nvalues for _y_ to avoid overlaps.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nmy.htest <- \n  pairwise.t.test(my.cars$mpg, my.cars$cyl, p.adjust.method = \"holm\")\nmy.htest\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tPairwise comparisons using t tests with pooled SD \n\ndata:  my.cars$mpg and my.cars$cyl \n\n  4       6      \n6 0.00024 -      \n8 2.6e-09 0.00415\n\nP value adjustment method: holm \n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nt.test.df <- data.frame(\n  p.value = as.vector(my.htest$p.value),\n  right.tip = c(2, 3, NA, 3),\n  left.tip = c(1, 1, NA, 2),\n  y.bar = c(35.5, 38, NA, 33)\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n p1 +\n   geom_text_pairwise(data = t.test.df,\n                      aes(xmin = left.tip, \n                          xmax = right.tip,\n                          y = y.bar,\n                          label = ifelse(p.value < 1e-3,\n                                         \"italic(P)~`<`~0.001\",\n                                         sprintf(\"italic(P)~`=`~%.3f\", p.value))),\n                      parse = TRUE,\n                      na.rm = TRUE) +\n  expand_limits(y = 40)\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-8-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n p1 +\n   geom_text_pairwise(data = t.test.df,\n                      aes(xmin = left.tip, \n                          xmax = right.tip,\n                          y = y.bar,\n                          label = ifelse(p.value < 1e-3,\n                                         \"italic(P)~`<`~0.001\",\n                                         sprintf(\"italic(P)~`=`~%.3f\", p.value))),\n                      arrow = grid::arrow(angle = 90,\n                                          length = unit(1, \"mm\"),\n                                          ends = \"both\"),\n                      parse = TRUE,\n                      na.rm = TRUE) +\n  expand_limits(y = 40)\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-9-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n p1 +\n   geom_text_pairwise(data = t.test.df,\n                      aes(xmin = left.tip, \n                          xmax = right.tip,\n                          y = y.bar,\n                          colour = p.value < 0.002,\n                          label = ifelse(p.value < 1e-3,\n                                         \"italic(P)~`<`~0.001\",\n                                         sprintf(\"italic(P)~`=`~%.3f\", p.value))),\n                      arrow = grid::arrow(angle = 90,\n                                          length = unit(1, \"mm\"),\n                                          ends = \"both\"),\n                      parse = TRUE,\n                      na.rm = TRUE) +\n  scale_colour_manual(values = c(\"black\", \"red\"), na.value = NA, guide = \"none\") +\n  expand_limits(y = 40)\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-10-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n p1 +\n   geom_text_pairwise(data = t.test.df,\n                      aes(xmin = left.tip, \n                          xmax = right.tip,\n                          y = y.bar,\n                          colour = p.value < 0.002,\n                          label = ifelse(p.value < 1e-3,\n                                         \"italic(P)~`<`~0.001\",\n                                         sprintf(\"italic(P)~`=`~%.3f\", p.value))),\n                       colour.target = \"all\",\n                       arrow = grid::arrow(angle = 90,\n                                          length = unit(1, \"mm\"),\n                                          ends = \"both\"),\n                      parse = TRUE,\n                      na.rm = TRUE) +\n  scale_colour_manual(values = c(\"black\", \"red\"), na.value = NA, guide = \"none\") +\n  expand_limits(y = 40)\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-11-1.svg)\n:::\n:::\n\n\n### Other uses\n\nGeometries `geom_text_pairwise()` and `geom_label_pairwise()` can be also used\nwhen the variables mapped onto aesthetics _x_ and _y_ are both continuous\nnumeric variables. In this type of plot they can be used to highlight ranges.\n\nI construct a different base plot for labelling.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np2 <-\n  ggplot(my.cars, aes(disp, mpg)) +\n    geom_point()\np2\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-12-1.svg)\n:::\n:::\n\n\nI also construct a new data frame with the data for labelling ranges. In this\ncase as _x_ is numeric, and we set the _x_ values for the segment ends using\nuser-data units (i.e., the values as shown in _x_ axis' tick marks).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nmy.ranges <-\n  data.frame(A = c(50, 400),\n             B = c(200, 500),\n             bar.height = 0,\n             text = c(\"small\", \"large\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np2 +\n  geom_hline(yintercept = 0, colour = \"grey\") +\n  geom_text_pairwise(data = my.ranges,\n                     aes(xmin = A, xmax = B,\n                     y = bar.height, label = text)) +\n  expand_limits(y = 0) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-14-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np2 +\n  geom_hline(yintercept = 0, colour = \"grey\", linewidth = 1) +\n  geom_text_pairwise(data = my.ranges,\n                     aes(xmin = A, xmax = B,\n                     y = bar.height, label = text),\n                     arrow = grid::arrow(ends = \"both\", length = unit(2, \"mm\"))) +\n  expand_limits(y = 0) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-15-1.svg)\n:::\n:::\n",
    "supporting": [
      "pairwise-labels_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}