{
  "hash": "bf0a6e80e28040b66b700185cb7f12e7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Pairwise labels with 'ggpp'\"\nsubtitle: \"Contrasts, multiple comparisons and simple labels\"\nauthor: \"Pedro J. Aphalo\"\ndate: \"2023-08-01\"\ndate-modified: \"2024-04-22\"\nkeywords: [ggplot2 pkg, ggpp pkg, ggpmisc pkg, data labels, plot annotations, pairwise]\ncategories: [Plotting examples]\neditor: \n  markdown: \n    wrap: 72\ncode-fold: true\nformat:\n  html: \n    code-link: true\n    code-tools: true\nabstract: |\n  Example R code for plots with pairwise labels created with `geom_text_pairwise()` and `geom_label_pairwise()` from R package 'ggpp' demonstrating their use to display the results from multiple comparison tests, fitted contrasts, and ranges.\n---\n\n\n::: callout-warning\n**Version 0.5.4 of package 'ggpp' available through CRAN is required.**\n\nVersion 0.5.4 of package 'ggpp' is the first to include `geom_text_pairwise()`\nand `geom_label_pairwise()` whose use is exemplified by this page.\n:::\n\n::: callout-tip\nIn this page most code chunks are \"folded\" so as to decrease the clutter when\nsearching for examples. A few code chunks that are reused across several plots\nare by default unfolded to make them more visible. Above each plot you will find\none or more \"folded\" code chuncks signalled by a small triangle followed by\n\"Code\". Clicking on the triangle \"unfolds\" the code chunk making visible the R\ncode used to produce the plot.\n\nThe code in the chunks can be copied by clicking on the top right\ncorner, where an icon appears when the mouse cursor hovers over the code\nlisting.\n\nThe `</> Code` drop down menu to the right of the page title makes it possible\nto unfold all code chunks and to view the Quarto source of the whole web page.\n\nNames of functions and other R objects are linked to the corresponding on-line\nhelp pages. The names of R extension packages are linked to their documentation\nweb sites when available.\n:::\n\n# Introduction\n\nHere you will find examples of ggplots with labeled segments as used to\nhighlight pairwise comparisons among factor levels. The labelled segments have\nbeen added to the plots with geometries defined in package\n[ggpp](https://docs.r4photobiology.info/ggpp/) available at CRAN.\n\nPackage [ggpmisc](https://docs.r4photobiology.info/ggpmisc/) imports and \nreexports all definitions from [ggpp](https://docs.r4photobiology.info/ggpp/)\nas well as from [ggplot2](https://ggplot2.tidyverse.org/).\n\n::: callout-important\nOne needs to always check that annotations do not occlude anything\nsignificant, such as observations in the base plot. This needs special\ncare when using annotations together with batch plotting. Either ensure\nthat the scale limits of the base plot are expanded to avoid overlap or\nthat the layer with the equations is the lowest one, i.e., added to the\nplot first.\n:::\n\n# Data labels and plot annotations\n\nData labels add textual information directly related to individual data\npoints (shown as glyphs). Text position in this case is dependent on the\nscales used to represent data points. Text is usually displaced so that\nit does not occlude the glyph representing the data point and when the\nlink to the data point is unclear, this link is signalled with a line\nsegment or arrow. Data labels are distinct from annotations in that they\ncontribute directly to the representation of data on a plot or map.\n\nAnnotations differ from data labels, in that their position is decoupled\nfrom their meaning. Insets can be thought as larger, but still\nself-contained annotations. In most cases the reading of inset tables\nand plots depends only weakly on the plot or map in which they are\nincluded.\n\nIn the case of annotations and insets the designer of a data\nvisualization has the freedom to locate them anywhere, as long as they\ndo not occlude features used to describe data. I will use the term\nannotation irrespective if the \"labels\" are textual or graphical.\n\nThe labelled segments used to highlight pairwise comparisons are a special\ncase as they behave as data labels along the axis onto which an explanatory\nfactor has been mapped, usually _x_, but as annotation along the axis onto\nwhich a continuous numeric variable has been mapped, usually _y_.\n\n# Pairwise comparisons and labels\n\nPairwise comparisons are used with grouped observations, i.e., when a factor\nis mapped to the _x_ (or _y_) aesthetic. Usually observations are summarized\nas mean and standard errors, either as points or columns, or using boxplots.\n\nThere are two approaches in common use to display significance of differences in\nthis type of plot: use of single letters so that columns or points representing groups that\nare significantly different do not have any in common will those not\nsignificantly different from each other share at least one letter. This approach\nhas a long tradition but is being replaced by annotated horizontal bars,\nshowing either _P_-values, asterics, or some other in a label. This second\napproach is easier to read but can result in crowded figures.\n\nStatistically, multiple comparisons are special in that they are not orthogonal\nand thus _P_-values must be adjusted or computed using special procedures.\nUncorrected _t_-tests must be avoided. In case of a factor with more than\ntwo levels, multiple comparisons should be applied only if the overall \nsignificance of the effect of the factor or its interactions are significant.\n\nFrom version 0.5.4 package 'ggpp' includes geometries `geom_text_pairwise()`\nand `geom_label_pairwise()`, that simplify the addition of labelled segments.\n\nLoad and attach the packages.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(ggpmisc)\nlibrary(gginnards) # for debugging\n```\n:::\n\n\n## Simple labelling examples\n\nMake a simple plot to label.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy.cars <- mtcars\nmy.cars$cyl <- factor(my.cars$cyl)\n\np1 <- ggplot(my.cars, aes(cyl, mpg)) +\n  geom_boxplot(width = 0.33)\np1\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-2-1.svg)\n:::\n:::\n\n\nThe first, and simplest example with labelled segments, uses labels to identify\nthe contrasts but, does not use estimates from tests of significance.\n\n::: callout-warning\nIn 'ggplot2', when a factor is mapped to _x_ (or _y_) the values used internally\nare the numerical representation of the levels in the factor, i.e., as `integer`\nvalues starting from 1. Thus, the leftmost factor level on the _x_ axis\ncoresponds to `1`, the second factor level to `2`, and so on, irrespective of\nthe labels.\n\n**In this page labels are in all examples based on data assembled in user code. It\nis crucial to make sure that the values mapped to `xmin` and `xmax` and to\n`label` are correct and consistent.**\n:::\n\nWe construct a data frame with the data for text labels.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlabels.df <-\n  data.frame(\n    pair.label = c(\"4 vs. 6 cyl.\", \"4 vs. 8 cyl.\", \"6 vs. 8 cyl.\"),\n    right.tip = c(2, 3, 3),\n    left.tip = c(1, 1, 2),\n    y.bar = c(35.5, 38, 33)\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n p1 +\n   geom_text_pairwise(data = labels.df,\n                      aes(xmin = left.tip, \n                          xmax = right.tip,\n                          y = y.bar,\n                          label = pair.label)) +\n  expand_limits(y = 40)\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-4-1.svg)\n:::\n:::\n\n\nWhile I will use `geom_text_pairwise()` for most examples, I here use\n`geom_label_pairwise()`. Their differences are similar to those between\n`ggplot2::geom_text()` and `ggplot2::geom_label()`. Other examples later in this\npage can be easily changed to use `geom_label_pairwise()` instead of\n`geom_text_pairwise()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n p1 +\n  geom_label_pairwise(data = labels.df,\n                      aes(xmin = left.tip, \n                          xmax = right.tip,\n                          y = y.bar,\n                          label = pair.label),\n                      segment.linewidth = 0.5,\n                      linewidth = 0.5) +\n  expand_limits(y = 40) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-5-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n p1 +\n  geom_label_pairwise(data = labels.df,\n                      aes(xmin = left.tip, \n                          xmax = right.tip,\n                          y = y.bar,\n                          label = pair.label),\n                      fill = \"black\",\n                      colour = \"white\",\n                      colour.target = \"text\",\n                      segment.linewidth = 0.75) +\n  expand_limits(y = 40)\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-6-1.svg)\n:::\n:::\n\n\n## Labelling with dodged groups\n\nFor a change from the examples above we use `stat_summary()` with `geom = \"col\"` to obtain a column plot. In this case, we have two groupings, created by the mappings to the `x` and `fill` aesthetics. We use `position = position_dodge2()` to avoid the overlap of the columns.\n\n::: callout-tip\nWe can use `geom_debug()` from package 'gginnards' to check the values returned by `stat_summary()`. The code below is not run.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(factor(cyl), mpg, fill = factor(vs))) +\n  # adds layer\n  stat_summary(fun = mean, \n               position = position_dodge2(preserve = \"single\", width = 1), \n               width = 1, \n               geom = \"col\") +\n  # prints data to the console by setting geom = \"debug\"\n  stat_summary(fun = mean, \n               position = position_dodge2(preserve = \"single\", width = 1), \n               width = 1, \n               geom = \"debug\")\n```\n:::\n\n\n:::\n\nUsing the pairwise geometries together with `position_dodge()` requires some ingenuity when creating the data frames. When a factor is mapped to _x_, the positions for the levels along the _x_ axis, increase by one, starting at one. So in this case the tick labelled \"4\" corresponds to an `x` value of 1, \"6\" to 2, and \"8\" to 3. Be aware, though, that in this case the data are split into five groups. \n\n_Function `position = position_dodge2()` is not passed as argument in the calls to `geom_label_pairwise()`!_\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(factor(cyl), mpg, fill = factor(vs))) +\n  stat_summary(fun = mean, \n               position = position_dodge2(preserve = \"single\", width = 1), \n               width = 1, \n               geom = \"col\") +\n  geom_label_pairwise(data = data.frame(xmin = c(1, 1, 2), \n                                        xmax = c(2, 3, 3), \n                                        label = rep(\"test1\", 3), \n                                        y = 31 + (0:2) * 1.75), # start + shifts\n                      mapping = aes(xmin = xmin, xmax = xmax, label = label, y = y),\n                      fill = \"yellow\"\n  ) +\n  geom_label_pairwise(data = data.frame(xmin = 0.75 + (0:1), \n                                        xmax = 1.25 + (0:1), \n                                        label = rep(\"test2\", 2), \n                                        y = c(28.5, 22.2)), # values given directly\n                      mapping = aes(xmin = xmin, xmax = xmax, label = label, y = y)\n  ) +\n  scale_fill_grey()\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-8-1.svg)\n:::\n:::\n\n\nIf we change the width of the columns, we need to adjust the coordinates of the ends of the pairwise bars so that they match the centre of the columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(factor(cyl), mpg, fill = factor(vs))) +\n  stat_summary(fun = mean, \n               position = position_dodge2(preserve = \"single\", width = 1), \n               width = 0.75, # 1 -> 0.75\n               geom = \"col\") +\n  geom_label_pairwise(data = data.frame(xmin = c(1, 1, 2), \n                                        xmax = c(2, 3, 3), \n                                        label = rep(\"test1\", 3), \n                                        y = 31 + (0:2) * 1.75),\n                      mapping = aes(xmin = xmin, xmax = xmax, label = label, y = y),\n                      fill = \"yellow\"\n  ) +\n  geom_label_pairwise(data = data.frame(xmin = 0.8 + (0:1), # 0.75 -> 0.8\n                                        xmax = 1.2 + (0:1), # 1.15 -> 1.2\n                                        label = rep(\"test2\", 2), \n                                        y = c(28.5, 22.2)),\n                      mapping = aes(xmin = xmin, xmax = xmax, label = label, y = y)\n  ) +\n  scale_fill_grey()\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-9-1.svg)\n:::\n:::\n\n## Pairwise _t_-test\n\nTo label the bars with _P_-values we can compute them before plotting and build\na suitable data frame.\n\nWe run the test and construct a data frame with the results, adding arbitrary\nvalues for _y_ to avoid overlaps.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nmy.htest <- \n  pairwise.t.test(my.cars$mpg, my.cars$cyl, p.adjust.method = \"holm\")\nmy.htest\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tPairwise comparisons using t tests with pooled SD \n\ndata:  my.cars$mpg and my.cars$cyl \n\n  4       6      \n6 0.00024 -      \n8 2.6e-09 0.00415\n\nP value adjustment method: holm \n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nt.test.df <- data.frame(\n  p.value = as.vector(my.htest$p.value),\n  right.tip = c(2, 3, NA, 3),\n  left.tip = c(1, 1, NA, 2),\n  y.bar = c(35.5, 38, NA, 33)\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n p1 +\n   geom_text_pairwise(data = t.test.df,\n                      aes(xmin = left.tip, \n                          xmax = right.tip,\n                          y = y.bar,\n                          label = ifelse(p.value < 1e-3,\n                                         \"italic(P)~`<`~0.001\",\n                                         sprintf(\"italic(P)~`=`~%.3f\", p.value))),\n                      parse = TRUE,\n                      na.rm = TRUE) +\n  expand_limits(y = 40)\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-11-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n p1 +\n   geom_text_pairwise(data = t.test.df,\n                      aes(xmin = left.tip, \n                          xmax = right.tip,\n                          y = y.bar,\n                          label = ifelse(p.value < 1e-3,\n                                         \"italic(P)~`<`~0.001\",\n                                         sprintf(\"italic(P)~`=`~%.3f\", p.value))),\n                      arrow = grid::arrow(angle = 90,\n                                          length = unit(1, \"mm\"),\n                                          ends = \"both\"),\n                      parse = TRUE,\n                      na.rm = TRUE) +\n  expand_limits(y = 40)\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-12-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n p1 +\n   geom_text_pairwise(data = t.test.df,\n                      aes(xmin = left.tip, \n                          xmax = right.tip,\n                          y = y.bar,\n                          colour = p.value < 0.002,\n                          label = ifelse(p.value < 1e-3,\n                                         \"italic(P)~`<`~0.001\",\n                                         sprintf(\"italic(P)~`=`~%.3f\", p.value))),\n                       arrow = grid::arrow(angle = 90,\n                                          length = unit(1, \"mm\"),\n                                          ends = \"both\"),\n                      parse = TRUE,\n                      na.rm = TRUE) +\n  scale_colour_manual(values = c(\"black\", \"red\"), na.value = NA, guide = \"none\") +\n  expand_limits(y = 40)\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-13-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n p1 +\n   geom_text_pairwise(data = t.test.df,\n                      aes(xmin = left.tip, \n                          xmax = right.tip,\n                          y = y.bar,\n                          colour = p.value < 0.002,\n                          label = ifelse(p.value < 1e-3,\n                                         \"italic(P)~`<`~0.001\",\n                                         sprintf(\"italic(P)~`=`~%.3f\", p.value))),\n                      arrow = grid::arrow(angle = 90,\n                                          length = unit(1, \"mm\"),\n                                          ends = \"both\"),\n                      colour.target = \"text\",\n                      parse = TRUE,\n                      na.rm = TRUE) +\n  scale_colour_manual(values = c(\"black\", \"red\"), na.value = NA, guide = \"none\") +\n  expand_limits(y = 40)\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-14-1.svg)\n:::\n:::\n\n\n## Pairwise Wilcox test\n\nThe object returned by `pairwise.wilcox.text()` has the same structure as that\nreturned by `pairwise.t.test()` so we only need to change the names.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# warnings about ties have been silenced\nmy.w.test <- \n  pairwise.wilcox.test(my.cars$mpg, my.cars$cyl, p.adjust.method = \"holm\")\nmy.w.test\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tPairwise comparisons using Wilcoxon rank sum test with continuity correction \n\ndata:  my.cars$mpg and my.cars$cyl \n\n  4       6     \n6 0.0013  -     \n8 8.3e-05 0.0013\n\nP value adjustment method: holm \n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nwilcox.test.df <- data.frame(\n  p.value = as.vector(my.w.test$p.value),\n  right.tip = c(2, 3, NA, 3),\n  left.tip = c(1, 1, NA, 2),\n  y.bar = c(35.5, 38, NA, 33)\n)\n```\n:::\n\nI show only the plot for the first _t_-test example, using identical code\nexcept for the name of the data frame. All other examples will also work \nwithout changes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n p1 +\n   geom_text_pairwise(data = wilcox.test.df,\n                      aes(xmin = left.tip, \n                          xmax = right.tip,\n                          y = y.bar,\n                          label = ifelse(p.value < 1e-3,\n                                         \"italic(P)~`<`~0.001\",\n                                         sprintf(\"italic(P)~`=`~%.3f\", p.value))),\n                      parse = TRUE,\n                      na.rm = TRUE) +\n  expand_limits(y = 40)\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-16-1.svg)\n:::\n:::\n\n\n## Fitted contrasts\n\nPackage 'gmodels' provides methods for fitting arbitrary contrasts.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(gmodels)\n```\n:::\n\n\nFitting contrasts individually, we can decide which contrasts are of a priori\ninterest and limit testing to these. As for _t_-test and Wicox-test, _P_-values\nneed to be adjusted, but the adjustment in this case is applied separately from\nthe fitting.\n\nTo use function `fit.contrasts()` from package 'gmodels' we start by fitting\na linear model to the same data as used for the examples above.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nmpg.cyl.lm <- lm(mpg ~ cyl, data = my.cars)\nanova(mpg.cyl.lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAnalysis of Variance Table\n\nResponse: mpg\n          Df Sum Sq Mean Sq F value    Pr(>F)    \ncyl        2 824.78  412.39  39.697 4.979e-09 ***\nResiduals 29 301.26   10.39                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\nWe next fit de contrasts and extract the _P_-values from the returned value.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nfit.contrast.df <-\n  data.frame(left.tip = 1:2,\n             right.tip = 2:3,\n             y.bar = c(36, 23),\n             p.value = p.adjust(\n               c(fit.contrast(mpg.cyl.lm, varname = \"cyl\", coeff = c(-1, 1, 0))[4],\n                 fit.contrast(mpg.cyl.lm, varname = \"cyl\", coeff = c(0, -1, 1))[4])\n             ))\n```\n:::\n\n\nAlthough I could have passed a `matrix` to parameter `coeff` to fit both\ncontrasts simultaneously I fitted them one by one for clarity.\n\nI once again reuse unchanged except for the name of the data frame, the code\nused above for the _t_-test and Wilcox-tests examples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n p1 +\n   geom_text_pairwise(data = fit.contrast.df,\n                      aes(xmin = left.tip, \n                          xmax = right.tip,\n                          y = y.bar,\n                          label = ifelse(p.value < 1e-3,\n                                         \"italic(P)~`<`~0.001\",\n                                         sprintf(\"italic(P)~`=`~%.3f\", p.value))),\n                      parse = TRUE,\n                      na.rm = TRUE) +\n  expand_limits(y = 40)\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-20-1.svg)\n:::\n:::\n\n\nFunction `fit.contrast()` can be used to fit in addition to pairwise contrasts,\nmore complex contrast involving more than two factor levels. Currently, no\ngeometry can directly add them to a plot as a single layer. One needs\nto build them layer by layer (not shown).\n\n## Multiple comparisons\n\nPackage 'multicomp' implements different multiple comparison methods, using\na flexible and generally applicable approach.\n\n::: callout-tip\nStatistic `stat_multcomp()` from package [ggpmisc](https://docs.r4photobiology.info/ggpmisc/) automates the computation of adjusted _P_-values and formatted character strings to be parsed into R's plotmath expressions, for the cases of \"Tukey\" and \"Dunnet\" contrasts. See examples in page [Multiple comparisons with 'ggpmisc'](multcomp.qmd).\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(multcomp)\n```\n:::\n\n\nAs with package 'gmodels' we need to first fit a linear or other model to the\ndata. Here I reuse the fitted model from the previous section. The next example\ndemonstrates the use of function `glht()` (General Linear Hypotheses Tests) with\nTukey's method for pairwise multiple comparisons.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nmpg.cyl.glht <- glht(model = mpg.cyl.lm, linfct = mcp(cyl = \"Tukey\"), rhs = 0)\nsummary(mpg.cyl.glht)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\t Simultaneous Tests for General Linear Hypotheses\n\nMultiple Comparisons of Means: Tukey Contrasts\n\n\nFit: lm(formula = mpg ~ cyl, data = my.cars)\n\nLinear Hypotheses:\n           Estimate Std. Error t value Pr(>|t|)    \n6 - 4 == 0   -6.921      1.558  -4.441   <0.001 ***\n8 - 4 == 0  -11.564      1.299  -8.905   <0.001 ***\n8 - 6 == 0   -4.643      1.492  -3.112   0.0113 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n(Adjusted p values reported -- single-step method)\n```\n\n\n:::\n:::\n\n\nWe need as above to build a data frame with the data for the pairwise labels,\nin this case extracting the _P_-value estimates from the object returned by\n`summary()`.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nmultcomp.df <- \n  data.frame(\n    p.value = summary(mpg.cyl.glht)$test$pvalues,\n    left.tip = c(1, 1, 2),\n    right.tip = c(2, 3, 3),\n    y.bar = c(35.5, 38, 33)\n  )\n```\n:::\n\n\nI once again reuse unchanged the code used above for the _t_-test and \nWilcox-tests examples except for the name of the data frame passed as\nargument to `data`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n p1 +\n   geom_text_pairwise(data = multcomp.df,\n                      aes(xmin = left.tip, \n                          xmax = right.tip,\n                          y = y.bar,\n                          label = ifelse(p.value < 1e-3,\n                                         \"italic(P)~`<`~0.001\",\n                                         sprintf(\"italic(P)~`=`~%.3f\", p.value))),\n                      parse = TRUE,\n                      na.rm = TRUE) +\n  expand_limits(y = 40)\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-24-1.svg)\n:::\n:::\n\n\nAs is the case with function `fit.contrasts()` used in the previous section,\nfunction `glht()` can be used to fit many different contrasts, pairwise or\notherwise, with suitable corrections for multiple comparisons.  Currently, no\ngeometry can directly add labelled segments for contrasts that are not pairwise.\nOne needs to build them layer by layer, labels and segments (not shown).\n\n## Other uses\n\nAlthough labelled segments are most commonly used to report the results\nof pairwise significance tests, several other uses are possible. An obvious\none is to highlight a range of values for a continuous variable or a\ngroup of succesive factors levels.\n\nGeometries `geom_text_pairwise()` and `geom_label_pairwise()`, used in the\nexamples above with factors, can be also used\nwhen the variables mapped onto aesthetics _x_ and _y_ are both continuous. \n\nIn this section I show examples of their use to highlight ranges of values\nof a continuos variable from the same data set. I start by constructing a \nsuitable base plot to use for labelling examples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np2 <-\n  ggplot(my.cars, aes(disp, mpg)) +\n  geom_point()+\n  geom_hline(yintercept = 0, colour = \"grey90\", linewidth = 1.2) +\n  theme_bw()\np2\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-25-1.svg)\n:::\n:::\n\n\nI construct a data frame with the data for labelling ranges. In this\ncase as _x_ is numeric, and we set the _x_ values for the segment tips using\nuser-data units (i.e., the values as shown in _x_ axis' tick marks).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nmy.ranges <-\n  data.frame(A = c(50, 200, 400),\n             B = c(200, 400, 500),\n             bar.height = 0,\n             text = c(\"small\", \"medium\", \"large\"))\n```\n:::\n\n\nThe code is very similar to that used for the pairwise examples in previous\nsections. The main change is that I used different names for the columns of\nthe data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np2  +\n  geom_text_pairwise(data = my.ranges,\n                     aes(xmin = A, \n                         xmax = B,\n                         y = bar.height, \n                         label = text,\n                         colour = text),\n                     segment.linewidth = 1) +\n  scale_colour_discrete(guide = \"none\") +\n  expand_limits(y = 0) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-27-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np2 +\n  geom_text_pairwise(data = my.ranges,\n                     aes(xmin = A, \n                         xmax = B,\n                         y = bar.height, \n                         label = text),\n                     arrow = grid::arrow(ends = \"both\", length = unit(2, \"mm\"))) +\n  expand_limits(y = 0) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](pairwise-labels_files/figure-html/unnamed-chunk-28-1.svg)\n:::\n:::\n",
    "supporting": [
      "pairwise-labels_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}