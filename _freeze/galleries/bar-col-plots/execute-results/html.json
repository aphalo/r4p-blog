{
  "hash": "1ccbe231e557144c21260bb35e3ef4c8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data labels in bar plots with 'ggpp'\"\nsubtitle: \"Nudging labels in stacked and dodged bars or columns\" \nauthor: \"Pedro J. Aphalo\"\ndate: \"2023-02-25\"\ndate-modified: \"2023-02-25\"\nkeywords: [ggplot2 pkg, ggpp pkg, ggrepel pkg, bar plot, column plot, data labels, plot annotations]\ncategories: [Plotting examples]\nabstract: |\n  Example R code for plots with labels using position functions from package [ggpp](https://docs.r4photobiology.info/ggpp) that combine the actions of two separate position functions available in package [ggplot2](https://ggplot2.tidyverse.org/), such as simultaneous use of stack and nudge and dodge and nudge. The examples show how to easily add labels to stacked and dodged bar plots retaining full control of the labels' positioning.\neditor: \n  markdown: \n    wrap: 72\nformat:\n  html: \n    code-link: true\n    code-tools: true\n---\n\n\n::: callout-tip\nIn this page code chunks are \"folded\" so as to decrease the clutter when\nsearching for examples. Above each plot you will find a small triangle\nfollowed by \"Code\". Clicking on the triangle \"unfolds\" the code chunk\nmaking visible the R code used to produce the plot. Except for the\nloading of packages shown in section **Preliminaries** code examples are\nin most cases self contained. When they are not, this is indicated by a\ncomment.\n\nFor simplicity, whenever possible I use base R functions instead of\ncontributed R packages. For those packages used only in specific\nexamples I use colon notation to indicate the 'package'.\n\nAll \"words\" defined in base R or in extension packages are linked to the\ncorresponding HTML-rendered help pages.\n\nThe code in the chunks can be copied by clicking on the top right\ncorner, where an icon appears when the mouse cursor hovers over the code\nlisting.\n:::\n\n## Data labels and plot annotations\n\nData labels add textual information directly related to individual data\n\"points\", in this case bar and column segments (shown as glyphs). Text position\nin this case is dependent on the scales used to represent data. Text is\nfrequently displaced so that it does not occlude important plot components and\nwhen the link to the bar or column is unclear, this link is signaled with a line\nsegment or arrow. Data labels are distinct from annotations in that they\ncontribute directly to the representation of data on a plot or map.\n\n## Postion functions\n\nIn column and bar plots, and more generally when either _x_ or _y_ is a discrete\nfactor very frequently functions `position_stack()`, `position_fill()`, \n`position_dodge()`, `position_dodge2()` or `position_jitter()` are used to\nmodify the location of the bars, columns or other geometries. The creates a\ndifficulty because we usually would like to nudge the position of labels. This\ncan be achieved with new position functions from 'ggpp'.\n\nAn additional consideration is keeping in `data` suitable coordinates for\ndrawing a connecting segment or arrow between the displaced bar and an \nadditionally nudged position for the label or text.\n\nAll the position functions described in this section are compatible with most\ngeometries from ggpplot2 and extensions. However, only those from packages\n‘ggpp’ and ‘ggrepel’ (> 0.9.1) plot segments and arrows linking original and\ndisplaced positions as saved by these position functions.\n\n## Preliminaries\n\nThe code used is shown on-demand above each plot and can be copied. We\nfirst load the packages we will use.\n\nWhen package 'ggpmisc' is loaded and attached, packages 'ggpp' and\n'ggplot2' are also attached. The only function from 'ggplot2' that is\nredefined by 'ggpp' is `annotate()`, which remains backwards compatible\nwith 'ggplot2'.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(ggpp)\nlibrary(ggrepel)\n# library(dplyr)\n```\n:::\n\n\n## Bar and column plots\n\n### Simple examples\n\nSome simple artificial data.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n df <- data.frame(x1 = c(1, 2, 1, 3, -1),\n                  x2 = c(\"a\", \"a\", \"b\", \"b\", \"b\"),\n                  grp = c(\"A\", \"B\", \"C\", \"D\", \"E\"))\n```\n:::\n\n\nThe first few examples are graphically very simple, but very difficult to create\nwithin 'ggplot2' without manual tweaking. The combined position functions\nfrom 'ggpp' simplify the use of data labels together with stacked or dodged columns\nand bars.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = df, aes(x1, x2, group = grp)) +\n   geom_col(aes(fill = grp), width = 0.8,\n            position = position_dodge()) +\n   geom_vline(xintercept = 0) +\n   geom_text(\n     aes(label = grp),\n     position = position_dodgenudge(x = 0.09, \n                                    direction = \"split\", \n                                    width = 0.8)) +\n   theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](bar-col-plots_files/figure-html/unnamed-chunk-4-1.svg){fig-align='center'}\n:::\n:::\n\n\nAfter swapping the _x_ and _y_ mappings, we need to also adjust the arguments\nused for nudging.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n ggplot(data = df, aes(x2, x1, group = grp)) +\n   geom_col(aes(fill = grp), width = 0.75,\n            position = position_dodge(width = 0.75)) +\n   geom_hline(yintercept = 0) +\n   geom_text(aes(label = grp),\n             position = position_dodgenudge(y = 0.1,\n                                            direction = \"split\",\n                                            width = 0.75),\n             size = 3) +\n   theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](bar-col-plots_files/figure-html/unnamed-chunk-5-1.svg){fig-align='center'}\n:::\n:::\n\n\nNudging can be applied along the bar or sideways, or both simultaneously.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n ggplot(data = df, aes(x1, x2, group = grp)) +\n   geom_col(aes(fill = grp), width = 0.5) +\n   geom_vline(xintercept = 0) +\n   geom_text(\n     aes(label = grp),\n     position = position_stacknudge(vjust = 0.5, y = 0.33)) +\n   theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](bar-col-plots_files/figure-html/unnamed-chunk-6-1.svg){fig-align='center'}\n:::\n:::\n\n\nIf we use `position_fill()` for drawing the columns, we need to use the\nmatching `position_fillnudge()` for the data labels.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n ggplot(data = subset(df, x1 >= 0), aes(x2, x1, group = grp)) +\n   geom_col(aes(fill = grp), width=0.5, position = position_fill()) +\n   geom_vline(xintercept = 0) +\n   geom_text(\n     aes(label = grp),\n     position = position_fillnudge(vjust = 1, y = -0.05)) +\n   theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](bar-col-plots_files/figure-html/unnamed-chunk-7-1.svg){fig-align='center'}\n:::\n:::\n\n\nUsing a repulsive geom from package 'ggrepel' together with `postion_stack_nudge()` from 'ggpp' overlaps can usually be avoided.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf <- tibble::tribble(\n  ~y, ~x, ~grp,\n  \"a\", 1,  \"some long name\",\n  \"a\", 2,  \"other name\",\n  \"b\", 1,  \"other different long name\",\n  \"b\", 3,  \"another name\",\n  \"b\", -1, \"some long name\"\n)\n\nggplot(data = df, aes(x, y, group = grp)) +\n  geom_col(aes(fill = grp), width=0.5) +\n  geom_vline(xintercept = 0) +\n  geom_label_repel(aes(label = grp),\n                   position = position_stacknudge(vjust = 0.5, y = 0.4),\n                   label.size = NA) +\n  scale_fill_discrete(guide = \"none\")\n```\n\n::: {.cell-output-display}\n![](bar-col-plots_files/figure-html/unnamed-chunk-8-1.svg){fig-align='center'}\n:::\n:::\n\n\nIn the previous example repulsion prevented overlap, while here we manually \ndivided the label text into two lines. This made is possible to use `geom_label_s()`\nalso from 'ggpp', similar to `geom_label()` from 'ggplot2', but capable of plotting\nsegments or arrows based on position displacements.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf <- tibble::tribble(\n  ~y, ~x, ~grp,\n  \"a\", 1,  \"some long name\",\n  \"a\", 2,  \"other name\",\n  \"b\", 1,  \"other different\\nlong name\",\n  \"b\", 3,  \"another name\",\n  \"b\", -1, \"some long name\"\n)\n\nggplot(data = df, aes(x, y, group = grp)) +\n  geom_col(aes(fill = grp), width=0.5, show.legend = FALSE) +\n  geom_vline(xintercept = 0) +\n  geom_label_s(aes(label = grp),\n               linewidth = 0,\n               position = position_stacknudge(vjust = 0.5, y = 0.31)) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](bar-col-plots_files/figure-html/unnamed-chunk-9-1.svg){fig-align='center'}\n:::\n:::\n\n\nEven a small amount of nudging is enough when justification is based on\n`\"position\"`displacement, the default in `geom_text_s()` and `geom_label_s()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = df, aes(x = y, y = x, group = grp)) +\n  geom_col(aes(fill = grp), width = 0.33, show.legend = FALSE) +\n  geom_vline(xintercept = 0) +\n  geom_label_s(aes(label = grp),\n               linewidth = 0,\n               position = position_stacknudge(vjust = 0.5, x = 0.05)) +\n  theme_dark()\n```\n\n::: {.cell-output-display}\n![](bar-col-plots_files/figure-html/unnamed-chunk-10-1.svg){fig-align='center'}\n:::\n:::\n\n\nIn a stacked frequency or counts bar plot it is difficult to read the partial\ncounts for each stacked segment: we need to mentally subtract two values\nread from the scale. We can add labels with these values using \n`position_stacknudge()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# This is modified from the examples for geom_bar()\n# We add labels just below the top of each part with partial counts\nggplot(mpg, aes(class)) + \n  geom_bar(aes(fill = drv)) +\n  geom_text(aes(label = after_stat(count), y = after_stat(count), group = drv),\n            position = position_stacknudge(vjust = 1, y = -1.1),\n            size = 2.7,\n            stat = \"count\")\n```\n\n::: {.cell-output-display}\n![](bar-col-plots_files/figure-html/unnamed-chunk-11-1.svg){fig-align='center'}\n:::\n:::\n\n\nWhen flipping the orientation of a stacked plot we may want to reverse the order of\nstacking (so that it is consistent with the legend or key).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# This is modified from the examples for geom_bar()\n# To reverse the order of stacking we need to  position_stack() explicitly\n# reversing the order in both geoms, so that the positions match:\nggplot(mpg, aes(y = class)) +\n  geom_bar(aes(fill = drv), position = position_stack(reverse = TRUE)) +\n  geom_text(aes(label = after_stat(count), x = after_stat(count), group = drv),\n            position = position_stacknudge(vjust = 1, x = -1.1, reverse = TRUE),\n            size = 2.7,\n            stat = \"count\") +\n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](bar-col-plots_files/figure-html/unnamed-chunk-12-1.svg){fig-align='center'}\n:::\n:::\n",
    "supporting": [
      "bar-col-plots_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}