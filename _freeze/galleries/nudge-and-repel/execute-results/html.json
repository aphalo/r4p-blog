{
  "hash": "dc826cc0186c4009fb5d80671da7eaf6",
  "result": {
    "markdown": "---\ntitle: \"Nudging + repulsion\"\nsubtitle: \"Data labels using 'ggrepel' together with 'ggpp'\"\nauthor: \"Pedro J. Aphalo\"\ndate: \"2023-02-28\"\ndate-modified: \"2023-07-25\"\ncategories: [Plotting examples]\nkeywords: [data labels, ggplot2 pkg, ggpp pkg, ggrepel pkg]\nformat:\n  html: \n    code-link: true\n    code-tools: true\n---\n\n\n\n\n## Introduction\n\nThe very popular R package 'ggrepel' does a great job at avoiding\noverlaps among data labels and between them and observations plotted as\npoints. A difficulty that stems from the use of an algorithm based on\nrandom displacements is that the final location of the data labels can\nbecome more disordered than desirable. In addition when including smooth\nregression lines the data labels may partly occlude the fitted line\nand/or the confidence band.\n\nPackage 'ggpp' defines new position functions that save the starting\nposition like `position_nudge_repel()` does but come in multiple\nflavors. Their use together with repulsive geometries from 'ggrepel'\nmakes it possible to give to the data labels an initial \"push\" in a\nnon-random direction. This helps a lot, much more than what I expect\ninitially, in obtaining a more orderly displacement by repulsion of the\ndata labels away from a cloud of observations or a line.\n\nBecause of the naming convention used, the new position functions remain\nfully compatible with all geometries that have a formal parameter\n`position`. However, most examples below use geometries from packages\n'ggrepel' or 'ggpp' to create a plot layer containing data labels as\ncurrently geoms from these packages can draw connecting segments or\narrows between the original and displaced positions.\n\n## Preliminaries\n\nAs we will use text and labels on the plotting area we change the\ndefault theme to an uncluttered one.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(ggplot2)\nlibrary(ggpp)\nlibrary(grid)\n# Is a compatible version of 'ggrepel' installed?\neval_ggrepel <- requireNamespace(\"ggrepel\", quietly = TRUE) &&\n  packageVersion(\"ggrepel\") >= \"0.9.2\"\nif (eval_ggrepel) library(ggrepel)\n\nold_theme <- theme_set(theme_bw())\n```\n:::\n\n\n## Position functions and nudging\n\nNudging shifts deterministically the *x* and/or *y* coordinates of an\nobservation. This takes place early enough for the limits of the\ncorresponding scales be set based on the displaced positions. In\n'ggplot2', position functions and consequently also geometries by\ndefault apply no nudging.\n\nFunction `position_nudge()` from package 'ggplot2' applies the nudge, to\n*x* and/or *y* data coordinates based directly on the values passed to\nits parameters `x` and `y`. Passing arguments to the `nudge_x` and/or\n`nudge_y` parameters of a geometry has the same effect, as these values\nare passed to `position_nudge()` within the geometry's code. Geometries\nalso have a `position` parameter to which we can pass an expression\nbased on a *position function* which opens the door to more elaborate\napproaches to nudging, as well as allowing other changes in coordinates\nsuch as stacking.\n\nWe use `geom_point_s()` to exemplify what nudging does. The\nblack dots are the original positions and the red ones the nudged\npositions, with the arrows of length 0.5 along _x_, showing the displacement\nand its direction.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data.frame(x = 1:10, y = rnorm(10)), aes(x, y)) +\n  geom_point() +\n  geom_point_s(nudge_x = 0.5, colour = \"red\")\n```\n\n::: {.cell-output-display}\n![](nudge-and-repel_files/figure-html/unnamed-chunk-3-1.svg){fig-align='center'}\n:::\n:::\n\n\nFunction `position_nudge_keep()` keeps a copy of the original position making it\npossible for geometries like `geom_point_s()` to draw connecting segments or\narrows.\n\nPackage 'ggpp' provides several new position functions to facilitate nudging.\nAll of them keep the original positions to allow links to be drawn. Some of\nthem, just simplify some use cases, e.g., `position_nudge_to()`, which accepts\nthe desired nudged coordinates directly, instead of as a displacement away from\nthe initial position. This allows to push data labels away from observations\ninto a row or column.\n\nOther new position functions compute the nudge for individual observations based\non different criteria. For example by nudging away from a focal point, a line or\na curve. The focal point or line can be either supplied directly or fitted to\nthe observations. In `position_nudge_center()` and `position_nudge_line()`\ndescribed below, this reference alters only the direction (angle) along which\nnudge is applied but not the extent of the shift. Advanced nudging works very\nwell, but only for some patterns of observations and may require manual\nadjustment of positions, repulsion is more generally applicable but like\njittering is aleatory. Combining nudging and repulsion we can make repulsion\nmore predictable with little loss of its applicability.\n\nThese position functions can be used with any geometry but if segments joining\nthe nudged positions to the original ones are desired, only geometries from\npackages 'ggrepel' or 'ggpp' can currently be used. Geometries\n`geom_text_repel()` or `geom_label_repel()` from 'ggrepel' should be used when\nrepulsion is desired. Setting `max.iter = 0` in these functions disables\nrepulsion but allows the drawing of segments or arrows. Alternatively, several\ngeometries from 'ggpp' implement the drawing of connecting segments, but none\nof them implement repulsion. Please see\nthe documentation for the different geometries from packages 'ggrepel' and\n'ggpp' for the details.\n\nAs mentioned above, drawing of segments or arrows is made possible by position\nfunctions storing in `data` both the nudged and original *x* and *y*\ncoordinates. The joint use of 'ggrepel' and 'ggpp' was made possible by\ncoordinated development of these packages and agreement on a naming convention\nfor storing the original position. Keeping both nudged and original positions\nincreases the size of the data, and consequently also the size of the ggplot\nobjects. Because of this, the position functions from 'ggpp' allow the keeping \nof the original positions to be disabled when needed.\n\n## Connecting segments and arrows\n\nFunction `position_nudge_keep()` is like `ggplot2::position_nudge()` but\nkeeps (stores) the original *x* and *y* coordinates. It is similar to\nfunction `position_nudge_repel()` but uses a different naming convention\nfor the coordinates. Both work with `geom_text_repel()` or\n`geom_label_repel()` from package 'ggrepel' (\\>= 0.9.2), but only\n`position_nudge_keep()` can be used interchangeably with\n`ggplot2::position_nudge()` with other geometries such as `geom_text()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(84532)\ndf <- data.frame(\n  x = rnorm(20),\n  y = rnorm(20, 2, 2),\n  l = paste(\"label:\", letters[1:20])\n)\n```\n:::\n\n\nWith `position_nudge_keep()` from 'ggpp' used together with\n`geom_text_repel()` or `geom_label_repel()` segments between a nudged\nand/or repelled label and the original position (here indicated by a\npoint) are drawn. As shown here, passing `max.iter = 0` disables\nrepulsion.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(df, aes(x, y, label = l)) +\n  geom_point() +\n  geom_text_repel(position = position_nudge_keep(x = 0.3),\n                  max.iter = 0)\n```\n\n::: {.cell-output-display}\n![](nudge-and-repel_files/figure-html/unnamed-chunk-5-1.svg){fig-align='center'}\n:::\n:::\n\n\n## PCA loadings\n\nA usually more problematic example is the labeling of loadings in PCA\nand similar biplots.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Example data frame where each species' principal components have been computed.\ndf1 <- data.frame(\n  Species = paste(\"Species\",1:5),\n  PC1     = c(-4, -3.5, 1, 2, 3),\n  PC2     = c(-1, -1, 0, -0.5, 0.7)) \n\nggplot(df1, aes(x=PC1, y = PC2, label = Species, colour = Species)) +\n  geom_hline(aes(yintercept = 0), linewidth = .2) +\n  geom_vline(aes(xintercept = 0), linewidth = .2) +\n  geom_segment(aes(x = 0, y = 0, xend = PC1, yend = PC2), \n               arrow = arrow(length = unit(0.1, \"inches\"))) +\n  geom_label_repel(position = position_nudge_center(x = 0.2, y = 0.01,\n                                                    center_x = 0, center_y = 0),\n                   label.size = NA,\n                   label.padding = 0.1,\n                   fill = rgb(red = 1, green = 1, blue = 1, alpha = 0.75)) +\n  xlim(-5, 5) +\n  ylim(-2, 2) +\n  # Stadard settings for displaying biplots\n  coord_fixed() +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](nudge-and-repel_files/figure-html/unnamed-chunk-6-1.svg){fig-align='center'}\n:::\n:::\n\n\n## Aligned data labels\n\nFunction `position_nudge_to()` nudges to a given position instead of\nusing the same shift for each observation. It can be used to align labels\nfor points that are not themselves aligned.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(df, aes(x, y, label = ifelse(x < 0.5, \"\", l) )) +\n  geom_point() +\n  geom_text_repel(position = \n                    position_nudge_to(x = 2.3),\n                  min.segment.length = 0,\n                  segment.color = \"red\",\n                  arrow = arrow(length = unit(0.015, \"npc\")),\n                  direction = \"y\") +\n  expand_limits(x = 3)\n```\n\n::: {.cell-output-display}\n![](nudge-and-repel_files/figure-html/unnamed-chunk-7-1.svg){fig-align='center'}\n:::\n:::\n\n\nBy providing two values for nudging with opposite sign, we can add labels\nalternating between sides. We use here `geom_text_s()` but other geometries\ncould have been used as well. How the data labels been closer together repulsion\nwould have been needed in addition to nudging.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsize_from_area <- function(x) {sqrt(max(0, x) / pi)}\n\ndf2 <- data.frame(b = exp(seq(2, 4, length.out = 10)))\n\nggplot(df2, aes(1, b, size = b)) + \n  geom_text_s(aes(label = round(b,2)),\n              position = position_nudge_to(x = c(1.1, 0.9)),\n              box.padding = 0.5) +\n  geom_point() +\n  scale_size_area() +\n  xlim(0, 2) +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](nudge-and-repel_files/figure-html/unnamed-chunk-8-1.svg){fig-align='center'}\n:::\n:::\n\n\nIt is also useful when labeling curves than end at different positions along\nthe *x* axis. In this example we avoid overlaps with repulsion along the _y_\naxis. The data set used in this example is dynamic, so we use nudging to a\nposition that is dynamicaly computed from the data.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nkeep <- c(\"Israel\", \"United States\", \"European Union\", \"China\", \"South Africa\", \"Qatar\",\n          \"Argentina\", \"Chile\", \"Brazil\", \"Ukraine\", \"Indonesia\", \"Bangladesh\")\n\ndata <- read.csv(\"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.csv\")\ndata$date <- ymd(data$date)\n\ndata %>%\n  filter(location %in% keep) %>%\n  select(location, date, total_vaccinations_per_hundred) %>%\n  arrange(location, date) %>%\n  filter(!is.na(total_vaccinations_per_hundred)) %>%\n  mutate(location = factor(location),\n         location = reorder(location, total_vaccinations_per_hundred)) %>%\n  group_by(location) %>% # max(date) depends on the location!\n  mutate(label = if_else(date == max(date), \n                         as.character(location), \n                         \"\")) -> owid\n\nggplot(owid,\n       aes(x = date, \n           y = total_vaccinations_per_hundred,\n           color = location)) +\n  geom_line() +\n  geom_text_repel(aes(label = label),\n                  size = 3,\n                  position = position_nudge_to(x = as.numeric(max(owid$date) + days(50))),\n                  segment.color = 'grey',\n                  point.size = 0,\n                  box.padding = 0.1,\n                  point.padding = 0.1,\n                  hjust = \"left\",\n                  direction = \"y\") + \n  scale_x_date(expand = expansion(mult = c(0.05, 0.2))) +\n  labs(title = \"Cumulative COVID-19 vaccination doses administered per 100 people\",\n       y = \"\",\n       x = \"Date (year-month)\") +\n  theme_bw() +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](nudge-and-repel_files/figure-html/unnamed-chunk-9-1.svg){fig-align='center'}\n:::\n:::\n\n\nIn the call to `position_nudge_to()` we passed a vector of length one as\nargument for `x`, but both `x` and `y` also accept longer vectors. In other\nwords, this position function makes it possible manual positioning of text and\nlabels.\n\nIn the next example we decrease the forces used for repulsion and the\npadding so that the labels remain close together. In this way, we can\nlabel the observations on the rug of a combined point and rug plot.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(df, aes(x, y, label = round(x, 2))) +\n  geom_point(size = 3) +\n  geom_text_repel(position = position_nudge_to(y = -2.7), \n            size = 3,\n            angle = 90,\n            hjust = 0,\n            box.padding = 0.05,\n            min.segment.length = Inf,\n            direction = \"x\",\n            force = 0.1,\n            force_pull = 0.1) +\n  geom_rug(sides = \"b\", length = unit(0.02, \"npc\"))\n```\n\n::: {.cell-output-display}\n![](nudge-and-repel_files/figure-html/unnamed-chunk-10-1.svg){fig-align='center'}\n:::\n:::\n\n\n## Clouds of observations\n\nIn many cases data are distributed as a cloud with decreasing density towards\nedges. In some other cases, even with evely distributed observations, a certain\npartly systematic pattern of displacement of data labels is visually more\nattractive than a fully random one. In both cases, combining nudging and\nrepulsion is usually an effective approach.\n\nIn this example we use repulsion with nudging away from zero. In all cases\nnudging shifts the coordinates giving a new *x* and/or *y* position that expands\nthe limits of the corresponding scales to include the nudged coordinate values,\nbut not necessarily the whole of justified text or labels.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(df, aes(x, y, label = l)) +\n  geom_vline(xintercept = 0, linetype = \"dashed\") +\n  geom_point() +\n  geom_text_repel(position = \n                    position_nudge_center(x = 0.3, center_x = 0),\n                  min.segment.length = 0)\n```\n\n::: {.cell-output-display}\n![](nudge-and-repel_files/figure-html/unnamed-chunk-11-1.svg){fig-align='center'}\n:::\n:::\n\n\nWe set a different split point as the value computed by a function\nfunction, by name.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(df, aes(x, y, label = l)) +\n  geom_vline(aes(xintercept = median(x)), linetype = \"dashed\") +\n  geom_point() +\n  geom_text_repel(position = \n                    position_nudge_center(x = 0.3, center_x = median),\n                  min.segment.length = 0)\n```\n\n::: {.cell-output-display}\n![](nudge-and-repel_files/figure-html/unnamed-chunk-12-1.svg){fig-align='center'}\n:::\n:::\n\n\n\nWe set a different split point as the value computed by an anonymous\nfunction. Here we split on the first quartile along *x* and _y_ = 2.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(df, aes(x, y, label = l)) +\n  geom_point() +\n  geom_text_repel(position = \n                    position_nudge_center(x = 0.3,\n                                          center_x = function(x) {\n                                            quantile(x, \n                                                     probs = 1/4, \n                                                     names = FALSE)\n                                          },\n                                          direction = \"split\"),\n                  min.segment.length = 0)\n```\n\n::: {.cell-output-display}\n![](nudge-and-repel_files/figure-html/unnamed-chunk-13-1.svg){fig-align='center'}\n:::\n:::\n\n\nBy requesting nudging along *x* and *y* and setting `direction = \"split\"`\nnudging is applied according to the quadrants centred on the centroid of the\ndata.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(df, aes(x, y, label = l)) +\n  geom_point() +\n  geom_text_repel(position = \n                    position_nudge_center(x = 0.1,\n                                          y = 0.15,\n                                          direction = \"split\"))\n```\n\n::: {.cell-output-display}\n![](nudge-and-repel_files/figure-html/unnamed-chunk-14-1.svg){fig-align='center'}\n:::\n:::\n\n\nWith `direction = \"radial\"`, the distance nudged away from the center is\nthe same for all labels.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(df, aes(x, y, label = l)) +\n  geom_point() +\n  geom_text_repel(position = \n                    position_nudge_center(x = 0.25,\n                                          y = 0.4,\n                                          direction = \"radial\"),\n                  min.segment.length = 0)\n```\n\n::: {.cell-output-display}\n![](nudge-and-repel_files/figure-html/unnamed-chunk-15-1.svg){fig-align='center'}\n:::\n:::\n\n\nWe can also set the justification of the text labels although repulsion\nusually works best with labels justified at the centre, which is the\ndefault in `geom_text_repel()`. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(df, aes(x, y, label = l)) +\n  geom_point() +\n  geom_text_repel(position = \n                    position_nudge_center(x = 0.25,\n                                          y = 0.25,\n                                          center_x = 0,\n                                          center_y = 2,\n                                          direction = \"radial\"),\n                  min.segment.length = 0,\n                  hjust = \"outward\", vjust = \"outward\") +\n  expand_limits(x = c(-2.7, +2.3))\n```\n\n::: {.cell-output-display}\n![](nudge-and-repel_files/figure-html/unnamed-chunk-16-1.svg){fig-align='center'}\n:::\n:::\n\n\nNudging along one axis, here *x*, and setting the repulsion `direction`\nalong the other axis, here *y*, tends to give a pleasant arrangement of\nlabels.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(df, aes(x, y, label = l)) +\n  geom_point() +\n  geom_text_repel(position = \n                    position_nudge_center(x = 0.2,\n                                          center_x = 0,\n                                          direction = \"split\"),\n                  aes(hjust = \"outward\"),\n                  direction = \"y\",\n                  min.segment.length = 0) +\n  expand_limits(x = c(-3, 3))\n```\n\n::: {.cell-output-display}\n![](nudge-and-repel_files/figure-html/unnamed-chunk-17-1.svg){fig-align='center'}\n:::\n:::\n\n\n\nWhen some regions have a high density of observations we may wish to only\nlabel those in the lower density regions. To automate this, we can use\nstatistics `stat_dens2d_labels()` or `stat_dens1d_labels()` that replace\nthe labels with `\"\"` but retain all rows in data so that repulsion away\nfrom all points is achieved. In contrast, `stat_dens2d_filter()` or \n`stat_dens1d_filter()` subset `data` using identical criteria.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(df, aes(x, y, label = l)) +\n  geom_point() +\n  stat_dens2d_labels(geom = \"text_repel\",\n                     keep.fraction = 1/2,\n                     position = \n                       position_nudge_center(x = 0.2,\n                                             center_x = 0,\n                                             direction = \"split\"),\n                     aes(hjust = ifelse(x < 0, 1, 0)),\n                     direction = \"y\",\n                     min.segment.length = 0) +\n  stat_dens2d_filter(geom = \"point\",\n                     keep.fraction = 1/2,\n                     shape = \"circle open\", size = 3) +\n  expand_limits(x = c(-3, 3))\n```\n\n::: {.cell-output-display}\n![](nudge-and-repel_files/figure-html/unnamed-chunk-18-1.svg){fig-align='center'}\n:::\n:::\n\n\nWe create a set of example data with a denser distribution.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrandom_string <- function(len = 3) {\npaste(sample(letters, len, replace = TRUE), collapse = \"\")\n}\n\n# Make random data.\nset.seed(1001)\nd <- tibble::tibble(\n  x = rnorm(100),\n  y = rnorm(100),\n  group = rep(c(\"A\", \"B\"), c(50, 50)),\n  lab = replicate(100, { random_string() })\n)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = d, aes(x, y, label = lab, colour = group)) +\n  geom_point() +\n  stat_dens2d_labels(geom = \"text_repel\", \n                     keep.fraction = 0.45,\n                     min.segment.length = 0)\n```\n\n::: {.cell-output-display}\n![](nudge-and-repel_files/figure-html/unnamed-chunk-20-1.svg){fig-align='center'}\n:::\n:::\n\n\nWith `geom_label_repel` one usually needs to use a smaller value for\n`keep.fracton`, or a smaller `size`, as labels use more space on the\nplot than the test alone.\n\nAdditional arguments can be used to change the angle and position of the\ntext, but may give unexpected output when labels are long as the\nrepulsion algorithm \"sees\" always a rectangular bounding box that is not\nrotated. With short labels or angles that are multiples of 90 degrees,\nthere is no such problem. Please, see the documentation for\n`ggrepel::geom_text_repel` and `ggrepel::geom_label_repel` for the\nvarious ways in which both repulsion and formatting of the labels can be\nadjusted.\n\nUsing `NA` as argument to `label.fill` makes the observations with\nlabels set to `NA` *incomplete*, and such rows in data are skipped when\nrendering the plot, before the repulsion algorithm is active. This can\nlead to overlap between text and points corresponding to unlabelled\nobservations. Whether points are occluded depends on the order of layers\nand transparency, the occlusion can remain easily unnoticed with\n`geom_label` and `geom_label_repel`. We keep `geom_point` as the topmost\nlayer to ensure that all observations are visible.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = d, aes(x, y, label = lab, colour = group)) +\n  stat_dens2d_labels(geom = \"label_repel\", \n                     keep.fraction = 0.2, \n                     label.fill = NA) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](nudge-and-repel_files/figure-html/unnamed-chunk-21-1.svg){fig-align='center'}\n:::\n:::\n\n\nThe 1D versions work similarly but assess the density along only one of\n_x_ or _y_. In other respects than `orientation` and the parameters passed\ninternally to `stats::density()` the examples given earlier for\n`stat_dens2d_labels()` also apply `stat_dens1d_labels()`.\n\nAn example for a plot based on an enhancement suggested in an issue raised at\nGitHub by Michael Schubert, made possible by parameter `keep.these` added for\nthis and similar use cases.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(ggpp)\nlibrary(ggrepel)\nsyms = c(letters[1:5], LETTERS[1:5], 0:9)\nlabs = do.call(paste0, expand.grid(syms, syms))\ndset = data.frame(x=rnorm(1e3), y=rnorm(1e3), label=sample(labs, 1e3, replace=TRUE))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(dset, aes(x=x, y=y, label = label)) +\n  geom_point(colour = \"grey85\") +\n  stat_dens2d_filter(geom = \"text_repel\",\n                     position = position_nudge_centre(x = 0.1, \n                                                      y = 0.1, \n                                                      direction = \"radial\"),\n                     keep.number = 50,\n                     keep.these = c(\"aA\", \"bB\", \"cC\"),\n                     min.segment.length = 0) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](nudge-and-repel_files/figure-html/unnamed-chunk-23-1.svg){fig-align='center'}\n:::\n:::\n\n\n## Lines, curves and observations along them\n\nFunction `position_nudge_line()` nudges away from a line, which can be a\nuser supplied straight line as well as a smooth spline or a polynomial\nfitted to the observations themselves. The nudging is away and\nperpendicular to the local slope of the straight or curved line. It\nrelies on the same assumptions as linear regression, assuming that *x*\nvalues are not subject to error. This in most cases prevents labels from\noverlapping a curve fitted to the data, even if not exactly based on the\nsame model fit. When observations are sparse, this may be enough to\nobtain a nice arrangement of data labels, otherwise, it can be used in\ncombination with repulsive geometries. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(16532)\ndf <- data.frame(\n  x = -10:10,\n  y = (-10:10)^2,\n  yy = (-10:10)^2 + rnorm(21, 0, 4),\n  yyy = (-10:10) + rnorm(21, 0, 4),\n  l = letters[1:21]\n)\n```\n:::\n\n\nWe use a repulsive geometry when the label texts are long or the labels are\ncrowded near the line. Combining repulsion and computed nudging is effective.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(df, aes(x, yy)) +\n  geom_point() +\n  stat_smooth(method = \"loess\", formula = y ~ x) +\n  geom_label_repel(aes(y = yy, label = paste(\"point\", l)),\n                   size = 3,\n                   position = position_nudge_line(x = 0.9, \n                                                  y = 8,\n                                                  direction = \"split\"),\n                   box.padding = 0.3,\n                   min.segment.length = 0) +\n  expand_limits(x = c(-12, 12))\n```\n\n::: {.cell-output-display}\n![](nudge-and-repel_files/figure-html/unnamed-chunk-25-1.svg){fig-align='center'}\n:::\n:::\n\n\n::: callout-hint\n\nWhen fitting a polynomial, `\"lm\"` should be the argument passed to\n`method` and a model formula preferably based on `poly()`, setting\n`raw = TRUE`, as argument to `formula`.\n\n*Currently no other methods are implemented in* `position_nudge_line()`.\n\n:::\n\nIn the case of data labels that are small, a single character in the next\nexample, we also benefit from nudging if they are near a fitted line. \nNudging plus repulsion, shown next, will be compared to\nalternatives. In this case we assume no linking segments are desired as\nthere is enough space for the data labels to remain near the observations.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(df, aes(x, yy)) +\n  geom_point() +\n  stat_smooth(method = \"lm\", \n              formula = y ~ poly(x, 2, raw = TRUE)) +\n  geom_text_repel(aes(y = yy, label = l),\n                  position = position_nudge_line(method = \"lm\",\n                                                 formula = y ~ poly(x, 2, raw = TRUE),\n                                                 x = 0.5, \n                                                 y = 5,\n                                                 direction = \"split\"),\n                  box.padding = 0.25,\n                  min.segment.length = Inf)\n```\n\n::: {.cell-output-display}\n![](nudge-and-repel_files/figure-html/unnamed-chunk-26-1.svg){fig-align='center'}\n:::\n:::\n\n\nUsing nudging alone there is little difference, but there is always the posibility of\noverlaps, so using nudging plus repulsion as above is safer. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(df, aes(x, yy)) +\n  geom_point() +\n  stat_smooth(method = \"lm\", \n              formula = y ~ poly(x, 2, raw = TRUE)) +\n  geom_text(aes(y = yy, label = l),\n            position = position_nudge_line(method = \"lm\",\n                                           formula = y ~ poly(x, 2, raw = TRUE),\n                                           x = 0.5, \n                                           y = 5,\n                                           direction = \"split\"))\n```\n\n::: {.cell-output-display}\n![](nudge-and-repel_files/figure-html/unnamed-chunk-27-1.svg){fig-align='center'}\n:::\n:::\n\n\n## Acknowledgements\n\nI warmly thank Kamil Slowikowski for agreeing to make changes in\n'ggrepel' that make the use of 'ggrepel' together with 'ggpp' possible\nand smooth. This document shows some use examples, but surely new ones\nwill be found by users of R and 'ggplot2'.\n\n## References\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncitation('ggplot2')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTo cite ggplot2 in publications, please use\n\n  H. Wickham. ggplot2: Elegant Graphics for Data Analysis.\n  Springer-Verlag New York, 2016.\n\nA BibTeX entry for LaTeX users is\n\n  @Book{,\n    author = {Hadley Wickham},\n    title = {ggplot2: Elegant Graphics for Data Analysis},\n    publisher = {Springer-Verlag New York},\n    year = {2016},\n    isbn = {978-3-319-24277-4},\n    url = {https://ggplot2.tidyverse.org},\n  }\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncitation('ggpp')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTo cite package 'ggpp' in publications use:\n\n  Aphalo P (2023). _ggpp: Grammar Extensions to 'ggplot2'_.\n  https://docs.r4photobiology.info/ggpp/,\n  https://github.com/aphalo/ggpp.\n\nA BibTeX entry for LaTeX users is\n\n  @Manual{,\n    title = {ggpp: Grammar Extensions to 'ggplot2'},\n    author = {Pedro J. Aphalo},\n    year = {2023},\n    note = {https://docs.r4photobiology.info/ggpp/,\nhttps://github.com/aphalo/ggpp},\n  }\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncitation('ggrepel')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTo cite package 'ggrepel' in publications use:\n\n  Slowikowski K (2023). _ggrepel: Automatically Position\n  Non-Overlapping Text Labels with 'ggplot2'_. R package version 0.9.3,\n  <https://CRAN.R-project.org/package=ggrepel>.\n\nA BibTeX entry for LaTeX users is\n\n  @Manual{,\n    title = {ggrepel: Automatically Position Non-Overlapping Text Labels with\n'ggplot2'},\n    author = {Kamil Slowikowski},\n    year = {2023},\n    note = {R package version 0.9.3},\n    url = {https://CRAN.R-project.org/package=ggrepel},\n  }\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncitation('lubridate')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTo cite lubridate in publications use:\n\n  Garrett Grolemund, Hadley Wickham (2011). Dates and Times Made Easy\n  with lubridate. Journal of Statistical Software, 40(3), 1-25. URL\n  https://www.jstatsoft.org/v40/i03/.\n\nA BibTeX entry for LaTeX users is\n\n  @Article{,\n    title = {Dates and Times Made Easy with {lubridate}},\n    author = {Garrett Grolemund and Hadley Wickham},\n    journal = {Journal of Statistical Software},\n    year = {2011},\n    volume = {40},\n    number = {3},\n    pages = {1--25},\n    url = {https://www.jstatsoft.org/v40/i03/},\n  }\n```\n:::\n:::\n",
    "supporting": [
      "nudge-and-repel_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}