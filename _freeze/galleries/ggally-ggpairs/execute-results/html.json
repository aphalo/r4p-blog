{
  "hash": "dee79ad84dffc0de368ae67918658a5b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Annotating Plot Matrices\"\nsubtitle: \"Using 'GGally' Together with 'ggpmisc'\"\nauthor: \"Pedro J. Aphalo\"\ndate: 2024-04-17\ndate-modified: 2024-04-17\nabstract: |\n  This page documents how to annotate plot matrices created with `GGally::ggpairs()` using the layer functions from package 'ggpmisc'.\nkeywords: [ggplot2 pkg, GGally pkg, ggpmisc pkg, data labels, plot annotations, plot matrix]\ncategories: [Plotting examples]\neditor: \n  markdown: \n    wrap: 72\ncode-fold: true\nformat:\n  html: \n    code-link: true\n    code-tools: true\ndraft: false\n---\n\n\n::: callout-note\n# Acknowledgement\n\nThis page is based on ['ggpmisc' issue #51](https://github.com/aphalo/ggpmisc/issues/51) raised by Manuel Tiburtini at GitHub and my answers to his questions.\n:::\n\n::: callout-tip\nIn this page most code chunks are \"folded\" so as to decrease the clutter when\nsearching for examples. A few code chunks that are reused across several plots\nare by default unfolded to make them more visible. Above each plot you will find\none or more \"folded\" code chunks signalled by a small triangle followed by\n\"Code\". Clicking on the triangle \"unfolds\" the code chunk making visible the R\ncode used to produce the plot.\n\nThe code in the chunks can be copied by clicking on the top right\ncorner, where an icon appears when the mouse cursor hovers over the code\nlisting.\n\nThe `</> Code` drop down menu to the right of the page title makes it possible\nto unfold all code chunks and to view the Quarto source of the whole web page.\n\nNames of functions and other R objects are linked to the corresponding on-line\nhelp pages. The names of R extension packages are linked to their documentation\nweb sites when available.\n:::\n\n# Introduction\n\nPlot matrices are a useful tool for exploratory data analysis, but occasionally useful also for final reporting of a data analysis. They are an square array of panels, where all possible pairs of variables are plotted against each other. The most frequently used type of visualization used are scatter plots. Base R graphics has function `matplot()`. Extensions to package 'ggplot2' also support this type of data display. Function `ggmatplot()` from package 'ggmatplot()' mimicks the user interface of `matplot()`. Package 'GGally' provides function `ggpairs()`, with a different user interface better matching 'ggplot2' expectations. It can be thought as assembling a matrix where each panel is a ggplot object.\n\n# Function `ggpairs()`\n\nFunction `ggpairs()` builds a `ggmatrix` object, but can take as arguments functions that return ggplot objects. These functions can be created with `ggplot()`, `aes()` and _layer_ functions. Thus functions from 'ggplot2' and its extensions can be used in the definition of these functions.\n\nA questions was raised at GitHub about how to add annotations and data labels with the functions from package 'ggpmisc' to the plots conforming a ggmatrix object created with function `ggpairs()`. So I give below some examples of how this works work. \n\n# Plot examples with code\n\nPackage [ggpmisc](https://docs.r4photobiology.info/ggpmisc/) imports and \nre-exports all definitions from [ggpp](https://docs.r4photobiology.info/ggpp/)\nas well as from [ggplot2](https://ggplot2.tidyverse.org/), so it is enough to attach explicitly package [ggpmisc](https://docs.r4photobiology.info/ggpmisc/) . All three packages are available through CRAN.\nPackage [GGally](https://ggobi.github.io/ggally/) needs to be also loaded.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(ggpmisc)\nlibrary(GGally)\n\ndata(iris)\n\ntheme_set(theme_bw())\n```\n:::\n\n\nThe actual matrix is triangular, with a redundant diagonal. So in a square\nmatrix the upper and lower triangles can be filled with different plots and\nthe diagonal used for plots describing the variables individually. One needs\nto be careful to avoid clutter and try to keep the plot understandable.\n\nThe first plot examples uses defaults.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggpairs(data = iris,\n        columns = 1:4,\n        mapping = aes(colour = Species),\n        progress = FALSE)\n```\n\n::: {.cell-output-display}\n![](ggally-ggpairs_files/figure-html/unnamed-chunk-2-1.svg)\n:::\n:::\n\n\nWe can replace, one, two or all three of the default plotting functions. Below I replace all three, using layer functions from both 'ggplot2' and 'ggpmisc'. In allometry, it is preferred to use major axis regression as relationship is between pairs of variables measured with similar errors. It is also frequent to use log transformations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#upper function with equations\nupperfun <- function(data, mapping){\n  ggplot(data = data, mapping = mapping) +\n    geom_blank() +\n    stat_ma_eq(use_label(c(\"eq\", \"R2\")),\n               vstep = 0.15, \n               size = 2.7,\n               formula = y ~ x)\n}\n\n#lower function ma lines and no confidence band\nlowerfun <- function(data, mapping){\n  ggplot(data = data, mapping = mapping) +\n    geom_point(alpha = 0.4) +\n    ggpmisc::stat_ma_line(show.legend =  F,\n                          se = FALSE, \n                          method = \"lmodel2:SMA\")\n}\n\n#diagfunction with density\ndiagfun <- function(data, mapping){\n  ggplot(data = data, mapping = mapping) +\n    geom_density(alpha = 0.33)\n}\n\n# plotting using ggpairs\nggpairs(data = iris,\n        columns = 1:4,\n        aes(colour = Species,\n            fill = Species, \n            grp.label = abbreviate(Species)),\n        upper = list(continuous = wrap(upperfun)),\n        lower = list(continuous = wrap(lowerfun)),\n        diag = list(continuous = wrap(diagfun)),\n        progress = FALSE)\n```\n\n::: {.cell-output-display}\n![](ggally-ggpairs_files/figure-html/unnamed-chunk-3-1.svg)\n:::\n:::\n\n\nA few more tweaks are possible through the theme, here applied to the whole plot matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggpairs(data = iris,\n        columns = 1:4,\n        aes(colour = Species, \n            fill = Species, \n            grp.label = abbreviate(Species)),\n        upper = list(continuous = wrap(upperfun)),\n        lower = list(continuous = wrap(lowerfun)),\n        diag = list(continuous = wrap(diagfun)),\n        labeller = as_labeller(function(x) {gsub(\"\\\\.\", \" \", x)}),\n        progress = FALSE) +\n  theme_bw(base_size = 9) +\n  theme(panel.grid = element_blank())\n```\n\n::: {.cell-output-display}\n![](ggally-ggpairs_files/figure-html/unnamed-chunk-4-1.svg)\n:::\n:::\n\nOr through the plot functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#upper function for equations in \"empty\" panel\nupperfun2 <- function(data, mapping){\n  ggplot(data = data, mapping = mapping) +\n    geom_blank() +\n    stat_ma_eq(use_label(c(\"eq\", \"R2\")),\n               vstep = 0.15, \n               size = 2.7,\n               formula = y ~ x) +\n  theme_void()\n}\n\n# plotting using ggpairs\nggpairs(data = iris,\n        columns = 1:4,\n        aes(colour = Species, \n            fill = Species, \n            grp.label = abbreviate(Species)),\n        upper = list(continuous = wrap(upperfun2)),\n        lower = list(continuous = wrap(lowerfun)),\n        diag = list(continuous = wrap(diagfun)),\n        labeller = \n          as_labeller(function(x) {gsub(\"\\\\.\", \" \", x)}),\n        progress = FALSE)\n```\n\n::: {.cell-output-display}\n![](ggally-ggpairs_files/figure-html/unnamed-chunk-5-1.svg)\n:::\n:::\n\n\nWe can apply a log transformation to the _x_ and _y_ scales. In this case this results in `NA` values when computing `log10(0)` in the density plots, so we leave the diagonal blank.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggpairs(data = iris,\n        columns = 1:4,\n        aes(colour = Species, \n            fill = Species, \n            grp.label = abbreviate(Species)),\n        upper = list(continuous = wrap(upperfun2)),\n        lower = list(continuous = wrap(lowerfun)),\n        diag = 'blank',\n        progress = FALSE,\n        legend = c(1, 1)) +\n  scale_x_log10() +\n  scale_y_log10()\n```\n\n::: {.cell-output-display}\n![](ggally-ggpairs_files/figure-html/unnamed-chunk-6-1.svg)\n:::\n:::\n\n\nAbove, to make reasonable plots, we used mappings to separate the different species. Here I demonstrate how a plot can look like when the observations originate in a mixture of populations. Plot matrices are good are revealing such problems, but one needs to look at the plots carefully. Compare the plot below with those above.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#lower function, plotting confidence bands\nlowerfun <- function(data, mapping){\n  ggplot(data = data, mapping = mapping) +\n    geom_point(alpha = 0.4) +\n    ggpmisc::stat_ma_line(show.legend =  F, \n                          se = TRUE, \n                          method = \"lmodel2:SMA\")\n}\n\nggpairs(data = iris,\n        columns = 1:4,\n        upper = list(continuous = wrap(upperfun2)),\n        lower = list(continuous = wrap(lowerfun)),\n        diag = list(continuous = wrap(diagfun)),\n        progress = FALSE)\n```\n\n::: {.cell-output-display}\n![](ggally-ggpairs_files/figure-html/unnamed-chunk-7-1.svg)\n:::\n:::\n\n\n::: callout-warning\nA theme or scales added to the `ggmatrix` object affect all plots in the matrix, \nand overwrite those set in the plotting functions as well as the defaults. In\nthe case of scales for _x_ and _y_ it makes no sense to set them in the\nplotting functions.\n:::\n\n\n\n",
    "supporting": [
      "ggally-ggpairs_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}