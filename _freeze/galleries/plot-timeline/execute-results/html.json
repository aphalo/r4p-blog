{
  "hash": "2fb6095981c11d82cf0421fb34d57bbd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Timelines with 'ggplot2'\"\nsubtitle: \"Timelines as data plots\"\nauthor: \"Pedro J. Aphalo\"\ndate: \"2023-07-30\"\ndate-modified: \"2023-08-01\"\ncategories: [Plotting examples]\nkeywords: [timeline plots, ggplot2 pkg, photobiology pkg, ggrepel pkg]\ncode-fold: true\nformat:\n  html: \n    code-link: true\n    code-tools: true\nbibliography: r.bib\nabstract: |\n  Example R code to create time-line plots, uising packages 'ggplot2', 'ggpp', 'ggrepel' and 'photobiology'. Although 2D plots using cartesian coordinates are the most comon data visualizations, time-line plots are also very useful. Being in most cases 1D plots, they can be efficiently described with the layered Grammar of Graphics. \n---\n\n\n::: callout-tip\nIn this page code chunks are \"folded\" so as to decrease the clutter when\nsearching for examples. Above each plot you will find one or more \"folded\" code\nchuncks signalled by a small triangle followed by \"Code\". Clicking on the\ntriangle \"unfolds\" the code chunk making visible the R code used to produce the\nplot.\n\nThe code in the chunks can be copied by clicking on the top right\ncorner, where an icon appears when the mouse cursor hovers over the code\nlisting.\n\nThe `</> Code` drop down menu to the right of the page title makes it possible to unfold all code chunks and to view the Quarto source of the whole web page.\n\nNames of functions and other R objects are linked to the corresponding on-line help pages. The names of R extension packages are linked to their documentation web sites when available.\n:::\n\n::: callout-note\nThe content of this page was originally written for the _Questions and Answers_ section of the [UV4Plants Bulletin](https://bulletin.uv4plants.org/) but was not published as the Bulletin ceased to be published.\n:::\n\n# Why timelines as data plots?\n\nThe earliest examples of timeline plots date from the 1,700's [@Koponen2019]. Initially used to depict historical events, timeline plots are useful to describe any sequence of events and periods along a time axis. To be useful the events should be positioned proportionally, i.e., the distance along the timeline at which events are marked, should be proportional to the time interval separating these events [@Koponen2019].\n\nTimelines provide a very clear, unambiguous and concise way of describing the course of experiments, the timing of steps in laboratory protocols and even the progress of people's careers in science, sports, politics, etc. I suspect they are used less frequently than they could because drafting them can seem like a lot of work. So, even if not specific to UV research, timelines are important and their use could be more frequent.\n\nThe question for this second installment was asked from me orally by Yan Yan, so the question is reconstructed from memory. The background to the question was that I encouraged her to create a better timeline plot for a manuscript. She had used a drafting program, such as Inkscape or Illustrator and found it difficult to achieve spacing proportional to time, in particular across a group of parallel timelines.\n\n**Q1:** How can I draw an accurate and visually nice timeline plot without too much effort?\n\n**A1:** Let's think what a time-line really is: it is in essence a one-dimensional data plot, where a single axis represents time and events or periods are marked and usually labelled. So the answer on how to easily and accurately draw a timeline plot is to use data plotting software instead of \"free-hand\" drafting software. I will show examples using R package [ggplot2](https://ggplot2.tidyverse.org/) and some extensions to it. The beauty of this approach is that there is little manual fiddling, the time-line plot is created from data, and the code can be reused with few changes for other timelines by plotting different data. As this is the only question for this issue, I provide an extended answer with multiple examples.\n\n::: callout-caution\nTo understand the examples enough to be able to substantially edit them you will need some familiarity with R and [ggplot2](https://ggplot2.tidyverse.org/) \\autocite[see][]{Wickham2016,Aphalo2020a}. On the other hand these examples, specially the simpler ones, can be used as a template, by only editing the data. You only need to remember that all vectors of values in a data frame or tibble must have the same length. I have used mnemonic names so as to make the role of the variables and data obvious.\n:::\n\n# A simple timeline\n\nThe first example is a timeline plot showing when each past issue of this Bulletin was published. We use two very popular packages, [ggplot2](https://ggplot2.tidyverse.org/) for the plotting, and [lubridate](https://lubridate.tidyverse.org/) to more easily deal with dates \\autocite{Grolemund2011,Wickham2016}.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(lubridate)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nissues.tb <-\n  data.frame(what = c(\"2015:1\", \"2016:1\", \"2016:2\", \"2017:1\", \"2018:1\",\n                      \"2018:2\", \"2019:1\", \"2020:1\", \"2020:2\"),\n             when = ymd(c(\"2015-12-01\", \"2016-06-20\", \"2017-03-04\",\n                          \"2017-10-13\", \"2018-04-15\", \"2018-12-31\",\n                          \"2020-01-13\", \"2020-09-13\", \"2021-02-28\")),\n             event.type = \"Bulletin\")\n```\n:::\n\n\nA timeline with sparse events is easy to plot once we have the data. The plots are displayed in this article as narrow horizontal strips. The width and height of the plots is decided when they are printed or exported (code not visible here).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(issues.tb, aes(x = when, y = event.type, label = what)) +\n  geom_line() +\n  geom_point() +\n  geom_text(hjust = -0.3, angle = 45) +\n  scale_x_date(name = \"\", date_breaks = \"1 years\") +\n  scale_y_discrete(name = \"\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](plot-timeline_files/figure-html/unnamed-chunk-3-1.svg)\n:::\n:::\n\n\nIn the plot above, using defaults, there is too much white space below the timeline and the rightmost text label is not shown in full. We expand the $x$ axis on the right and remove some white space from the $y$ axis by adjusting the scales' expansion (the default is `mult = 0.05`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(issues.tb, aes(x = when, y = event.type, label = what)) +\n  geom_line() +\n  geom_point() +\n  geom_text(hjust = -0.3, angle = 45) +\n  scale_x_date(name = \"\", date_breaks = \"1 years\",\n               expand = expansion(mult = c(0.05, 0.1))) +\n  scale_y_discrete(name = \"\",\n                   expand = expansion(mult = c(0.01, 0.04))) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](plot-timeline_files/figure-html/unnamed-chunk-4-1.svg)\n:::\n:::\n\n\n# Two parallel timelines\n\nLet's add a second parallel timeline with the UV4Plants Network Meetings and extend both ends of the lines. We use package [dplyr](https://dplyr.tidyverse.org/) to filter part of the data on the fly so that no points are plotted at the ends of the lines.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(dplyr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nuv4plants.tb <-\n  data.frame(what = c(\"\", \"2015:1\", \"2016:1\", \"2016:2\", \"2017:1\", \"2018:1\",\n                      \"2018:2\", \"2019:1\", \"2020:1\", \"2020:2\", \"\",\n                      \"\", \"PÃ©cs  \", \"Szeged\", \"Kiel  \", \"\"),\n             when = ymd(c(\"2015-01-01\", \"2015-12-01\", \"2016-06-20\",\n                          \"2017-03-04\", \"2017-10-13\", \"2018-04-15\",\n                          \"2018-12-31\", \"2020-01-13\", \"2020-09-13\",\n                          \"2020-12-30\", \"2021-01-30\",\n                          \"2015-01-01\", \"2016-04-01\", \"2018-04-01\",\n                          \"2020-10-01\", \"2021-02-28\")),\n             event.type = c(rep(\"Bulletin\", 11), rep(\"Meetings\", 5)))\n```\n:::\n\n\nCompared to a single timeline the main change is in the data. The code remains very similar. We do need to adjust the expansion of the $y$-axis (by trial and error).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(uv4plants.tb, aes(x = when, y = event.type, label = what)) +\n  geom_line() +\n  geom_point(data = . %>% filter(what != \"\")) +\n  geom_text(hjust = -0.3, angle = 45) +\n  scale_x_date(name = \"\", date_breaks = \"1 years\",\n               expand = expansion(mult = c(0.05, 0.1))) +\n  scale_y_discrete(name = \"\",\n                   expand = expansion(mult = c(0.2, 0.75))) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](plot-timeline_files/figure-html/unnamed-chunk-7-1.svg)\n:::\n:::\n\n\nWe add colours by adding `aes(colour = event.type)` to the call to `geom_text()`. To override the default colours we use `scale_colour_manual()` and as we do not need a key to indicate the meaning of the colours, we add to the call `guide = \"none\"`. In this example the colour is only applied to the text labels, but we can similarly add colour to the lines and points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(uv4plants.tb, aes(x = when, y = event.type, label = what)) +\n  geom_line() +\n  geom_point(data = . %>% filter(what != \"\")) +\n  geom_text(aes(colour = event.type), hjust = -0.3, angle = 45) +\n  scale_x_date(name = \"\", date_breaks = \"1 years\",\n               expand = expansion(mult = c(0.05, 0.1))) +\n  scale_y_discrete(name = \"\",\n                   expand = expansion(mult = c(0.2, 0.75))) +\n  scale_colour_manual(values = c(Bulletin = \"darkgreen\", Meetings = \"purple\"),\n                      guide = \"none\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](plot-timeline_files/figure-html/unnamed-chunk-8-1.svg)\n:::\n:::\n\n\n# Crowded timeline\n\nLet's assume an experiment with plants, and create some data. As the labels are rather long and we want to keep the text horizontal, we will use package [ggrepel](https://ggrepel.slowkow.com/) which provides geoms that implement repulsion of labels to automatically avoid overlaps \\autocite{Slowikowski2021}.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(ggrepel)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplants.tb <-\n  data.frame(what = c(\"sowing\", \"first emergence\", \"last emergence\", \"Dualex\",\n                      \"treatment start\", \"Dualex\", \"harvest\"),\n             when = ymd(c(\"2020-05-01\", \"2020-05-06\", \"2020-05-11\", \"2020-06-21\",\n                       \"2020-06-22\", \"2020-06-29\", \"2020-06-30\")),\n             series = \"Experiment 1\")\n```\n:::\n\n\nNow the labels would overlap, so we let R find a place for them using `geom_text_repel()` instead of `geom_text()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(plants.tb, aes(x = when, y = series, label = what)) +\n    geom_line() +\n    geom_point() +\n    geom_text_repel(direction = \"y\",\n                    point.padding = 0.5,\n                    hjust = 0,\n                    box.padding = 1,\n                    seed = 123) +\n    scale_x_date(name = \"\", date_breaks = \"1 months\", date_labels = \"%d %B\",\n                 expand = expansion(mult = c(0.12, 0.12))) +\n    scale_y_discrete(name = \"\") +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](plot-timeline_files/figure-html/unnamed-chunk-11-1.svg)\n:::\n:::\n\n\nAs germination and treatments are periods, we can highlight them more elegantly. For this we will create a second data frame with data for the periods.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplants_periods.tb <-\n  data.frame(Periods = c(\"seedling\\nemergence\",\n                      \"treatment\\nperiod\"),\n             start = ymd(c(\"2020-05-06\", \"2020-06-22\")),\n             end = ymd(c(\"2020-05-11\", \"2020-06-30\")),\n             series = \"Experiment 1\")\n```\n:::\n\n\nWe highlight two periods using colours, and move the corresponding key to the top.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(plants.tb, aes(x = when, y = series)) +\n  geom_line() +\n  geom_segment(data = plants_periods.tb,\n               mapping = aes(x = start, xend = end,\n                             y = series, yend = series,\n                             colour = Periods),\n               linewidth = 2) +\n  geom_point() +\n  geom_text_repel(aes(label = what),\n                  direction = \"y\",\n                  point.padding = 0.5,\n                  hjust = 0,\n                  box.padding = 1,\n                  seed = 123) +\n  scale_x_date(name = \"\", date_breaks = \"1 months\", date_labels = \"%d %B\",\n               expand = expansion(mult = c(0.12, 0.12))) +\n  scale_y_discrete(name = \"\") +\n  theme_minimal() +\n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](plot-timeline_files/figure-html/unnamed-chunk-13-1.svg)\n:::\n:::\n\n\n# Timelines of graphic elements\n\nFinally an example where the \"labels\" are inset plots. The aim is to have a timeline of the course of the year with plots showing the course of solar elevation through specific days of the year. This is a more complex example where we customize the plot theme.\n\nWe will use package [ggpp](https://docs.r4photobiology.info/ggpp/) that provides a geom for easily insetting plots into a larger plot and package [photobiology](https://docs.r4photobiology.info/photobiology/) to compute the solar elevation \\autocite{Aphalo2016a,Aphalo2021}.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(ggpp)\nlibrary(photobiology)\nlibrary(dplyr)\n```\n:::\n\n\nAs we will need to make several, very similar plots, we first define a function that returns a plot and takes as arguments a date and a geocode. The intention is to create plots that are almost like icons, extremely simple but still comparable and conveying useful information. To achieve these aims we need to make sure that irrespective of the actual range of solar elevations the limits of the $y$-axis are -90 and +90 degrees. We use a pale gray background instead of axes to show this range, but making sure that the default expansion of the axis limits is not applied.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_sun_elevation_plot <- function(date, geocode) {\n  # 97 points in time from midnight to midnight\n  t <- rep(date, 24 * 4 + 1) +\n         hours(c(rep(0:23, each = 4), 24)) +\n         minutes(c(rep(c(0, 15, 30, 45), times = 24), 0))\n  e <- sun_elevation(time = t, geocode = geocode)\n  ggplot(data.frame(t, e), aes(t, e)) +\n    geom_hline(yintercept = 0, linetype = \"dotted\") +\n    geom_line() +\n    expand_limits(y = c(-90, 90)) +\n    scale_x_datetime(date_labels = \"%H:%m\", expand = expansion()) +\n    scale_y_continuous(expand = expansion()) +\n    theme_void() +\n    theme(panel.background = element_rect(fill = \"grey95\",\n                                          color = NA),\n          panel.border = element_blank())\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_sun_elevation_plot(date = ymd(\"2020-06-21\"),\n                        geocode = tibble(lon = 0,\n                                         lat = 0,\n                                         address = \"Equator\"))\n```\n\n::: {.cell-output-display}\n![](plot-timeline_files/figure-html/unnamed-chunk-16-1.svg)\n:::\n:::\n\n\nNow that we have a working function, assembling the data for the timeline is not much more complex than in earlier examples. We add two dates, one at each\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeocode <- tibble(lon = 0, lat = 51.5, address = \"Greenwich\")\ndates <- ymd(c(\"2020-02-20\", \"2020-03-21\", \"2020-6-21\",\n               \"2020-09-21\", \"2020-12-21\", \"2021-01-22\"))\ndate.ticks <- dates[2:5]\ndate.ends <- dates[c(1, 6)]\nsun_elevation.tb <-\n  tibble(when = dates,\n         where = geocode$address,\n         plots = lapply(dates, make_sun_elevation_plot, geocode = geocode))\n```\n:::\n\n\nThe code used to plot the timeline follows the same pattern as in the examples above, except that we replace `geom_text()` with `geom_plot()`. This also entails overriding the default size (`vp.height` and `vp.width`) and justification (`vjust` and `hjust`) of the insets .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(sun_elevation.tb, aes(x = when, y = where, label = plots)) +\n    geom_line() +\n    geom_point(data = . %>% filter(day(when) == 21)) +\n    geom_plot(data = . %>% filter(day(when) == 21),\n              inherit.aes = TRUE,\n              vp.width = 0.15, vp.height = 0.6, vjust = -0.1, hjust = 0.5) +\n    scale_x_date(name = \"\", breaks = date.ticks, date_labels = \"%d %b\") +\n    scale_y_discrete(name = \"\",\n                   expand = expansion(mult = c(0.1, 0.35))) +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](plot-timeline_files/figure-html/unnamed-chunk-18-1.svg)\n:::\n:::\n\n\nAnd to finalize, we plot three parallel timelines, each for a different latitude. For this we can reuse the function defined above, passing as argument geocodes for three different locations. We reuse the dates defined above, but use `rep()` to repeat this sequence for each location.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeocodes <-\n  tibble(lon = c(0, 0, 0, 0, 0),\n         lat = c(66.5634, 23.4394, 0, -23.4394, -66.5634),\n         address = c(\"Northern\\nPolar\\nCircle\", \"Tropic of\\nCancer\", \"Equator\",\n                     \"Tropic of\\nCapricorn\", \"Southern\\nPolar\\nCircle\"))\nsun_elevation.tb <-\n  tibble(when = rep(dates, nrow(geocodes)),\n         where = rep(geocodes$address, each = length(dates)),\n         plots = c(lapply(dates, make_sun_elevation_plot, geocode = geocodes[1, ]),\n                   lapply(dates, make_sun_elevation_plot, geocode = geocodes[2, ]),\n                   lapply(dates, make_sun_elevation_plot, geocode = geocodes[3, ]),\n                   lapply(dates, make_sun_elevation_plot, geocode = geocodes[4, ]),\n                   lapply(dates, make_sun_elevation_plot, geocode = geocodes[5, ])))\nsun_elevation.tb$where <-\n  factor(sun_elevation.tb$where, levels = rev(geocodes$address))\n```\n:::\n\n\nThe only change from the code used above to plot a single timeline is related to the vertical size of the inset plots as it is expressed relative to the size of the whole plot. We also add a title, a subtitle and a caption, and tweak the theme of the main plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(sun_elevation.tb, aes(x = when, y = where, label = plots)) +\n  geom_line() +\n  geom_point(data = . %>% filter(day(when) == 21)) +\n  geom_plot(data = . %>% filter(day(when) == 21),\n            inherit.aes = TRUE,\n            vp.width = 0.15, vp.height = 0.12, vjust = -0.1, hjust = 0.5) +\n  scale_x_date(name = \"\", breaks = date.ticks, date_labels = \"%d %b\") +\n  scale_y_discrete(name = \"\", expand = expansion(mult = c(0.05, 0.25))) +\n  labs(title = \"Solar elevation through the day\",\n       subtitle = \"The dotted line indicates the horizon (e = 0)\",\n       caption = \"Inset plots are drawn using consistent x and y scale limits.\") +\n  theme_minimal() +\n  theme(panel.grid.minor.x = element_blank(),\n        panel.grid.major.x = element_blank(),\n        axis.ticks.x.bottom = element_line())\n```\n\n::: {.cell-output-display}\n![](plot-timeline_files/figure-html/unnamed-chunk-20-1.svg)\n:::\n:::\n\n\nThe five parallel timelines become rather crowded so an option is to build a matrix of plots. We achieve this by editing the code for the previous plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(sun_elevation.tb, aes(x = when, y = where, label = plots)) +\n  geom_plot(data = . %>% filter(day(when) == 21),\n            inherit.aes = TRUE,\n            vp.width = 0.18, vp.height = 0.15, vjust = 0.5, hjust = 0.5) +\n  scale_x_date(name = \"\", breaks = date.ticks,\n               limits = date.ends,\n               date_labels = \"%d %b\") +\n  scale_y_discrete(name = \"\") +\n  labs(title = \"Solar elevation through the day\",\n       subtitle = \"The dotted line indicates the horizon (e = 0)\",\n       caption = \"Inset plots are drawn using consistent x and y scale limits.\") +\n  theme_minimal() +\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major = element_blank())\n```\n\n::: {.cell-output-display}\n![](plot-timeline_files/figure-html/unnamed-chunk-21-1.svg)\n:::\n:::\n\n\n# Related plots\n\nPackage [ggpp](https://docs.r4photobiology.info/ggpp/) provides in addition to `geom_plot()`, `geom_table()` and `geom_grob()`. The first of them makes it possible to inset a data frame as a table, and the second any graphic object supported by package 'grid' (_grob_ for short), which is part of R itself. These graphic objects can be vector graphics or bitmaps (or raster images) converted into grobs. Examples of how to convert bitmaps and vector graphics read from files of various formats is described in the documentation of packages `grid', [magick](https://docs.ropensci.org/magick/) and more briefly in package [ggpp](https://docs.r4photobiology.info/ggpp/). See the book _R Graphics_ [@Murrell2011] for details.\n\nUsing photographs converted to grobs one can, for example, create phenological time lines. Another variation could to be to use a similar approach to represent geographic or topographic transects. In this last case instead of only using the $x$-axis to map time, one could map distance to the $x$-axis and elevation to the $y$-axis. Furthermore, one can use package `patchwork' to assemble a multi-panel figure in which one panel is a time line plot and other panels display other types of plots or even tables.\n\n# References\n\n::: {#refs}\n:::\n",
    "supporting": [
      "plot-timeline_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}