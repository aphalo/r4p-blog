{
  "hash": "f1480bbd6073611908e7cb68eb912745",
  "result": {
    "markdown": "---\ntitle: \"Model fitting in R\"\nsubtitle: \"An introduction\"\nauthor: \"Pedro J. Aphalo\"\ndate: 2022-05-3\ndate-modified: 2023-05-30\ncategories: [R, model fitting]\nkeywords: [predicted values, residual values, parameter estimates, model formulas]\nformat:\n  html:\n    code-fold: true\n    code-tools: true\n---\n\n\n## Introduction\n\nFitting a model to data consists in finding the parameter values that best\nexplain the data or observations. These parameter values are estimates of\nthose in a larger population of possible observations from which we have\ndrawn a sample or subset.\n\nModel selection involves comparing models that differ in their structure, i.e., \nin the formula that relates parameters and data.\n\nIn general, there are many different aspects of a model fit that we may be\ninterested in. The most computationally intensive step is the fitting itself.\nThus R's approach is to save the results from fitting, or fitted model and\nseparately query it for different derived numerical and graphical output as \nneeded.\n\n## Fitting a model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggpmisc)\nlibrary(broom)\n\nset.seed(19065)\n# set.seed(4321) # change or comment out to get different psedorandom values\n# generate artificial data\nx <- 1:24\ny <- (x + x^2 + x^3) + rnorm(length(x), mean = 0, sd = mean(x^3) / 2)\ny <- y / max(y)\nmy.data <- data.frame(x, \n                      y, \n                      group = c(\"A\", \"B\"), \n                      y2 = y * c(1, 2) + c(0, 0.2),\n                      block = c(\"a\", \"a\", \"b\", \"b\"),\n                      wt = sqrt(x))\n```\n:::\n\n\nWe normally save the fitted model object into a variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfm1 <- lm(formula = y ~ poly(x, 3), data = my.data)\n```\n:::\n\n\nThen we query this object saved in variable `cars.lm` with different methods, \nfor example with `summary()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(fm1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = y ~ poly(x, 3), data = my.data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.24817 -0.07635  0.01945  0.08890  0.18264 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  0.25644    0.02525  10.154 2.44e-09 ***\npoly(x, 3)1  1.49842    0.12372  12.111 1.15e-10 ***\npoly(x, 3)2  0.55768    0.12372   4.508 0.000215 ***\npoly(x, 3)3 -0.06142    0.12372  -0.496 0.625015    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.1237 on 20 degrees of freedom\nMultiple R-squared:  0.8932,\tAdjusted R-squared:  0.8772 \nF-statistic: 55.75 on 3 and 20 DF,  p-value: 6.793e-10\n```\n:::\n:::\n\n\n## Fitted values\n\nThe observations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(my.data, aes(x = x, y = y)) +\n         geom_point()\n```\n\n::: {.cell-output-display}\n![](R-model-fitting-intro_files/figure-html/unnamed-chunk-4-1.svg)\n:::\n:::\n\n\nThe fitted values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(my.data, aes(x = x, y = y)) +\n         geom_point() +\n  stat_fit_fitted(formula = y ~ poly(x, 3), colour = \"blue\")\n```\n\n::: {.cell-output-display}\n![](R-model-fitting-intro_files/figure-html/unnamed-chunk-5-1.svg)\n:::\n:::\n\n\nThe prediction line.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(my.data, aes(x = x, y = y)) +\n         geom_point() +\n  stat_poly_line(formula = y ~ poly(x, 3), se = FALSE)\n```\n\n::: {.cell-output-display}\n![](R-model-fitting-intro_files/figure-html/unnamed-chunk-6-1.svg)\n:::\n:::\n\n\n\nThe prediction line plus its 95% confidence band.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(my.data, aes(x = x, y = y)) +\n         geom_point() +\n  stat_poly_line(formula = y ~ poly(x, 3), se = TRUE)\n```\n\n::: {.cell-output-display}\n![](R-model-fitting-intro_files/figure-html/unnamed-chunk-7-1.svg)\n:::\n:::\n\n\nThe prediction line plus its 95% confidence band with extrapolation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(my.data, aes(x = x, y = y)) +\n         geom_point() +\n  geom_vline(xintercept = range(my.data$x), size = 0.33) +\n  stat_poly_line(formula = y ~ poly(x, 3), se = TRUE, fullrange = TRUE) +\n  expand_limits(x = c(-10, 40)) # an arbitrary range\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nâ„¹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](R-model-fitting-intro_files/figure-html/unnamed-chunk-8-1.svg)\n:::\n:::\n\n\nThe residuals plotted as deviations from the prediction line.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(my.data, aes(x = x, y = y)) +\n         geom_point() +\n  stat_poly_line(formula = y ~ poly(x, 3), se = FALSE) +\n  stat_fit_deviations(formula = y ~ poly(x, 3), colour = \"red\", \n                      arrow = arrow(length = unit(0.33, \"lines\"), ends = \"both\"))\n```\n\n::: {.cell-output-display}\n![](R-model-fitting-intro_files/figure-html/unnamed-chunk-9-1.svg)\n:::\n:::\n\n\n\nThe residuals plotted as deviations from the fitted values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(my.data, aes(x = x, y = y)) +\n         geom_point() +\n  stat_fit_deviations(formula = y ~ poly(x, 3), \n                      colour = \"red\", \n                      arrow = arrow(length = unit(0.33, \"lines\"), ends = \"both\")) +\n  stat_fit_fitted(formula = y ~ poly(x, 3), colour = \"blue\")\n```\n\n::: {.cell-output-display}\n![](R-model-fitting-intro_files/figure-html/unnamed-chunk-10-1.svg)\n:::\n:::\n\n\nThe residuals plotted on their own.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(my.data, aes(x = x, y = y)) +\n  geom_hline(yintercept = 0, linetype = \"dashed\") +\n  stat_fit_residuals(formula = y ~ poly(x, 3),\n                     colour = \"red\")\n```\n\n::: {.cell-output-display}\n![](R-model-fitting-intro_files/figure-html/unnamed-chunk-11-1.svg)\n:::\n:::\n\n\n## Flowcharts for model fitting\n\n\n```{mermaid}\n%%| label: fig-barebones\n%%| fig-cap: A minimalist diagram of model fitting in R.\n%%{init: {\"htmlLabels\": true} }%%\n\nflowchart LR\n  A(<i>model formula</i>) --> B[model fit\\nfunction] --> C(model fit\\nobject) --> D1['diagnostics' plots]\n  AA(<i>observations</i>) --> B\n  C --> D2[query methods]\n```\n\n```{mermaid}\n%%| label: fig-lm\n%%| fig-cap: A diagram of linear-model (LM) fitting in R.\n%%{init: {\"htmlLabels\": true} }%%\n\nflowchart LR\n  A1(<i>model formula</i>) --> B[\"<code>lm()</code>\"] --> C(<code>lm</code> object) --> C1[\"<code>plot()</code>\"]\n  A2(<i>observations</i>) --> B\n  A3(<i>weights</i>) -.-> B\n  C --> C2[\"<code>summary()</code>\"]\nC --> C3[\"<code>anova()</code>\"]\nC --> C4[\"<code>residuals()</code>\"]\nC --> C5[\"<code>fitted()</code>\"]\nC --> C6[\"<code>AIC()</code>\"]\nC --> C7[\"<code>BIC()</code>\"]\nC --> C8[\"<code>coefficients()</code>\"]\nC --> C11[\"<code>formula()</code>\"]\nC --> C12[\"<code>weights()</code>\"]\nC --> C9[\"<code>confint()</code>\"]\nC --> C10[\"<code>predict()</code>\"]\nBB(\"<i>new data</i>\") --> C10\n```\n\n```{mermaid}\n%%| label: fig-glm\n%%| fig-cap: A diagram of generalized-linear-model (GLM) fitting in R. Query methods as in @fig-lm.\n%%{init: {\"htmlLabels\": true} }%%\n\nflowchart LR\n  A1(<i>model formula</i>) --> B[\"<code>glm()</code>\"] --> C(<code>glm</code> object) --> C1[query methods]\n  A2(<i>observations</i>) --> B\n  A3(<i>weights</i>) -.-> B\n  A4(<i>family</i> and <i>link</i>) --> B\n```\n\n```{mermaid}\n%%| label: fig-nls\n%%| fig-cap: A diagram of nonlinear least squares (NLS) model fitting by numerical approximation in R. Query methods similar to those in @fig-lm.\n%%{init: {\"htmlLabels\": true} }%%\n\nflowchart LR\n  A1(<i>model formula</i>) --> B[\"<code>gls()</code>\"] --> C(<code>nls</code> object) --> C1[query methods]\n  A2(<i>observations</i>) --> B\n  A3(<i>weights</i>) -.-> B\n  A5(<i>starting values</i>) --> B\n```\n\n\n## Flowcharts for model selection\n\nModel selection can be done manually by comparing models fitted individually or automatically using a stepwise approach.\n\n\n```{mermaid}\n%%| label: fig-lm-step\n%%| fig-cap: A diagram of linear-model (LM) fitting with stepwise model selection in R.\n%%{init: {\"htmlLabels\": true} }%%\n\nflowchart TB\n  A1(<i>model formula</i>) --> B[\"<code>lm()</code>\"] --> C(<code>lm</code> object)\n  A2(<i>observations</i>) --> B\n  A3(<i>weights</i>) -.-> B\n  C --> CI[query methods]\n  C --> C1[\"<code>step()</code>\"]\n  subgraph \"<strong>Model selection</strong>\"\n  C1 --> C3(<code>lm</code>  object)\n  z1(most complex\\n<i>model formula</i>) -.-> C1\n  z2(simplest nested\\n<i>model formula</i>) -.-> C1\n  C3 --> CF[query methods]\n  end\n```\n",
    "supporting": [
      "R-model-fitting-intro_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}