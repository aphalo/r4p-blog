{
  "hash": "49d2f17811d4b2fed34d18ddd7e89d7a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R at its simplest\"\nsubtitle: \"R vs. calculator vs. Excel\"\nauthor: \"Pedro J. Aphalo\"\ndate: 2023-09-19\ndate-modified: 2023-10-14\ncategories: [R]\nkeywords: [introduction]\nformat:\n  html:\n    code-fold: false\n    code-tools: true\nabstract: \n  A very simple introduction to R, based on a comparison to calculators and worksheets.\ndraft: false\n---\n\n\n## R compared to a calculator\n\nFor the simplest computations there is little difference between a calculator and R (e.g., if one uses the number pad of the computer keyboard). Nowadays, advanced calculators show the entered text in full, like R does. One uses enter in R, instead of the equals key in a calculator.\n\n$36 / 12 + 1$\n\n\n::: {.cell}\n\n```{.r .cell-code}\n36 / 12 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\nOf course, in a computer there are no keys for square root and similar, we type the name of the function instead. \n\n$\\sqrt{36}$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(36)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\nIn a calculator we use \"memories\" (e.g., M1, M2, etc. ) to store values, with keys frequently labeled \"MSTO\" and \"MRCL\" used to store and recal them. In R we use names or _variables_, that we can chose, and use `<name> <-` to store a value and the `<name>` to recall the stored value. I use `<name>` to signify any valid name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_number <- 36\nmy_number\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 36\n```\n\n\n:::\n:::\n\n\nWe have assigned `36` to `my_number` and we can now use `my_number` in computations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_number / 12 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\nsqrt(my_number)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\nWhy is this useful? Because, we can describe the operations using names, instead of specific numbers or values. This makes it possible to describe the operation to be done, as an abstract rule that we can apply unchanged to different numbers, by assigning them to the name used in the code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_number <- 24\nmy_number / 12 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\nsqrt(my_number)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.898979\n```\n\n\n:::\n:::\n\n\n### Precedence rules\n\nThe normal arithmetic precedence rules apply to R expressions, and the order can be altered with parentheses following the normal rules as in arithmetic. While in mathematics it is common to use different brackets depending on the nesting depth $\\{[( )]\\}$ in R only parentheses `( )` are used to any depth of nesting. _The other brackets are reserved for other uses._\n\n$36 / (12 + 1)$\n\n\n::: {.cell}\n\n```{.r .cell-code}\n36 / (12 + 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.769231\n```\n\n\n:::\n:::\n\n\n## R compared to Excel\n\nIn R one can store values in a `data.frame` that is somehow similar to a worksheet, in that each column is a variable and each row corresponds to an observation or measurement event. \n\nWe construct a vector by concatenating values with function `c()` (_concatenate_).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1, 2, 3, 4, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n:::\n\n\nWe use function `data.frame()` to construct a new data frame, that here gets displayed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(ID = c(1, 2, 3, 4, 5), \n           height = c(170, 155, 145, 180, 167), \n           weight = c(70, 60, 55, 90, 85))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  ID height weight\n1  1    170     70\n2  2    155     60\n3  3    145     55\n4  4    180     90\n5  5    167     85\n```\n\n\n:::\n:::\n\n\nOn the other hand, in R instructions for calculations and data are kept separate. The data frame can contain not only numbers, but also text and other values but not formulas. The calculations are entered separately, and a single \"formula\" can refer to whole vectors or columns.\n\nWe start by giving a name to the data frame, i.e., storing it in a variable, so that it remains available.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy.df <- data.frame(height = c(1.70, 1.55, 1.45, 1.80, 1.67), # meters\n                    weight = c(56, 60, 55, 90, 85)) # kg\nprint(my.df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  height weight\n1   1.70     56\n2   1.55     60\n3   1.45     55\n4   1.80     90\n5   1.67     85\n```\n\n\n:::\n:::\n\n\nTo compute the body mass index (BMI) and add it as a new column, we use \"instructions\" that make reference to whole columns in the data frame. To _extract_ a column, we use here operator `$`, so that `my.df$weight` is column `weight` from data frame `my.df`. The same computation is applied to each row.\n\n$$BMI = \\frac{m}{h^2}$$\nwhere $m$ is the weight and $h$ the height of a person.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy.df$BMI <- my.df$weight / my.df$height^2 \nprint(my.df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  height weight      BMI\n1   1.70     56 19.37716\n2   1.55     60 24.97399\n3   1.45     55 26.15933\n4   1.80     90 27.77778\n5   1.67     85 30.47797\n```\n\n\n:::\n:::\n\n\nIf `my.df` had 1000's or even 1000000's of rows, we would have only one copy of the instructions for the operation, or a single _code statement_. In Excel one copy of the formula in each row of the worksheet would be needed.\n\nData frames are always rectangular and subject to much more strict rules than worksheets (no empty spaces, no plots, etc.).\n\n## Functions\n\nFunctions are named pieces or _chuncks_ of code, defined using named placeholders or _parameters_ to which we can pass values as _arguments_.\n\nIn an the examples above we _called_ function `sqrt()` with a _constant value_ `36` as argument and also with variable `my_number` as argument.\n\nThere are many different predefined functions in R, and as we will see later, we can also create our own functions.\n\n## Arithmetic operators and math functions\n\nStart by exploring the help to find the arithmetic operators and functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(Arithmetic)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(sqrt)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(log)\n```\n:::\n\n\nHave a look also at the triginometric functions. Trigonometric functions accept angles in radians, not in degrees!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(Trig)\n```\n:::\n\n\n### Time to play\n\nNow it is time for your to play with numbers. Use R as you would use a (scientific) calculator using both numeric constants like `123` directly and after saving them to a variable.\n\na.  $\\sqrt{7 + 2}$\na.  $\\frac{\\log_{10}(100)}{3 + 2}$\na.  $e^4$\na.  $sin(2 \\times \\pi)$\na.  $cos(\\pi / 4)$\na.  try your own examples, i.e., **play!**\n\n## Simple statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(mean) # mean or average\nhelp(var) # variance\nhelp(sd) # standard deviation\nhelp(median) # median\nhelp(mad) # median absolute deviation\nhelp(mode) # mode\n```\n:::\n\n\nAnd a couple of summaries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(sum)\nhelp(prod)\n```\n:::\n\n\n### Time to play\n\nNow it is time for your to play with numbers.\n\n$$x = 1, 3, 5, 10, 7, 8$$\n\na.  $\\bar{x}$ (mean)\na.  $s^2(x)$ (variance)\na.  $s(x)$ (standard deviation)\na.  $\\sum_{i=1}^{i=n} x_i$ (sum)\na.  $\\prod_{i=1}^{i=n} x_i$ (product)\na.  $\\bar{x} = \\sum_{i=1}^{i=n} x_i / n$\na.  try your own examples, i.e., **play!**\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}