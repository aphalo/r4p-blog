{
<<<<<<< HEAD
  "hash": "f7dbcf0d6c5030eca0981538e4f671f4",
  "result": {
    "markdown": "---\ntitle: \"R at its simplest\"\nsubtitle: \"R vs. calculator vs. Excel\"\nauthor: \"Pedro J. Aphalo\"\ndate: 2023-09-19\ndate-modified: 2023-09-19\ncode-fold: false\ndraft: true\n---\n\n\n## R compared to a calculator\n\nFor the simplest computations there is little difference between a calculator and R (e.g., if one uses the number pad of the computer keyboard). Nowadays, advanced calculators show the entered text in full, like R does. One uses enter in R, instead of the equals key in a calculator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n36 / 12 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\nOf course, in a computer there are no keys for square root and similar, we type the name of the function instead. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(36)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\nIn a calculator we use \"memories\" (e.g., M1, M2, etc. ) to store values, with keys frequently labeled \"MSTO\" and \"MRCL\" used to store and recal them. In R we use names or _variables_, that we can chose, and use `<name> <-` to store a value and the `<name>` to recall the stored value. I use `<name>` to signify any valid name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_number <- 36\nmy_number\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 36\n```\n\n\n:::\n:::\n\n\nWe have assigned `36` to `a_name` and we can now use `a_name` in computations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_number / 12 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\nsqrt(my_number)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\nWhy is this useful? Because, we can describe the operations using names, instead of specific numbers or values. This allows to define to operantion to be done, as an abstract rule that we can apply unchanged to different numbers, by assigning them to variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_number <- 24\nmy_number / 12 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\nsqrt(my_number)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.898979\n```\n\n\n:::\n:::\n\n\n## R compared to Excel\n\nIn R one can store values in a `data.frame` that is a bit similar to a worksheet, in that each column is a variable and each row corresponds to an observation or measurement event.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(ID = c(1, 2, 3, 4, 5), \n           height = c(170, 155, 145, 180, 167), \n           weight = c(70, 60, 55, 90, 85))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  ID height weight\n1  1    170     70\n2  2    155     60\n3  3    145     55\n4  4    180     90\n5  5    167     85\n```\n\n\n:::\n:::\n\n\nOn the other hand, in R instructions for calculations and data are kept separate. The data frame can contain not only numbers, but also text and other values but not formulas. The calculations are entered separately, and a single \"formula\" can refer to whole vectors or columns.\n\nWe start by giving a name to the data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy.df <- data.frame(ID = c(1, 2, 3, 4, 5), \n                    height = c(1.70, 1.55, 1.45, 1.80, 1.67), # metres\n                    weight = c(56, 60, 55, 90, 85)) # kg\nprint(my.df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  ID height weight\n1  1   1.70     56\n2  2   1.55     60\n3  3   1.45     55\n4  4   1.80     90\n5  5   1.67     85\n```\n\n\n:::\n:::\n\n\nTo compute the body mass index (BMI) and add it as a new column, we use \"instructions\" that make reference to the columns in the data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy.df$BMI <- my.df$weight / my.df$height^2 \nprint(my.df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  ID height weight      BMI\n1  1   1.70     56 19.37716\n2  2   1.55     60 24.97399\n3  3   1.45     55 26.15933\n4  4   1.80     90 27.77778\n5  5   1.67     85 30.47797\n```\n\n\n:::\n:::\n\n\nIf `my.df` had 1000's or even 1000000's of rows, we would have only one copy of what in Excel would have been one copy of the formula in each row.\n\nData frames are always rectangular and subject to much more strict rules than worksheets.\n",
=======
  "hash": "612c399b858274a478b9bd0cd47d6ffc",
  "result": {
    "markdown": "---\ntitle: \"R at its simplest\"\nsubtitle: \"R vs. calculator vs. Excel\"\nauthor: \"Pedro J. Aphalo\"\ndate: 2023-09-19\ndate-modified: 2023-09-19\ncategories: [R]\nkeywords: [introduction]\nformat:\n  html:\n    code-fold: false\n    code-tools: true\nabstract: \n  A very basic introduction to R, based on a comparison to claculators and worksheets.\ndraft: true\n---\n\n\n## R compared to a calculator\n\nFor the simplest computations there is little difference between a calculator and R (e.g., if one uses the number pad of the computer keyboard). Nowadays, advanced calculators show the entered text in full, like R does. One uses enter in R, instead of the equals key in a calculator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n36 / 12 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\nOf course, in a computer there are no keys for square root and similar, we type the name of the function instead. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(36)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\nIn a calculator we use \"memories\" (e.g., M1, M2, etc. ) to store values, with keys frequently labeled \"MSTO\" and \"MRCL\" used to store and recal them. In R we use names or _variables_, that we can chose, and use `<name> <-` to store a value and the `<name>` to recall the stored value. I use `<name>` to signify any valid name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_number <- 36\nmy_number\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 36\n```\n\n\n:::\n:::\n\n\nWe have assigned `36` to `a_name` and we can now use `a_name` in computations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_number / 12 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\nsqrt(my_number)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\nWhy is this useful? Because, we can describe the operations using names, instead of specific numbers or values. This allows to describe the operation to be done, as an abstract rule that we can apply unchanged to different numbers, by assigning them to the names used in the code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_number <- 24\nmy_number / 12 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\nsqrt(my_number)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.898979\n```\n\n\n:::\n:::\n\n\n## Precedence rules\n\nThe normal arithmetic precedence rules apply to R expressions, and the order can be altered with parentheses following the normal rules. While in arithmetic it is common to use different brackets depending on the nesting ${[()]}$ in R only parentheses are used to indicate the order of precedence in evaluation. _The other brackets are reserved for other uses._\n\n## Functions\n\nFunctions are named _chuncks_ of code, defined using named placeholders or _parameters_ to which we can pass values as _arguments_.\n\nIn an the examples above we _called_ function `sqrt()` with a _constant value_ `36` as argument and also with variable `my_number` as argument.\n\n## Time to play\n\nNow it is time for your to play with numbers.\n\n",
>>>>>>> master
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}