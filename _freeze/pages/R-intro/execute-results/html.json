{
  "hash": "612c399b858274a478b9bd0cd47d6ffc",
  "result": {
    "markdown": "---\ntitle: \"R at its simplest\"\nsubtitle: \"R vs. calculator vs. Excel\"\nauthor: \"Pedro J. Aphalo\"\ndate: 2023-09-19\ndate-modified: 2023-09-19\ncategories: [R]\nkeywords: [introduction]\nformat:\n  html:\n    code-fold: false\n    code-tools: true\nabstract: \n  A very basic introduction to R, based on a comparison to claculators and worksheets.\ndraft: true\n---\n\n\n## R compared to a calculator\n\nFor the simplest computations there is little difference between a calculator and R (e.g., if one uses the number pad of the computer keyboard). Nowadays, advanced calculators show the entered text in full, like R does. One uses enter in R, instead of the equals key in a calculator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n36 / 12 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\nOf course, in a computer there are no keys for square root and similar, we type the name of the function instead. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(36)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\nIn a calculator we use \"memories\" (e.g., M1, M2, etc. ) to store values, with keys frequently labeled \"MSTO\" and \"MRCL\" used to store and recal them. In R we use names or _variables_, that we can chose, and use `<name> <-` to store a value and the `<name>` to recall the stored value. I use `<name>` to signify any valid name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_number <- 36\nmy_number\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 36\n```\n\n\n:::\n:::\n\n\nWe have assigned `36` to `a_name` and we can now use `a_name` in computations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_number / 12 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\nsqrt(my_number)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\nWhy is this useful? Because, we can describe the operations using names, instead of specific numbers or values. This allows to describe the operation to be done, as an abstract rule that we can apply unchanged to different numbers, by assigning them to the names used in the code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_number <- 24\nmy_number / 12 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\nsqrt(my_number)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.898979\n```\n\n\n:::\n:::\n\n\n## Precedence rules\n\nThe normal arithmetic precedence rules apply to R expressions, and the order can be altered with parentheses following the normal rules. While in arithmetic it is common to use different brackets depending on the nesting ${[()]}$ in R only parentheses are used to indicate the order of precedence in evaluation. _The other brackets are reserved for other uses._\n\n## Functions\n\nFunctions are named _chuncks_ of code, defined using named placeholders or _parameters_ to which we can pass values as _arguments_.\n\nIn an the examples above we _called_ function `sqrt()` with a _constant value_ `36` as argument and also with variable `my_number` as argument.\n\n## Time to play\n\nNow it is time for your to play with numbers.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}