{
  "hash": "ca4b369ba965f5e9629c9a14499ed647",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Spectral Irradiance with 'ooacquire'\"\nsubtitle: \"Tutorial and Description of the UI of acq_irrad_interactive()\"\nauthor: \"Pedro J. Aphalo\"\ndate: 2023-04-27\ndate-modified: 2023-05-10\ncategories: [R for Photobiology, data acquisition]\nkeywords: [ooacquire pkg, acq_irrad_interactive, spectral irradiance, spectral fluence]\ncode-fold: false\n---\n\n\n::: callout-note\nPackage 'ooacquire' is part of the [R for Photobiology suite of R\npackages](r4p-introduction.qmd) and its [full\ndocumentation](https://docs.r4photobiology.info/ooacquire) is available\non-line. It depends on package 'rOmniDriver', whose [full\ndocumentation](https://docs.r4photobiology.info/rOmniDriver) is also\navailable on-line.\n:::\n\n::: callout-warning\nThe description and diagrams shown in this page are valid for 'ooacquire'\nversions >= 0.3.2-1. Versions <= 0.3.2 differ from version 0.3.2-1 in the user\ninterface implemented in function `acq_irrad_interactive()` described in this\npage. Acquisition of fluence spectra with function `acq_irrad_interactive()` is\npossible only in versions >= 0.3.4 of 'ooacquire'.\n:::\n\n## Introduction\n\nR package ['ooacquire'](https://docs.r4photobiology.info/ooacquire/) is a\ncomponent of the [R for\nPhotobiology](https://www.r4photobiology.info/pages/r4p-introduction.html) suite\nof packages and supports the near-real-time acquisition of spectral data using\nOcean Optics spectrometers from [Ocean Insight](https://www.oceaninsight.com/). \nPackage 'ooacquire' imports and uses classes, methods and functions defined in other\npackages of the suite.\n\nSpectral energy irradiance is expressed in $W\\,m^{-2}\\,nm^{-1}$ and spectral\nfluence in $J\\,m^{-2}\\,nm^{-1}$. The corresponding photon-based units are\n$mol\\,s^{-1}\\,m^{-2}\\,nm^{-1}$ and $mol\\,m^{-2}\\,nm^{-1}$. Irradiance is a flux\nrate expressed per unit time and fluence is an exposure expressed per event.\nWhen illumination is constant during a short measurement event, it is customary\nto describe its intensity using irradiance. When illumination is a discrete\npulse shorter than the duration of the measurement event, fluence is used to\ndescribe the amount of energy or number of photons per pulse. Fluence can be\neasily computed from irradiance if we known the duration of the exposure.\nComputing actual irradiance from fluence is nearly impossible unless the pulse\nare from a square wave and we know their duration. Of course, if pulse are\nregularly spaced in time, have the same duration and amplitude and the\nmeasurement last for long enough, we can obtain an average irradiance across a\ntrain of pulses, as emitted by some light sources, e.g., because of AC mains\npower. PWM dimming or other non-DC power lamp drivers.\n\nFunction `acq_irrad_interactive()` implements the interactive acquisition of\nspectral irradiance and spectral fluence data using Ocean Optics array\nspectrometers. It returns the acquired data as a _side effect_ by saving them to\nfiles on disk. The raw-counts data are acquired and converted into spectral\nirradiance values. The data for each measurement event are saved as soon as\nacquired, but a group of successively acquired spectra can be collected into a\nsingle object, summarized and/or saved to a file on disk in addition to the\nindividual files per measurement event. In every case the raw counts data,\ninstrument descriptor, instrument settings and either computed spectral\nirradiance or computed counts per second are saved to disk. Plots are displayed\non the screen for each measurement event. A measurement event consists of either\na single light spectrum or of a time series of light spectra.\n\nPackage 'ooacquire' has been evolving for several years and will continue to\nevolve, specially with respect to interactive acquisition of spectral data. The\nuser interface for spectral irradiance is currently more polished and complex\nthan the interfaces for fluence spectra and transmittance and reflectance\nspectra. This is because both myself and other users most of the time use\n'ooacquire' to measure spectral irradiance.\n\nThe user interfaces (UIs) implemented in functions `acq_irrad_interactive()`,\n`acq_fluence_interactive()`, `acq_fraction_interactive()` and their variations\nare text based rather than graphical. The design is optimized for frequent users\nrather than for occasional users. A key design objective has been to make the\nacquisition of multiple spectra per measurement session as comfortable and as\nfast as possible, i.e., avoid tedious. This is different to what is usually\nmeant by _user friendly_ involving hand-holding and verbose options within the\ninterface.\n\nAs much as possible, options are selected by typing a single character, or even\njust the enter key, thanks to context and state dependent defaults. The\ninterface is as far as it can be from visually attractive, but it works well for\nmyself, and most other people who use it.\n\nTo start a session within R for the measurement of spectral irradiance\naccepting all defaults we can type at the R console, one statement to\nload and attach package 'ooacquire', a second, optional statement to set an\noption to tell R to print warning immediately instead of delayed, and a\nthird statement to call the function and then use the UI it opens.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ooacquire)\noptions(warn = 1)\nacq_irrad_interactive()\n```\n:::\n\n\nThe video below demonstrates the use of the interface for an old version of\n'ooacquire' (will be replaced by an up-to-date one).\n\n\n{{< video https://vimeo.com/821595528 >}}\n\n\n\nThe UI implemented in `acq_irrad_interactive()` is rather _terse_ and, thus,\nneeds to be clearly documented. The vignettes of package 'ooacquire' include\nsome examples. However, a description of the logic can be best done using\ndiagrams. [Mermaid](https://mermaid.js.org/) is a markdown-like language for the\neasy creation of diagrams, but not yet supported in vignettes. As its many\ndiagrams are encoded using Mermaid and it includes video content, this tutorial\nis published as a page at the [R for Photobioly web\nsite](https://www.r4photobiology.info) instead of as part of the 'ooacquire'\nR pakage documentation.\n\n## Interface modes\n\nFunction `acq_irrad_interactive()` is like a Swiss Army Knife. It has multiple\n''personalities'' and the first step is the choice of `interface.mode`, which\ndetermines which interface will be shown to the user. Basically, the selected\n`interface.mode` determines which options can be modified by the user through\nthe interactive UI and which ones are fixed at the values set when the function\nis called. \n\nIn addition, whether PDF files containing plots of individual measurements, and\nwhether different summaries and plots from the created collectiond of spectra\nare saved to files or not can be controlled also by passing arguments to formal\nparameters when the function is called.\n\nNormally, when measuring several spectra in a row, any redundant need to select\nchoices in a menue or enter repeatedly the same setting values by the user is\ndistracting and time consuming. This is tackled using three three strategies: 1)\nwith multiple interface modes with each mode displaying the parts of the user\ninterface used in the case of a given type of measurements, and 2) by\ncontext-dependent defaults in menues, and 3) by easily repeating measurements\nwith the most recently used settings and reference readings.\n\nIn this section we describe the overall logic behind strategies 1) and 3). Four\nmodes are available, and which one is used is selected by the argument passed to\nformal parameter `interface.mode` when `acq_irrad_interactive()` is called to\nstart a spectral-data acquisition session.\nThere are four main interface modes built into `acq_irrad_interactive()` with \n`\"auto\"` as default.\n\n\n```{mermaid}\n%%| label: fig-modes\n%%| fig-cap: Supported user-interface modes. The default, `\"auto\"`, is highlighted.\n%%{ init: {\"graph\": {\"htmlLabels\": true}} }%%\n%%| fig-align: center\nflowchart TB\n  A[interface.mode = ] -.-> B(\"simple\")\n  A --> C(<b>auto</b>)\n  A -.-> D(\"series\")\n  A -.-> E(\"manual\")\n  A -.-> F(\"full\")\n```\n\n\nAppending `-attr` to these mode names enables the UI for setting the values of \nattributes `what.measured` and `comment`. For example, `\"simple\"` becomes\n`\"simple-attr\"`.\n\n## Start up\n\nThe UI does not differ among interface modes for the initialization steps, and\nit is not part of the loop for the acquisition of individual spectra or series\nof spectra.\n\n\n```{mermaid}\n%%| label: fig-startup-diagram\n%%| fig-cap: Flow chart of the user interaction at the start of a data acquisition session.\n%%| fig-align: center\nflowchart TB\n  A((<b>start</b>)) --> B(select spectrometer\\nand channel?)\n  B --> C(session name?) --> C1(user name?) --> D(folder name?) --> E(((<b>1</b>)))\n```\n\n\nThe loop diagrams shown in the sections below, are all active after these first \nsteps are completed. The encircled 1, simply signals this connection.\n\n## User Interface Loop\n\nIn the diagrams below I show single boxes not only for the input of single values but also for\nmenus containing multiple options. These menues are `attribute?`, `acquisition parameters?`, \nand `series parameters?`. Within `plot and save` and `plot and save collection`\nthere are options about the formatting of the plot, and in the second case also\nabout the file name used to save the collection.\n\nWe start with a complete flowchart of the UI loop for the acquisition of \nspectra, which shows all the possibilities, but does not correspond to any\n`interface.mode`, because all of them are subsets.\n\nOnce one measurement is completed and saved, a new measurement can be acquire\nusing the same settings for the acquisition as well as reusing the same _dark_ and\n_filter_ reference spectra (`repeat`) or with the possibility of changing\nthese settings and acquiring fresh _dark_ and _filter_ reference spectra (`next`).\n\n\n```{mermaid}\n%%| label: fig-complete-diagram\n%%| fig-cap: Flow chart of the user interaction loop repeated for each spectrum acquired. Showing all steps, only some of which are displayed depending on the interface mode in use.\n%%| fig-align: center\nflowchart TB\n  E(((<b>1</b>))) --> G(protocol?)\n  G --> I(object name?) --> J(attributes?) --> K(acquisition\\nparameters?)\n  K --> L(series parameters?) --> M[[measure\\nspectra]] --> N[(plot and save)] \n  N --> N1{collect?} --yes--> N2[(plot and save\\ncollection)] --> O{next\\n repeat\\n or end?}\n  N1 --no--> O\n  J -.repeat.-> L\n  O -.repeat.-> I\n  O --next--> G\n  O --> P((<b>end</b>))\n```\n\n\n### `\"simple\"` mode\n\nThe `\"simple\"` interface mode provides a minimalist UI, quite similar to the only UI available\nin early versions of 'ooacquire'. It is intended for the acquisition of individual irradiance spectra.\n\n\n```{mermaid}\n%%| label: fig-simple-diagram\n%%| fig-cap: Flow chart of the user interaction loop repeated for each spectrum acquired. Showing steps enabled under mode `\"simple\"`.\n%%| fig-align: center\n%%{ init: {\"graph\": {\"htmlLabels\": true}} }%%\nflowchart\n  E(((<b>1</b>))) --> G(protocol?)\n  G --> I(object name?) --> K(acquisition\\nparameters?\\n<i>simplified</i>)\n  K --> M[[measure\\nspectra]] --> N[(plot and save)] --> O{next\\nrepeat\\nor end?}\n  I -.repeat.-> M\n  O -.repeat.-> I\n  O --next--> G\n  O --> P((<b>end</b>))\n```\n\n\n### `\"auto\"` mode\n\nThe `\"auto\"` interface mode provides a complete UI intended for the acquisition of individual spectra and possibly packing groups of spectra into collections and computing summaries. The default is to adjust the integration time automatically by measurement, and it is best suited to the measurement of sources that emit light continuously with an output that varies little in the short time.\n\n\n```{mermaid}\n%%| label: fig-auto-diagram\n%%| fig-cap: Flow chart of the user interaction loop repeated for each spectrum acquired. Showing steps enabled under mode `\"auto\"`.\n%%| fig-align: center\n%%{ init: {\"graph\": {\"htmlLabels\": true}} }%%\nflowchart TB\n  E(((<b>1</b>))) --> G(protocol?)\n  G --> I(object name?) --> K(acquisition\\nparameters?\\n<i>full</i>)\n  K --> M[[measure\\nspectra]] --> N[(plot and save)]\n  N --> N1{collect?} --yes--> N2[(plot and save\\ncollection)] --> O{next\\nrepeat\\nor end?}\n  N1 --no--> O\n  I -.repeat.-> M\n  O -.repeat.-> I\n  O --next--> G\n  O --> P((<b>end</b>))\n```\n\n\n### `\"manual\"` mode\n\nMode `\"manual\"` differs from `\"auto\"` in that the default is for the user to directly set the integration time. It is most useful when measuring _fluence_ from manually triggered light pulses, such as a xenon flash.   \n\n### `\"series\"` mode\n\nThe `\"series\"` interface mode provides a complete UI intended for the acquisition of time series of spectra and possibly packing groups of time series of spectra into collections and computing summaries.\n\n\n```{mermaid}\n%%| label: fig-series-diagram\n%%| fig-cap: Flow chart of the user interaction loop repeated for each spectrum acquired. Showing steps enabled under mode `\"series\"`.\n%%| fig-align: center\n%%{ init: {\"graph\": {\"htmlLabels\": true}} }%%\nflowchart TB\n  E(((<b>1</b>))) --> G(protocol?)\n  G --> I(object name?) --> K(acquisition\\nparameters?\\n<i>full</i>)\n  K --> L(series parameters?) --> M[[measure\\nspectra]] --> N[(plot and save)]\n  N --> N1{collect?} --yes--> N2[(plot and save\\ncollection)] --> O{next\\nrepeat\\nor end?}\n  N1 --no--> O\n  I -.repeat.-> L\n  O -.repeat.-> I\n  O --next--> G\n  O --> P((<b>end</b>))\n```\n\n\n### `\"full\"` mode\n\nMode \"full\" is in practice of little or no use except for testing as it makes all settings of the UI visible to the user.\n\n### `\"-attr\"` variants of the  modes\n\nAppending `\"-attr\"` to the name of any `interface.mode` enables the menu\nand dialogues that enable the setting of the `what.measured` and `comment`\nattributes of the `source_spct` objects into which spectra are saved. This\ncould be represented in the diagrams by the insertion of an `attributes?` box \nimmediately below `object name?` as shown in the first\ndiagram showing the full logic. \n\n### Selecting the interface mode\n\nWhen calling function `acq_irrad_interactive()` we can pass arguments to\ntailor the UI to our current needs. \nFor example, to use the `\"simple\"` mode instead of the default `\"auto\"` mode\nwe can call the function as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacq_irrad_interactive(interface.mode = \"simple\")\n```\n:::\n\n\nWe can in addition disable the saving of specific output to files. For example\nto disable the saving of PDF files of the plots from individual measurements and\nfrom collections of spectra we can use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacq_irrad_interactive(save.pdfs = FALSE)\n```\n:::\n\n\nIf we do not intend to create and save collections of spectra or summaries, we can\ndisable these steps, removing from users' view one menu that becomes redundant.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacq_irrad_interactive(save.collections = FALSE, \n                      save.summaries = FALSE)\n```\n:::\n\n\nIf we do not want to save ready made summaries but still be able to create\nand save collections of spectra we can use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacq_irrad_interactive(save.summaries = FALSE)\n```\n:::\n\n\nOf course, these options are independent of each other, and can be combined as \nneeded.\n\n::: callout-note\nSaving plots of large collections of spectra or of long time series of spectra \nto disk is a slow process. Disabling this step by passing `save.pdfs = FALSE`\ncould be worthwhile in such cases.\n:::\n\n## Measurement protocols\n\nThe different diagrams below _open_ the actions that take place within the\n`measure spectra` boxes in the diagrams above, previously treated as _black\nboxes_. These actions depend on the protocol used for the measurements and on\nwhether the measurement is a fresh one (`next`) or one reusing settings and\nreference measurements (`repeat`). The same measurement protocols are available\nin the different user interface modes. We show here the protocols available by\ndefault. However, users can define their own protocols. In the diagrams below,\n`start` and `end` represent the start and end of a measurement event, i.e., the\nboundaries of the generic `measure spectra` boxes in the diagrams above. Within\neach step in most cases several spectra are acquired, with the same integration\ntime when averaging is used and with different integration times when HDR is\nused. In all modes except series, the same number of raw spectra are acquired\nfor _dark_, _filter_ and _light_ if used, and combined into a single irradiance\nor fluence spectrum. In the case of series, measurements are repeated in time\nfor _light_ so that several irradiance spectra are obtained measured at regular\ntime intervals.\n\n### Protocol `l`\n\n`l` stands for acquisition of _light_ scans.\n\n\n```{mermaid}\n%%| label: fig-protocol-l\n%%| fig-cap: Flow chart of the measurement steps for protocol _light_ or `l`.\nflowchart LR\n  S((<b>start</b>)) --> C\n  C[light\\nspectrum or\\nspectra] --> E((<b>end</b>))\n  C -.series.-> C\n```\n\n\n### Protocol `ld`\n\n`ld` stands for acquisition of _light_ and _dark_ scans sequentially in this order.\n\n\n```{mermaid}\n%%| label: fig-protocol-ld\n%%| fig-cap: Flow chart of the measurement steps for protocol _light + dark_ or `ld`.\nflowchart LR\n  S((<b>start</b>)) --> A\n  A -.repeat.-> E\n  A[light\\nspectrum or\\nspectra] --next--> D[dark\\nspectrum] --> E((<b>end</b>))\n  A -.series.-> A\n```\n\n\n### Protocol `lfd`\n\n`lfd` stands for acquisition of _light_, _filter_ and _dark_ scans sequentially in this order.\n\n\n```{mermaid}\n%%| label: fig-protocol-lfd\n%%| fig-cap: Flow chart of the measurement steps for protocol _light + filter + dark_ or `lfd`.\nflowchart LR\n  S((<b>start</b>)) --> A\n  A -.repeat.-> E\n  A[light\\nspectrum or\\nspectra] --next--> B[filter\\nspectrum] --> C[dark\\nspectrum] --> E((<b>end</b>))\n  A -.series.-> A\n```\n\n\n### Protocol `dl`\n\n`dl` is identical to `ld` except for the sequential order of the acquisition of data.\n\n\n```{mermaid}\n%%| label: fig-protocol-dl\n%%| fig-cap: Flow chart of the measurement steps for protocol _dark + light_ or `dl`.\nflowchart LR\n  S((<b>start</b>)) --next--> A\n  S -.repeat.-> C\n  A[dark\\nspectrum] --> C[light\\nspectrum or\\nspectra] --> E((<b>end</b>))\n  C -.series.-> C\n```\n\n\n### Protocol `dfl`\n\n`dfl` is identical to `lfd` except for the sequential order of the acquisition of data.\n\n\n```{mermaid}\n%%| label: fig-protocol-dfl\n%%| fig-cap: Flow chart of the measurement steps for protocol _dark + filter + light_ or `dfl`.\nflowchart LR\n  S((<b>start</b>)) --next--> A\n  S -.repeat.-> C\n  A[dark\\nspectrum] --> B[filter\\nspectrum] --> C[light\\nspectrum or\\nspectra] --> E((<b>end</b>))\n  C -.series.-> C\n```\n\n\n## Spectral quantity\n\nThrough parameter `qty.out` we can choose between four alternatives: `\"raw\"`\n(raw instrument counts for each detector pixel), `\"cps\"` (counts per second for\neach detector pixel), `\"irrad\"` (energy and/or photon spectral irradiance) and\n`\"fluence\"` (energy and/or photon spectral fluence). Spectral irradiance and\nspectral fluence can be computed in near real time only if irradiance\ncalibration factors and correction method definitions are available for the\nspectrometer used. The raw detector counts are always returned allowing in all\ncases spectral irradiance and spectral fluence to be computed or recomputed at a\nlater time.\n\n## Acquisition parameters\n\nWe describe the data acquisition parameters affecting the acquisition of\nspectral irardiance only briefly here, and refer the reader to the [vignette\nthat describes the algorithms\nused](https://docs.r4photobiology.info/ooacquire/articles/userguide-algorithms.html)\nincluded in package 'ooacquire'.\n\nFor the _integration time_ used for the acquisition of data a distinction is made\nbetween the duration of a single integration event and the total added-up\nintegration time resulting from successive integrations averaged by the\nspectrometer or driver. The duration of individual integrations needs to be\nadjusted or tuned so that full use is made of the dynamic range and signal to\nnoise headroom of the instrument. The total measured time, can obviously be\nonly as long or longer than a single integration. When spectral irradiance \nis constant in time, the longer the total time over which scans are averaged\nthe better \"random\" noise is controlled.\n\nTo increase the dynamic range we can use different integration times for\ndifferent wavelength-regions of the spectrum (HDR or \"bracketing\") and splice the\ncounts per second spectra during their conversion into spectral irradiance.\nDynamic range is not the only limiting factor. Stray light and thermal noise\nlimit the signal to noise ratio. Stray light may depend on the shape of the\nmeasured spectrum and thermal noise on the temperature of the spectrometer.\nIn normal cases the achievable increase in dynamic range with the HDR approach \nis approxinately one order of magnitude.\n\nStray light can be most effectively corrected for by measuring it separately\nfrom the target of the measurements. This is the role of the filter\nmeasurements in the protocols described above.\n\nAcquisition parameters include the integration time (= duration of a single\nintegration) which is normally, but not always, adjusted by automatic tuning\n(i.e., by trial and error, taking into account a target margin of headroom\nsupplied by the user), and a target duration range for the sum of multiple\nintegration times desired, which is always explicitly supplied by the user. For\nbracketing the user supplies a vector of multipliers to be applied to the\noptimal or set integration time. All parameters have defaults, and user-entered\nvalues persist between successive measurement events unless modified again by\nthe user.\n\nIn the case of spectral fluence, although available, several of the corrections\nare in practice difficult to implement because of the discontinuous light\nemission by the sources. If pulses can be triggered on demand and the output per\npulse is reproducible, stray light correction is applicable. Adjustment of\nsignal level and eventually bracketing need to be done based on the number of\npulses per detector integration.\n\n::: callout-note\nFor additional information, please, see the [help page for\n`acq_irrad_interactive()`](https://docs.r4photobiology.info/ooacquire/reference/acq_irrad_interactive.html)\nand the vignetters of package 'ooacquire', especially that [describing the\nalgorithms\nused](https://docs.r4photobiology.info/ooacquire/articles/userguide-algorithms.html).\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}